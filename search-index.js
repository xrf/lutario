var searchIndex = {};
searchIndex["aho_corasick"] = {"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"generics":["dense"],"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dense"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sparse"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["ansi_term"] = {"doc":"This is a library for controlling colours and formatting, such as red bold text or blue underlined text, on ANSI terminals.","items":[[3,"Prefix","ansi_term","Like `ANSIString`, but only displays the style prefix.",null,null],[3,"Infix","","Like `ANSIString`, but only displays the difference between two styles.",null,null],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",null,null],[3,"Style","","A style is a collection of properties that can format a string using ANSI escape codes.",null,null],[12,"foreground","","The style's foreground colour, if it has one.",0,null],[12,"background","","The style's background colour, if it has one.",0,null],[12,"is_bold","","Whether this style is bold.",0,null],[12,"is_dimmed","","Whether this style is dimmed.",0,null],[12,"is_italic","","Whether this style is italic.",0,null],[12,"is_underline","","Whether this style is underlined.",0,null],[12,"is_blink","","Whether this style is blinking.",0,null],[12,"is_reverse","","Whether this style has reverse colours.",0,null],[12,"is_hidden","","Whether this style is hidden.",0,null],[12,"is_strikethrough","","Whether this style is struckthrough.",0,null],[3,"ANSIGenericString","","An ANSIGenericString includes a generic string type and a Style to display that string.  ANSIString and ANSIByteString are aliases for this type on str and [u8], respectively.",null,null],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be written with a minimum of control characters.",null,null],[12,"0","","",1,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,null],[4,"Color","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,null],[5,"ANSIStrings","","A function to construct an ANSIStrings instance.",null,null],[5,"ANSIByteStrings","","A function to construct an ANSIByteStrings instance.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"infix"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"prefix","","The prefix for this style.",0,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"infix","","The infix between this style and another.",0,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"infix"}}],[11,"suffix","","The suffix for this style.",0,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"prefix","","The prefix for this colour.",2,{"inputs":[{"name":"self"}],"output":{"name":"prefix"}}],[11,"infix","","The infix between this colour and another.",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"infix"}}],[11,"suffix","","The suffix for this colour.",2,{"inputs":[{"name":"self"}],"output":{"name":"suffix"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"new","","Creates a new Style with no differences.",0,{"inputs":[],"output":{"name":"style"}}],[11,"bold","","Returns a Style with the bold property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a Style with the hidden property set.",0,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fg","","Returns a Style with the foreground colour property set.",0,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",0,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"is_plain","","Return true if this `Style` has no actual styles, and can be written without any control characters.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","Returns a style with no properties set. Formatting text using this style returns the exact same text.",0,{"inputs":[],"output":{"name":"style"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"colour"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"normal","","Return a Style with the foreground colour set to this colour.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"bold","","Returns a Style with the bold property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a Style with the strikethrough property set.",2,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",2,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"from","","You can turn a `Colour` into a `Style` with the foreground colour set with the `From` trait.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"ansigenericstring"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"ansigenericstring"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"ansigenericstring"}}],[11,"from","","",6,{"inputs":[{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string. This is a short-cut so you don’t have to use `Blue.normal()` just to get blue text.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ansigenericstring"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"ANSIString","","An ANSI String is a string coupled with the Style to display it in a terminal.",null,null],[6,"ANSIByteString","","An ANSIByteString represents a formatted series of bytes.  Use ANSIByteString when styling text with an unknown encoding.",null,null],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a minimum of control characters.",null,null],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be written with a minimum of control characters.",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_to","","Write an ANSIByteString to an io::Write.  This writes the escape sequences for the associated Style around the bytes.",8,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_to","","Write ANSIByteStrings to an io::Write.  This writes the minimal escape sequences for the associated Styles around each set of bytes.",10,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}]],"paths":[[3,"Style"],[3,"ANSIGenericStrings"],[4,"Colour"],[3,"Prefix"],[3,"Infix"],[3,"Suffix"],[3,"ANSIGenericString"],[6,"ANSIString"],[6,"ANSIByteString"],[6,"ANSIStrings"],[6,"ANSIByteStrings"]]};
searchIndex["any_key"] = {"doc":"Dynamically typed keys for associative arrays.","items":[[3,"HasherMut","any_key","Work around the inability of `Hash` to accept unsized `Hasher`s.",null,null],[8,"AnyHash","","Object-safe trait for dynamically typed hashable keys.",null,null],[10,"debug","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[10,"eq","","",0,{"inputs":[{"name":"self"},{"name":"anyhash"}],"output":{"name":"bool"}}],[10,"hash","","",0,{"inputs":[{"name":"self"},{"name":"hasher"}],"output":null}],[8,"AnyOrd","","Object-safe trait for dynamically typed totally ordered keys.",null,null],[10,"debug","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[10,"eq","","",1,{"inputs":[{"name":"self"},{"name":"anyord"}],"output":{"name":"bool"}}],[10,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"anyord"}],"output":{"name":"ordering"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"finish","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",2,null],[11,"is","","Returns true if the boxed type is the same as `T`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_ref_unchecked","","Returns a reference to the boxed value, blindly assuming it to be of type `T`. If you are not absolutely certain of `T`, you must not call this.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut_unchecked","","Returns a mutable reference to the boxed value, blindly assuming it to be of type `T`. If you are not absolutely certain of `T`, you must not call this.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast","","Returns the boxed value if it is of type `T`, or `Err(Self)` if it isn't.",0,{"inputs":[{"name":"box"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast_unchecked","","Returns the boxed value, blindly assuming it to be of type `T`. If you are not absolutely certain of `T`, you must not call this.",0,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"is","","Returns true if the boxed type is the same as `T`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or `None` if it isn't.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_ref_unchecked","","Returns a reference to the boxed value, blindly assuming it to be of type `T`. If you are not absolutely certain of `T`, you must not call this.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or `None` if it isn't.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut_unchecked","","Returns a mutable reference to the boxed value, blindly assuming it to be of type `T`. If you are not absolutely certain of `T`, you must not call this.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"downcast","","Returns the boxed value if it is of type `T`, or `Err(Self)` if it isn't.",1,{"inputs":[{"name":"box"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast_unchecked","","Returns the boxed value, blindly assuming it to be of type `T`. If you are not absolutely certain of `T`, you must not call this.",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}]],"paths":[[8,"AnyHash"],[8,"AnyOrd"],[3,"HasherMut"]]};
searchIndex["atty"] = {"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",null,null],[13,"Stdout","","",0,null],[13,"Stderr","","",0,null],[13,"Stdin","","",0,null],[5,"is","","returns true if this is a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[5,"isnt","","returns true if this is not a tty",null,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Stream"]]};
searchIndex["bincode"] = {"doc":"`bincode` is a crate for encoding and decoding using a tiny binary serialization strategy.","items":[[3,"Bounded","bincode","A SizeLimit that restricts serialized or deserialized messages from exceeding a certain byte length.",null,null],[12,"0","","",0,null],[3,"Infinite","","A SizeLimit without a limit! Use this if you don't care about the size of encoded or decoded messages.",null,null],[5,"deserialize","","Deserializes a slice of bytes into an object.",null,null],[5,"deserialize_from","","Deserializes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"s"}],"output":{"name":"result"}}],[5,"serialize_into","","Serializes an object directly into a `Writer`.",null,{"inputs":[{"name":"w"},{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[5,"serialize","","Serializes a serializable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"s"}],"output":{"generics":["vec"],"name":"result"}}],[0,"internal","","A collection of serialization and deserialization functions that use the `serde` crate for the serializable and deserializable implementation.",null,null],[3,"Deserializer","bincode::internal","A Deserializer that reads bytes from a buffer.",null,null],[3,"Serializer","","An Serializer that encodes values directly into a Writer.",null,null],[4,"ErrorKind","","The kind of error that can be produced during a serialization or deserialization.",null,null],[13,"Io","","If the error stems from the reader/writer that is being used during (de)serialization, that error will be stored and returned here.",1,null],[13,"InvalidUtf8Encoding","","Returned if the deserializer attempts to deserialize a string that is not valid utf8",1,null],[13,"InvalidBoolEncoding","","Returned if the deserializer attempts to deserialize a bool that was not encoded as either a 1 or a 0",1,null],[13,"InvalidCharEncoding","","Returned if the deserializer attempts to deserialize a char that is not in the correct format.",1,null],[13,"InvalidTagEncoding","","Returned if the deserializer attempts to deserialize the tag of an enum that is not in the expected ranges",1,null],[13,"DeserializeAnyNotSupported","","Serde has a deserialize_any method that lets the format hint to the object which route to take in deserializing.",1,null],[13,"SizeLimit","","If (de)serializing a message takes more than the provided size limit, this error is returned.",1,null],[13,"SequenceMustHaveLength","","Bincode can not encode sequences of unknown length (like iterators).",1,null],[13,"Custom","","A custom error message from Serde.",1,null],[5,"serialize_into","","Serializes an object directly into a `Writer`.",null,{"inputs":[{"name":"w"},{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[5,"serialize","","Serializes a serializable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"s"}],"output":{"generics":["vec"],"name":"result"}}],[5,"serialized_size","","Returns the size that an object would be if serialized using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"serialized_size_bounded","","Given a maximum size limit, check how large an object would be if it were to be serialized.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"generics":["u64"],"name":"option"}}],[5,"deserialize_from","","Deserializes an object directly from a `Read`er.",null,{"inputs":[{"name":"r"},{"name":"s"}],"output":{"name":"result"}}],[5,"deserialize","","Deserializes a slice of bytes into an object.",null,null],[6,"Result","","The result of a serialization or deserialization operation.",null,null],[6,"Error","","An error that can be produced during (de)serializing.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",2,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"custom","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"read_types","bincode","The types that the deserializer uses for optimizations",null,null],[3,"SliceReader","bincode::read_types","A BincodeRead implementation for byte slices",null,null],[3,"IoReader","","A BincodeRead implementation for io::Readers",null,null],[8,"BincodeRead","","A byte-oriented reading trait that is specialized for slices and generic readers.",null,null],[6,"Deserializer","bincode","A Deserializer that uses LittleEndian byteorder",null,null],[6,"Serializer","","A Serializer that uses LittleEndian byteorder",null,null],[8,"SizeLimit","","A limit on the amount of bytes that can be read or written.",null,null],[10,"add","","Tells the SizeLimit that a certain number of bytes has been read or written.  Returns Err if the limit has been exceeded.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"limit","","Returns the hard limit (if one exists)",3,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bounded"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"infinite"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"limit","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"limit","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"new","bincode::internal","Creates a new Serializer with the given `Write`r.",5,{"inputs":[{"name":"w"}],"output":{"name":"serializer"}}],[11,"new","bincode::read_types","Constructs a slice reader",6,null],[11,"new","","Constructs an IoReadReader",7,{"inputs":[{"name":"r"}],"output":{"name":"ioreader"}}],[11,"read","","",6,null],[11,"read_exact","","",6,null],[11,"read","","",7,null],[11,"read_exact","","",7,null],[11,"forward_read_str","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"get_byte_buffer","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["vec"],"name":"result"}}],[11,"forward_read_bytes","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"forward_read_str","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"get_byte_buffer","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["vec"],"name":"result"}}],[11,"forward_read_bytes","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","bincode::internal","Creates a new Deserializer with a given `Read`er and a size_limit.",8,{"inputs":[{"name":"r"},{"name":"s"}],"output":{"name":"deserializer"}}]],"paths":[[3,"Bounded"],[4,"ErrorKind"],[6,"Error"],[8,"SizeLimit"],[3,"Infinite"],[3,"Serializer"],[3,"SliceReader"],[3,"IoReader"],[3,"Deserializer"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FLAG_A","","",0,null],[18,"FLAG_B","","",0,null],[18,"FLAG_C","","",0,null],[18,"FLAG_ABC","","",0,null],[11,"empty","","Returns an empty set of flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"u32"}],"output":{"generics":["flags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[[3,"Flags"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for `BigEndian`.",null,null],[6,"LE","","A type alias for `LittleEndian`.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cblas"] = {"doc":"Wrappers for [CBLAS] (C).","items":[[4,"Diagonal","cblas","",null,null],[13,"Generic","","",0,null],[13,"Unit","","",0,null],[4,"Layout","","",null,null],[13,"RowMajor","","",1,null],[13,"ColumnMajor","","",1,null],[4,"Part","","",null,null],[13,"Upper","","",2,null],[13,"Lower","","",2,null],[4,"Side","","",null,null],[13,"Left","","",3,null],[13,"Right","","",3,null],[4,"Transpose","","",null,null],[13,"None","","",4,null],[13,"Ordinary","","",4,null],[13,"Conjugate","","",4,null],[5,"dcabs1","","",null,{"inputs":[{"name":"c64"}],"output":{"name":"f64"}}],[5,"scabs1","","",null,{"inputs":[{"name":"c32"}],"output":{"name":"f32"}}],[5,"sdsdot","","",null,null],[5,"dsdot","","",null,null],[5,"sdot","","",null,null],[5,"ddot","","",null,null],[5,"cdotu_sub","","",null,null],[5,"cdotc_sub","","",null,null],[5,"zdotu_sub","","",null,null],[5,"zdotc_sub","","",null,null],[5,"snrm2","","",null,null],[5,"sasum","","",null,null],[5,"dnrm2","","",null,null],[5,"dasum","","",null,null],[5,"scnrm2","","",null,null],[5,"scasum","","",null,null],[5,"dznrm2","","",null,null],[5,"dzasum","","",null,null],[5,"isamax","","",null,null],[5,"idamax","","",null,null],[5,"icamax","","",null,null],[5,"izamax","","",null,null],[5,"sswap","","",null,null],[5,"scopy","","",null,null],[5,"saxpy","","",null,null],[5,"dswap","","",null,null],[5,"dcopy","","",null,null],[5,"daxpy","","",null,null],[5,"cswap","","",null,null],[5,"ccopy","","",null,null],[5,"caxpy","","",null,null],[5,"zswap","","",null,null],[5,"zcopy","","",null,null],[5,"zaxpy","","",null,null],[5,"srotg","","",null,null],[5,"srotmg","","",null,null],[5,"srot","","",null,null],[5,"srotm","","",null,null],[5,"drotg","","",null,null],[5,"drotmg","","",null,null],[5,"drot","","",null,null],[5,"drotm","","",null,null],[5,"sscal","","",null,null],[5,"dscal","","",null,null],[5,"cscal","","",null,null],[5,"zscal","","",null,null],[5,"csscal","","",null,null],[5,"zdscal","","",null,null],[5,"sgemv","","",null,null],[5,"sgbmv","","",null,null],[5,"strmv","","",null,null],[5,"stbmv","","",null,null],[5,"stpmv","","",null,null],[5,"strsv","","",null,null],[5,"stbsv","","",null,null],[5,"stpsv","","",null,null],[5,"dgemv","","",null,null],[5,"dgbmv","","",null,null],[5,"dtrmv","","",null,null],[5,"dtbmv","","",null,null],[5,"dtpmv","","",null,null],[5,"dtrsv","","",null,null],[5,"dtbsv","","",null,null],[5,"dtpsv","","",null,null],[5,"cgemv","","",null,null],[5,"cgbmv","","",null,null],[5,"ctrmv","","",null,null],[5,"ctbmv","","",null,null],[5,"ctpmv","","",null,null],[5,"ctrsv","","",null,null],[5,"ctbsv","","",null,null],[5,"ctpsv","","",null,null],[5,"zgemv","","",null,null],[5,"zgbmv","","",null,null],[5,"ztrmv","","",null,null],[5,"ztbmv","","",null,null],[5,"ztpmv","","",null,null],[5,"ztrsv","","",null,null],[5,"ztbsv","","",null,null],[5,"ztpsv","","",null,null],[5,"ssymv","","",null,null],[5,"ssbmv","","",null,null],[5,"sspmv","","",null,null],[5,"sger","","",null,null],[5,"ssyr","","",null,null],[5,"sspr","","",null,null],[5,"ssyr2","","",null,null],[5,"sspr2","","",null,null],[5,"dsymv","","",null,null],[5,"dsbmv","","",null,null],[5,"dspmv","","",null,null],[5,"dger","","",null,null],[5,"dsyr","","",null,null],[5,"dspr","","",null,null],[5,"dsyr2","","",null,null],[5,"dspr2","","",null,null],[5,"chemv","","",null,null],[5,"chbmv","","",null,null],[5,"chpmv","","",null,null],[5,"cgeru","","",null,null],[5,"cgerc","","",null,null],[5,"cher","","",null,null],[5,"chpr","","",null,null],[5,"cher2","","",null,null],[5,"chpr2","","",null,null],[5,"zhemv","","",null,null],[5,"zhbmv","","",null,null],[5,"zhpmv","","",null,null],[5,"zgeru","","",null,null],[5,"zgerc","","",null,null],[5,"zher","","",null,null],[5,"zhpr","","",null,null],[5,"zher2","","",null,null],[5,"zhpr2","","",null,null],[5,"sgemm","","",null,null],[5,"ssymm","","",null,null],[5,"ssyrk","","",null,null],[5,"ssyr2k","","",null,null],[5,"strmm","","",null,null],[5,"strsm","","",null,null],[5,"dgemm","","",null,null],[5,"dsymm","","",null,null],[5,"dsyrk","","",null,null],[5,"dsyr2k","","",null,null],[5,"dtrmm","","",null,null],[5,"dtrsm","","",null,null],[5,"cgemm","","",null,null],[5,"csymm","","",null,null],[5,"csyrk","","",null,null],[5,"csyr2k","","",null,null],[5,"ctrmm","","",null,null],[5,"ctrsm","","",null,null],[5,"zgemm","","",null,null],[5,"zsymm","","",null,null],[5,"zsyrk","","",null,null],[5,"zsyr2k","","",null,null],[5,"ztrmm","","",null,null],[5,"ztrsm","","",null,null],[5,"chemm","","",null,null],[5,"cherk","","",null,null],[5,"cher2k","","",null,null],[5,"zhemm","","",null,null],[5,"zherk","","",null,null],[5,"zher2k","","",null,null],[6,"c32","","A complex number with 32-bit parts.",null,null],[6,"c64","","A complex number with 64-bit parts.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"diagonal"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"diagonal"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"part"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"side"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"side"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"transpose"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"transpose"}],"output":{"name":"bool"}}]],"paths":[[4,"Diagonal"],[4,"Layout"],[4,"Part"],[4,"Side"],[4,"Transpose"]]};
searchIndex["cblas_sys"] = {"doc":"Bindings to [CBLAS] (C).","items":[[4,"CBLAS_LAYOUT","cblas_sys","",null,null],[13,"CblasRowMajor","","",0,null],[13,"CblasColMajor","","",0,null],[4,"CBLAS_TRANSPOSE","","",null,null],[13,"CblasNoTrans","","",1,null],[13,"CblasTrans","","",1,null],[13,"CblasConjTrans","","",1,null],[4,"CBLAS_UPLO","","",null,null],[13,"CblasUpper","","",2,null],[13,"CblasLower","","",2,null],[4,"CBLAS_DIAG","","",null,null],[13,"CblasNonUnit","","",3,null],[13,"CblasUnit","","",3,null],[4,"CBLAS_SIDE","","",null,null],[13,"CblasLeft","","",4,null],[13,"CblasRight","","",4,null],[5,"cblas_dcabs1","","",null,null],[5,"cblas_scabs1","","",null,null],[5,"cblas_sdsdot","","",null,null],[5,"cblas_dsdot","","",null,null],[5,"cblas_sdot","","",null,null],[5,"cblas_ddot","","",null,null],[5,"cblas_cdotu_sub","","",null,null],[5,"cblas_cdotc_sub","","",null,null],[5,"cblas_zdotu_sub","","",null,null],[5,"cblas_zdotc_sub","","",null,null],[5,"cblas_snrm2","","",null,null],[5,"cblas_sasum","","",null,null],[5,"cblas_dnrm2","","",null,null],[5,"cblas_dasum","","",null,null],[5,"cblas_scnrm2","","",null,null],[5,"cblas_scasum","","",null,null],[5,"cblas_dznrm2","","",null,null],[5,"cblas_dzasum","","",null,null],[5,"cblas_isamax","","",null,null],[5,"cblas_idamax","","",null,null],[5,"cblas_icamax","","",null,null],[5,"cblas_izamax","","",null,null],[5,"cblas_sswap","","",null,null],[5,"cblas_scopy","","",null,null],[5,"cblas_saxpy","","",null,null],[5,"cblas_dswap","","",null,null],[5,"cblas_dcopy","","",null,null],[5,"cblas_daxpy","","",null,null],[5,"cblas_cswap","","",null,null],[5,"cblas_ccopy","","",null,null],[5,"cblas_caxpy","","",null,null],[5,"cblas_zswap","","",null,null],[5,"cblas_zcopy","","",null,null],[5,"cblas_zaxpy","","",null,null],[5,"cblas_srotg","","",null,null],[5,"cblas_srotmg","","",null,null],[5,"cblas_srot","","",null,null],[5,"cblas_srotm","","",null,null],[5,"cblas_drotg","","",null,null],[5,"cblas_drotmg","","",null,null],[5,"cblas_drot","","",null,null],[5,"cblas_drotm","","",null,null],[5,"cblas_sscal","","",null,null],[5,"cblas_dscal","","",null,null],[5,"cblas_cscal","","",null,null],[5,"cblas_zscal","","",null,null],[5,"cblas_csscal","","",null,null],[5,"cblas_zdscal","","",null,null],[5,"cblas_sgemv","","",null,null],[5,"cblas_sgbmv","","",null,null],[5,"cblas_strmv","","",null,null],[5,"cblas_stbmv","","",null,null],[5,"cblas_stpmv","","",null,null],[5,"cblas_strsv","","",null,null],[5,"cblas_stbsv","","",null,null],[5,"cblas_stpsv","","",null,null],[5,"cblas_dgemv","","",null,null],[5,"cblas_dgbmv","","",null,null],[5,"cblas_dtrmv","","",null,null],[5,"cblas_dtbmv","","",null,null],[5,"cblas_dtpmv","","",null,null],[5,"cblas_dtrsv","","",null,null],[5,"cblas_dtbsv","","",null,null],[5,"cblas_dtpsv","","",null,null],[5,"cblas_cgemv","","",null,null],[5,"cblas_cgbmv","","",null,null],[5,"cblas_ctrmv","","",null,null],[5,"cblas_ctbmv","","",null,null],[5,"cblas_ctpmv","","",null,null],[5,"cblas_ctrsv","","",null,null],[5,"cblas_ctbsv","","",null,null],[5,"cblas_ctpsv","","",null,null],[5,"cblas_zgemv","","",null,null],[5,"cblas_zgbmv","","",null,null],[5,"cblas_ztrmv","","",null,null],[5,"cblas_ztbmv","","",null,null],[5,"cblas_ztpmv","","",null,null],[5,"cblas_ztrsv","","",null,null],[5,"cblas_ztbsv","","",null,null],[5,"cblas_ztpsv","","",null,null],[5,"cblas_ssymv","","",null,null],[5,"cblas_ssbmv","","",null,null],[5,"cblas_sspmv","","",null,null],[5,"cblas_sger","","",null,null],[5,"cblas_ssyr","","",null,null],[5,"cblas_sspr","","",null,null],[5,"cblas_ssyr2","","",null,null],[5,"cblas_sspr2","","",null,null],[5,"cblas_dsymv","","",null,null],[5,"cblas_dsbmv","","",null,null],[5,"cblas_dspmv","","",null,null],[5,"cblas_dger","","",null,null],[5,"cblas_dsyr","","",null,null],[5,"cblas_dspr","","",null,null],[5,"cblas_dsyr2","","",null,null],[5,"cblas_dspr2","","",null,null],[5,"cblas_chemv","","",null,null],[5,"cblas_chbmv","","",null,null],[5,"cblas_chpmv","","",null,null],[5,"cblas_cgeru","","",null,null],[5,"cblas_cgerc","","",null,null],[5,"cblas_cher","","",null,null],[5,"cblas_chpr","","",null,null],[5,"cblas_cher2","","",null,null],[5,"cblas_chpr2","","",null,null],[5,"cblas_zhemv","","",null,null],[5,"cblas_zhbmv","","",null,null],[5,"cblas_zhpmv","","",null,null],[5,"cblas_zgeru","","",null,null],[5,"cblas_zgerc","","",null,null],[5,"cblas_zher","","",null,null],[5,"cblas_zhpr","","",null,null],[5,"cblas_zher2","","",null,null],[5,"cblas_zhpr2","","",null,null],[5,"cblas_sgemm","","",null,null],[5,"cblas_ssymm","","",null,null],[5,"cblas_ssyrk","","",null,null],[5,"cblas_ssyr2k","","",null,null],[5,"cblas_strmm","","",null,null],[5,"cblas_strsm","","",null,null],[5,"cblas_dgemm","","",null,null],[5,"cblas_dsymm","","",null,null],[5,"cblas_dsyrk","","",null,null],[5,"cblas_dsyr2k","","",null,null],[5,"cblas_dtrmm","","",null,null],[5,"cblas_dtrsm","","",null,null],[5,"cblas_cgemm","","",null,null],[5,"cblas_csymm","","",null,null],[5,"cblas_csyrk","","",null,null],[5,"cblas_csyr2k","","",null,null],[5,"cblas_ctrmm","","",null,null],[5,"cblas_ctrsm","","",null,null],[5,"cblas_zgemm","","",null,null],[5,"cblas_zsymm","","",null,null],[5,"cblas_zsyrk","","",null,null],[5,"cblas_zsyr2k","","",null,null],[5,"cblas_ztrmm","","",null,null],[5,"cblas_ztrsm","","",null,null],[5,"cblas_chemm","","",null,null],[5,"cblas_cherk","","",null,null],[5,"cblas_cher2k","","",null,null],[5,"cblas_zhemm","","",null,null],[5,"cblas_zherk","","",null,null],[5,"cblas_zher2k","","",null,null],[5,"cblas_xerbla","","",null,null],[6,"c_double_complex","","A complex number with 64-bit parts.",null,null],[6,"c_float_complex","","A complex number with 32-bit parts.",null,null],[6,"CBLAS_INDEX","","",null,null],[6,"CBLAS_ORDER","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"cblas_layout"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"cblas_transpose"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"cblas_uplo"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cblas_diag"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"cblas_side"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"CBLAS_LAYOUT"],[4,"CBLAS_TRANSPOSE"],[4,"CBLAS_UPLO"],[4,"CBLAS_DIAG"],[4,"CBLAS_SIDE"]]};
searchIndex["clap"] = {"doc":"`clap` is a simple-to-use, efficient, and full-featured library for parsing command line arguments and subcommands when writing console/terminal applications.","items":[[3,"Arg","clap","The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.",null,null],[3,"ArgGroup","","`ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these arguments\". By placing arguments in a logical group, you can create easier requirement and exclusion rules instead of having to list each argument individually, or when you want a rule to apply \"any but not all\" arguments.",null,null],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by the user. New instances of this struct are obtained by using the [`App::get_matches`] family of methods.",null,null],[3,"OsValues","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`] method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike [`Values`].",null,null],[3,"SubCommand","","The abstract representation of a command line subcommand.",null,null],[3,"Values","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`] method.",null,null],[3,"App","","Used to create a representation of a command line program and all possible command line arguments. Application settings are set using the \"builder pattern\" with the [`App::get_matches`] family of methods being the terminal methods that starts the runtime-parsing process. These methods then return information about the user supplied arguments (or lack there of).",null,null],[3,"Error","","Command Line Argument Parser Error",null,null],[12,"message","","Formated error message",0,null],[12,"kind","","The type of error",0,null],[12,"info","","Any additional information passed along, such as the argument name that caused the error",0,null],[4,"ArgSettings","","Various settings that apply to arguments and may be set, unset, and checked via getter/setter methods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`] [`Arg::set`]: ./struct.Arg.html#method.set [`Arg::unset`]: ./struct.Arg.html#method.unset [`Arg::is_set`]: ./struct.Arg.html#method.is_set",null,null],[13,"Required","","The argument must be used",1,null],[13,"Multiple","","The argument may be used multiple times such as `--flag --flag`",1,null],[13,"EmptyValues","","The argument allows empty values such as `--option \"\"`",1,null],[13,"Global","","The argument should be propagated down through all child [`SubCommands`] [`SubCommand`]: ./struct.SubCommand.html",1,null],[13,"Hidden","","The argument should not be shown in help text",1,null],[13,"TakesValue","","The argument accepts a value, such as `--option <value>`",1,null],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped via a delimter",1,null],[13,"NextLineHelp","","Prints the help text on the line after the argument",1,null],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple values",1,null],[13,"HidePossibleValues","","Hides the possible values from the help string",1,null],[13,"AllowLeadingHyphen","","Allows vals that start with a '-'",1,null],[13,"RequireEquals","","Require options use `--option=val` syntax",1,null],[13,"Last","","Specifies that the arg is the last positional argument and may be accessed early via `--` syntax",1,null],[13,"HideDefaultValue","","Hides the default value from the help string",1,null],[13,"CaseInsensitive","","Makes `Arg::possible_values` case insensitive",1,null],[13,"HideEnvValues","","Hides ENV values in the help message",1,null],[4,"AppSettings","","Application level settings, which affect how [`App`] operates",null,null],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should not be treated as an error. This is the default behavior of `clap`.",2,null],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument values, such as negative numbers like `-10`. (which would otherwise be parsed as another flag or option)",2,null],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is similar to `AllowLeadingHyphen` except that it only allows numbers, all other undefined leading hyphens will fail to parse.",2,null],[13,"AllowMissingPositional","","Allows one to implement a CLI where the second to last positional argument is optional, but the final positional argument is required. Such as `$ prog [optional] <required>` where one of the two following usages is allowed:",2,null],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which would otherwise cause a [`ErrorKind::UnknownArgument`] error, should instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.",2,null],[13,"ArgsNegateSubcommands","","Specifies that use of a valid [argument] negates [subcomands] being used after. By default `clap` allows arguments between subcommands such as `<cmd> [cmd_args] <cmd2> [cmd2_args] <cmd3> [cmd3_args]`. This setting disables that functionality and says that arguments can only follow the final subcommand. For instance using this setting makes only the following invocations possible:",2,null],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.",2,null],[13,"ColoredHelp","","Uses colorized help messages.",2,null],[13,"ColorAuto","","Enables colored output only when the output is going to a terminal or TTY.",2,null],[13,"ColorAlways","","Enables colored output regardless of whether or not the output is going to a terminal/TTY.",2,null],[13,"ColorNever","","Disables colored output no matter if the output is going to a terminal/TTY, or not.",2,null],[13,"DontCollapseArgsInUsage","","Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string",2,null],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`] was used.",2,null],[13,"DisableHelpSubcommand","","Disables the `help` subcommand",2,null],[13,"DisableVersion","","Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s (Defaults to `false`; application does have a version flag)",2,null],[13,"DeriveDisplayOrder","","Displays the arguments and [`SubCommand`]s in the help message in the order that they were declared in, and not alphabetically which is the default.",2,null],[13,"GlobalVersion","","Specifies to use the version of the current command for all child [`SubCommand`]s. (Defaults to `false`; subcommands have independant version strings from their parents.)",2,null],[13,"Hidden","","Specifies that this [`SubCommand`] should be hidden from help messages",2,null],[13,"HidePossibleValuesInHelp","","Tells `clap` not to print possible values when displaying help information. This can be useful if there are many values, or they are explained elsewhere.",2,null],[13,"InferSubcommands","","Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example to match a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.",2,null],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name. This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one one would not normally type the binary or program name for each command.",2,null],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument.",2,null],[13,"PropagateGlobalValuesDown","","DEPRECATED: This setting is no longer required in order to propagate values up or down",2,null],[13,"SubcommandsNegateReqs","","Allows [`SubCommand`]s to override all requirements of the parent command. For example if you had a subcommand or top level application with a required argument that is only required as long as there is no subcommand present, using this setting would allow you to set those arguments to [`Arg::required(true)`] and yet receive no error so long as the user uses a valid subcommand instead.",2,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before exiting gracefully) if no [`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).",2,null],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail with a [`ErrorKind::InvalidUtf8`] error.",2,null],[13,"SubcommandRequired","","Allows specifying that if no [`SubCommand`] is present at runtime, error and exit gracefully.",2,null],[13,"TrailingVarArg","","Specifies that the final positional argument is a \"VarArg\" and that `clap` should not attempt to parse any further args.",2,null],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more unified help message (a la `getopts` or `docopt` style).",2,null],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all [`SubCommand`]s (Defaults to `false`; subcommands do have version flags.)",2,null],[13,"WaitOnError","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait for user before exiting",2,null],[4,"ErrorKind","","Command line argument parser kind of error",null,null],[13,"InvalidValue","","Occurs when an [`Arg`] has a set of possible values, and the user provides a value which isn't in that set.",3,null],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or subcommand which isn't defined.",3,null],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for being similar enough to an existing subcommand. If it doesn't meet the threshold, or the 'suggestions' feature is disabled, the more general [`UnknownArgument`] error is returned.",3,null],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which either doesn't meet the threshold for being similar enough to an existing subcommand, or the 'sggestions' feature is disabled. Otherwise the more detailed [`InvalidSubcommand`] error is returned.",3,null],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty values.",3,null],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the value fails that validation.",3,null],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting [`Arg::max_values`].",3,null],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting [`Arg::min_values`].",3,null],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what's been defined by setting [`Arg::number_of_values`] or than was implicitly set by [`Arg::value_names`].",3,null],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can't be used together.",3,null],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",3,null],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]), but the user does not provide one.",3,null],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or [`SubCommand`] is required, as defined by [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.",3,null],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an argument which doesn't allow that.",3,null],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and [`AppSettings::StrictUtf8`] is set.",3,null],[13,"HelpDisplayed","","Not a true \"error\" as it means `--help` or similar was used. The help message will be sent to `stdout`.",3,null],[13,"VersionDisplayed","","Not a true \"error\" as it means `--version` or similar was used. The message will be sent to `stdout`.",3,null],[13,"ArgumentNotFound","","Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument with name `config` to be converted, but `config` wasn't used by the user. [`value_t!`]: ./macro.value_t!.html [`values_t!`]: ./macro.values_t!.html",3,null],[13,"Io","","Represents an [I/O error]. Can occur when writing to `stderr` or `stdout` or reading a configuration file. [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html",3,null],[13,"Format","","Represents a [Format error] (which is a part of [`Display`]). Typically caused by writing to `stderr` or `stdout`. [`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html [Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html",3,null],[4,"Shell","","Describes which shell to produce a completions file for",null,null],[13,"Bash","","Generates a .bash completion file for the Bourne Again SHell (BASH)",4,null],[13,"Fish","","Generates a .fish completion file for the Friendly Interactive SHell (fish)",4,null],[13,"Zsh","","Generates a completion file for the Z SHell (ZSH)",4,null],[13,"PowerShell","","Generates a completion file for PowerShell",4,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"appsettings"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates a new instance of an application requiring a name. The name may be, but doesn't have to be same as the binary. The name will be displayed to the user when they request to print version or help and usage information.",5,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"get_name","","Get the name of the app",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_bin_name","","Get the name of the binary",5,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"with_defaults","","Creates a new instance of an application requiring a name, but uses the [`crate_authors!`] and [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.",5,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"author","","Sets a string of author(s) that will be displayed to the user when they request the help information with `--help` or `-h`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely necessary, such as when the binary name for your application is misleading, or perhaps not how the user should invoke your program.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help information with `-h`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long_about","","Sets a string describing what the program does. This will be displayed when displaying help information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"name","","Sets the program's name. This will be displayed when displaying help information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed after the auto-generated help information. This is often used to describe how to use the arguments, or caveats to be noted.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed before the auto-generated help information. This is often used for header information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version","","Sets a string of the version number to be displayed when displaying version or help information with `-V`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long_version","","Sets a string of the version number to be displayed when displaying version or help information with `--version`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used when the auto-generated message does not suffice.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help_short","","Sets the [`short`] for the auto-generated `help` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version_short","","Sets the [`short`] for the auto-generated `version` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help_message","","Sets the help text for the auto-generated `help` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version_message","","Sets the help text for the auto-generated `version` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"template","","Sets the help template to be used, overriding the default format.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"setting","","Enables a single command, or [`SubCommand`], level settings.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"settings","","Enables multiple command, or [`SubCommand`], level settings",5,null],[11,"global_setting","","Enables a single setting that is propagated down through all child [`SubCommand`]s.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"global_settings","","Enables multiple settings which are propagated down through all child [`SubCommand`]s.",5,null],[11,"unset_setting","","Disables a single command, or [`SubCommand`], level setting.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"unset_settings","","Disables multiple command, or [`SubCommand`], level settings.",5,null],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will ignore terminal widths and use source formatting.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_term_width","","Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal widths and use source formatting.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"arg","","Adds an [argument] to the list of valid possibilities.",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"self"}}],[11,"args","","Adds multiple [arguments] to the list of valid possibilties",5,null],[11,"arg_from_usage","","A convenience method for adding a single [argument] from a usage type string. The string used follows the same rules and syntax as [`Arg::from_usage`]",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"args_from_usage","","Adds multiple [arguments] at once from a usage string, one per line. See [`Arg::from_usage`] for details on the syntax and rules supported.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"alias","","Allows adding a [`SubCommand`] alias, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"aliases","","Allows adding [`SubCommand`] aliases, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,null],[11,"visible_alias","","Allows adding a [`SubCommand`] alias that functions exactly like those defined with [`App::alias`], except that they are visible inside the help message.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"visible_aliases","","Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined with [`App::aliases`], except that they are visible inside the help message.",5,null],[11,"group","","Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments. By placing them in a logical group, you can build easier requirement and exclusion rules. For instance, you can make an entire [`ArgGroup`] required, meaning that one (and only one) argument from that group must be present at runtime.",5,{"inputs":[{"name":"self"},{"name":"arggroup"}],"output":{"name":"self"}}],[11,"groups","","Adds multiple [`ArgGroup`]s to the [`App`] at once.",5,null],[11,"subcommand","","Adds a [`SubCommand`] to the list of valid possibilities. Subcommands are effectively sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage, etc. They also function just like [`App`]s, in that they get their own auto generated help, version, and usage.",5,{"inputs":[{"name":"self"},{"name":"app"}],"output":{"name":"self"}}],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilities by iterating over an [`IntoIterator`] of [`SubCommand`]s",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"display_order","","Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used subcommands, or prioritize those towards the top of the list. Duplicate values are allowed. Subcommands with duplicate display orders will be displayed in alphabetical order.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"print_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `-h` to request the help message",5,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"print_long_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `--help` to request the help message",5,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"write_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `-h`",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_long_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `--help`",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_version","","Writes the version message to the user to a [`io::Write`] object as if the user ran `-V`.",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_long_version","","Writes the version message to the user to a [`io::Write`] object",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"gen_completions","","Generate a completions file for a specified shell at compile time.",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"shell"},{"name":"t"}],"output":null}],[11,"gen_completions_to","","Generate a completions file for a specified shell at runtime.  Until `cargo install` can install extra files like a completion script, this may be used e.g. in a command that outputs the contents of the completion script, to be redirected into a file by the user.",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"shell"},{"name":"w"}],"output":null}],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and the process will exit with the appropriate error code. By default this method gets all user provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points, which are legal on many platforms.",5,{"inputs":[{"name":"self"}],"output":{"name":"argmatches"}}],[11,"get_matches_safe","","Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting the process on failed parse. By default this method gets matches from [`env::args_os`]",5,{"inputs":[{"name":"self"}],"output":{"generics":["argmatches"],"name":"clapresult"}}],[11,"get_matches_from","","Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`] and will automatically exit with an error message. This method, however, lets you specify what iterator to use when performing matches, such as a [`Vec`] of your making.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"argmatches"}}],[11,"get_matches_from_safe","","Starts the parsing process. A combination of [`App::get_matches_from`], and [`App::get_matches_safe`]",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["argmatches"],"name":"clapresult"}}],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the [`App`] struct `self`. This is normally not the desired functionality, instead prefer [`App::get_matches_from_safe`] which does consume `self`.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["argmatches"],"name":"clapresult"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"arg"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"arg"}}],[11,"with_name","","Creates a new instance of [`Arg`] using a unique string name. The name will be used to get information about whether or not the argument was used at runtime, get values, set relationships with other args, etc..",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from_usage","","Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings for the [`Arg`]. The syntax is flexible, but there are some rules to follow.",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"short","","Sets the short version of the argument without the preceding `-`.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long","","Sets the long version of the argument without the preceding `--`.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"alias","","Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden arguments as one only needs to check for the existence of this command, and not all variants.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"aliases","","Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",6,null],[11,"visible_alias","","Allows adding a [`Arg`] alias that functions exactly like those defined with [`Arg::alias`], except that they are visible inside the help message.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"visible_aliases","","Allows adding multiple [`Arg`] aliases that functions exactly like those defined with [`Arg::aliases`], except that they are visible inside the help message.",6,null],[11,"help","","Sets the short help text of the argument that will be displayed to the user when they print the help information with `-h`. Typically, this is a short (one line) description of the arg.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"long_help","","Sets the long help text of the argument that will be displayed to the user when they print the help information with `--help`. Typically this a more detailed (multi-line) message that describes the arg.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"last","","Specifies that this arg is the last, or final, positional argument (i.e. has the highest index) and is only able to be accessed via the `--` syntax (i.e. `$ prog args -- last_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax they will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also allows one to access this arg early using the `--` syntax. Accessing an arg early, even with the `--` syntax is otherwise not possible.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is required, when no other conflicting rules have been evaluated. Conflicting rules take precedence over being required. Default: `false`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"require_equals","","Requires that options use the `--option=val` syntax (i.e. an equals between the option and associated value) Default: `false`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"allow_hyphen_values","","Allows values which start with a leading hyphen (`-`)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required_unless","","Sets an arg that override this arg's required setting. (i.e. this arg will be required unless this other argument is present).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"required_unless_all","","Sets args that override this arg's required setting. (i.e. this arg will be required unless all these other arguments are present).",6,null],[11,"required_unless_one","","Sets args that override this arg's [required] setting. (i.e. this arg will be required unless at least one of these other arguments are present).",6,null],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument, the following argument can't be present and vice versa.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per argument.",6,null],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,null],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when using this argument, the following argument must be present.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_if","","Allows a conditional requirement. The requirement will only become valid if this arg's value equals `val`.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_ifs","","Allows multiple conditional requirements. The requirement will only become valid if this arg's value equals `val`.",6,null],[11,"required_if","","Allows specifying that an argument is [required] conditionally. The requirement will only become valid if the specified `arg`'s value equals `val`.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"required_ifs","","Allows specifying that an argument is [required] based on multiple conditions. The conditions are set up in a `(arg, val)` style tuple. The requirement will only become valid if one of the specified `arg`'s value equals it's corresponding `val`.",6,null],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when using this argument, the following arguments must be present.",6,null],[11,"takes_value","","Specifies that the argument takes a value at run time.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hide_possible_values","","Specifies if the possible values of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show possible values)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hide_default_value","","Specifies if the default value of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show default value)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"index","","Specifies the index of a positional argument starting at 1.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d` would count as three occurrences. For options there is a distinct difference in multiple occurrences vs multiple values.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"value_terminator","","Specifies a value that stops parsing multiple values of a give argument. By default when one sets [`multiple(true)`] on an argument, clap will continue parsing values for that argument until it reaches another valid argument, or one of the other more specific settings for multiple values is used (such as [`min_values`], [`max_values`] or [`number_of_values`]).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"global","","Specifies that an argument can be matched to all child [`SubCommand`]s.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at the command line with an explicit `\"\"`, or `''`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hidden","","Hides an argument from help message output.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that only one of the specified values was used, or fails with an error message.",6,null],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies that only one of the specified values was used, or fails with error message.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"case_insensitive","","When used with [`Arg::possible_values`] it allows the argument value to pass validation even if the case differs from that of the specified `possible_value`.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"group","","Specifies the name of the [`ArgGroup`] the argument belongs to.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"groups","","Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.",6,null],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a `-f <file>` argument where you wanted exactly 3 'files' you would set `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided 3 and only 3 values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a message displayed to the user.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"validator_os","","Works identically to Validator but is intended to be used with values that could contain non UTF-8 formatted strings.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"max_values","","Specifies the maximum number of values are for this argument. For example, if you had a `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3 values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"min_values","","Specifies the minimum number of values for this argument. For example, if you had a `-f <file>` argument where you wanted at least 2 'files' you would set `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"use_delimiter","","Specifies whether or not an argument should allow grouping of multiple values via a delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`, and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the value delimiter for all arguments that accept values (options and positional arguments)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"require_delimiter","","Specifies that multiple values may only be set using the delimiter. This means if an if an option is encountered, and no delimiter is found, it automatically assumed that no additional values for that option follow. This is unlike the default, where it is generally assumed that more values will follow regardless of whether or not a delimiter is used.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used for help and usage strings only. The names are not used to access arguments. The values of the arguments are accessed in numeric order (i.e. if you specify two names `one` and `two` `one` will be the first matched value, `two` will be the second).",6,null],[11,"value_name","","Specifies the name for value of [option] or [positional] arguments inside of help documentation. This name is cosmetic only, the name is not used to access arguments. This setting can be very helpful when describing the type of input the user should be using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to use all capital letters for the value name.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value","","Specifies the value of the argument when not specified at runtime.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value_os","","Provides a default value in the exact same manner as [`Arg::default_value`] only using [`OsStr`]s instead. [`Arg::default_value`]: ./struct.Arg.html#method.default_value [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"default_value_if","","Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be present at runtime and have the value `val`.",6,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["str"],"name":"option"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value_if_os","","Provides a conditional default value in the exact same manner as [`Arg::default_value_if`] only using [`OsStr`]s instead. [`Arg::default_value_if`]: ./struct.Arg.html#method.default_value_if [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,{"inputs":[{"name":"self"},{"name":"str"},{"generics":["osstr"],"name":"option"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"default_value_ifs","","Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`]. The method takes a slice of tuples in the `(arg, Option<val>, default)` format.",6,null],[11,"default_value_ifs_os","","Provides multiple conditional default values in the exact same manner as [`Arg::default_value_ifs`] only using [`OsStr`]s instead. [`Arg::default_value_ifs`]: ./struct.Arg.html#method.default_value_ifs [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,null],[11,"env","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment, if available. If it is not present in the environment, then default rules will apply.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"env_os","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment if available in the exact same manner as [`Arg::env`] only using [`OsStr`]s instead.",6,{"inputs":[{"name":"self"},{"name":"osstr"}],"output":{"name":"self"}}],[11,"hide_env_values","","@TODO @p2 @docs @release: write docs",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and indented once. This can be helpful for arguments with very long or complex help messages. This can also be helpful for arguments with very long flag names, or many/long value names.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used args, or prioritize those towards the top of the list. Duplicate values are allowed. Args with duplicate display orders will be displayed in alphabetical order.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_set","","Checks if one of the [`ArgSettings`] settings is set for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"set","","Sets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"self"}}],[11,"unset","","Unsets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"arg"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"argmatches"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"value_of","","Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes an additional value at runtime). If the option wasn't present at runtime it returns `None`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["str"],"name":"option"}}],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn't present at runtime it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["cow"],"name":"option"}}],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument value may contain invalid UTF-8 code points.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"values_of","","Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument (i.e. an argument that takes multiple values at runtime). If the option wasn't present at runtime it returns `None`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["values"],"name":"option"}}],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the option wasn't present at runtime it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["vec"],"name":"option"}}],[11,"values_of_os","","Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["osvalues"],"name":"option"}}],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn't present it will return `0`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"u64"}}],[11,"subcommand_matches","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if the subcommand wasn't present at runtime.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"generics":["argmatches"],"name":"option"}}],[11,"subcommand_name","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know which subcommand was actually used. This method returns the name of the subcommand that was used at runtime, or `None` if one wasn't.",7,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"subcommand","","This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`] by returning a tuple with both pieces of information.",7,null],[11,"usage","","Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"osvalues"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["osstr"],"name":"option"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"subcommand"}}],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed to the user when they print version or help and usage information.",10,{"inputs":[{"name":"str"}],"output":{"name":"app"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"arggroup"}}],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name. The name will be used to get values from the group or refer to the group inside of conflict and requirement rules.",11,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"arg","","Adds an [argument] to this group by name",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"args","","Adds multiple [arguments] to this group by name",11,null],[11,"multiple","","Allows more than one of the ['Arg']s in this group to be used. (Default: `false`)",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required","","Sets the group as required or not. A required group will be displayed in the usage string of the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states that one argument from this group must be present at runtime (unless conflicting with another argument).",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when any one of the arguments from this group is used.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when one of the arguments from this group is used.",11,null],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"arggroup"}],"output":{"name":"self"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"argsettings"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"use_stderr","","Should the message be written to `stdout` or not",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",0,null],[11,"with_description","","Create an error with a custom description.",0,{"inputs":[{"name":"str"},{"name":"errorkind"}],"output":{"name":"self"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"shell"}}],[11,"variants","","A list of possible variants in `&'static str` form",4,null],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","Short hand for [`Result`] type [`Result`]: https://doc.rust-lang.org/std/result/enum.Result.html",null,null],[14,"value_t","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] from an argument value. This macro returns a `Result<T,String>` which allows you as the developer to decide what you'd like to do on a failed parse. There are two types of errors, parse failures and those where the argument wasn't present (such as a non-required argument). You can use it to get a single value, or a iterator as with the [`ArgMatches::values_of`]",null,null],[14,"value_t_or_exit","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] or exiting upon error, instead of returning a [`Result`] type.",null,null],[14,"values_t","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] This macro returns a [`clap::Result<Vec<T>>`] which allows you as the developer to decide what you'd like to do on a failed parse.",null,null],[14,"values_t_or_exit","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] or exiting upon error.",null,null],[14,"_clap_count_exprs","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time evaluable expression, suitable for use as a static array size, or the value of a `const`.",null,null],[14,"arg_enum","","Convenience macro to generate more complete enums with variants to be used as a type when parsing arguments. This enum also provides a `variants()` function which can be used to retrieve a `Vec<&'static str>` of the variant names, as well as implementing [`FromStr`] and [`Display`] automatically.",null,null],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at compile time as `MAJOR.MINOR.PATCH_PKGVERSION_PRE`",null,null],[14,"crate_authors","","Allows you to pull the authors for the app from your Cargo.toml at compile time in the form: `\"author1 lastname <author1@example.com>:author2 lastname <author2@example.com>\"`",null,null],[14,"crate_description","","Allows you to pull the description from your Cargo.toml at compile time.",null,null],[14,"crate_name","","Allows you to pull the name from your Cargo.toml at compile time.",null,null],[14,"app_from_crate","","Allows you to build the `App` instance from your Cargo.toml at compile time.",null,null],[14,"clap_app","","Build `App`, `Arg`s, `SubCommand`s and `Group`s with Usage-string like input but without the associated parsing runtime cost.",null,null]],"paths":[[3,"Error"],[4,"ArgSettings"],[4,"AppSettings"],[4,"ErrorKind"],[4,"Shell"],[3,"App"],[3,"Arg"],[3,"ArgMatches"],[3,"Values"],[3,"OsValues"],[3,"SubCommand"],[3,"ArgGroup"]]};
searchIndex["conv"] = {"doc":"This crate provides a number of conversion traits with more specific semantics than those provided by `as` or `From`/`Into`.","items":[[4,"DefaultApprox","conv","The \"default\" approximation scheme.  This scheme does whatever would generally be expected of a lossy conversion, assuming no additional context or instruction is given.",null,null],[4,"Wrapping","","This scheme is used to convert a value by \"wrapping\" it into a narrower range.",null,null],[4,"RoundToNearest","","This scheme is used to convert a value by rounding it to the nearest representable value, with ties rounding away from zero.",null,null],[4,"RoundToNegInf","","This scheme is used to convert a value by rounding it toward negative infinity to the nearest representable value.",null,null],[4,"RoundToPosInf","","This scheme is used to convert a value by rounding it toward positive infinity to the nearest representable value.",null,null],[4,"RoundToZero","","This scheme is used to convert a value by rounding it toward zero to the nearest representable value.",null,null],[0,"macros","","This module provides convenience macros to help with implementing the conversion traits.",null,null],[0,"prelude","","Publicly re-exports the most generally useful set of items.",null,null],[0,"errors","","This module defines the various error types that can be produced by a failed conversion.",null,null],[3,"Unrepresentable","conv::errors","Indicates that the conversion failed because the value was not representable.",null,null],[12,"0","","",0,null],[3,"NegOverflow","","Indicates that the conversion failed due to a negative overflow.",null,null],[12,"0","","",1,null],[3,"PosOverflow","","Indicates that the conversion failed due to a positive overflow.",null,null],[12,"0","","",2,null],[4,"GeneralError","","A general error enumeration that subsumes all other conversion errors.",null,null],[13,"NegOverflow","","Input was too negative for the target type.",3,null],[13,"PosOverflow","","Input was too positive for the target type.",3,null],[13,"Unrepresentable","","Input was not representable in the target type.",3,null],[4,"GeneralErrorKind","","A general error enumeration that subsumes all other conversion errors, but discards all input payloads the errors may be carrying.",null,null],[13,"NegOverflow","","Input was too negative for the target type.",4,null],[13,"PosOverflow","","Input was too positive for the target type.",4,null],[13,"Unrepresentable","","Input was not representable in the target type.",4,null],[4,"NoError","","Indicates that it is not possible for the conversion to fail.",null,null],[4,"FloatError","","Indicates that a conversion from a floating point type failed.",null,null],[13,"NegOverflow","","Input was too negative for the target type.",5,null],[13,"PosOverflow","","Input was too positive for the target type.",5,null],[13,"NotANumber","","Input was not-a-number, which the target type could not represent.",5,null],[4,"RangeError","","Indicates that a conversion failed due to a range error.",null,null],[13,"NegOverflow","","Input was too negative for the target type.",6,null],[13,"PosOverflow","","Input was too positive the target type.",6,null],[4,"RangeErrorKind","","Indicates that a conversion failed due to a range error.",null,null],[13,"NegOverflow","","Input was too negative for the target type.",7,null],[13,"PosOverflow","","Input was too positive for the target type.",7,null],[8,"Saturate","","Saturates a `Result`.",null,null],[16,"Output","","The result of saturating.",8,null],[10,"saturate","","Replaces an overflow error with a saturated value.",8,null],[8,"UnwrapOk","","Safely unwrap a `Result` that cannot contain an error.",null,null],[10,"unwrap_ok","","Unwraps a `Result` without possibility of failing.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"UnwrapOrInf","","Unwrap a conversion by saturating to infinity.",null,null],[16,"Output","","The result of unwrapping.",10,null],[10,"unwrap_or_inf","","Either unwraps the successfully converted value, or saturates to infinity in the \"direction\" of overflow.",10,null],[8,"UnwrapOrInvalid","","Unwrap a conversion by replacing a failure with an invalid sentinel value.",null,null],[16,"Output","","The result of unwrapping.",11,null],[10,"unwrap_or_invalid","","Either unwraps the successfully converted value, or returns the output type's invalid sentinel value.",11,null],[8,"UnwrapOrSaturate","","Unwrap a conversion by saturating.",null,null],[16,"Output","","The result of unwrapping.",12,null],[10,"unwrap_or_saturate","","Either unwraps the successfully converted value, or saturates in the \"direction\" of overflow.",12,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"generalerror"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"generalerror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"generalerror"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"generalerror"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"generalerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"generalerror"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"generalerror"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"generalerror"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"generalerror"}],"output":{"name":"bool"}}],[11,"into_inner","","Returns the value stored in this error.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"noerror"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",3,{"inputs":[{"name":"unrepresentable"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"negoverflow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"posoverflow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"rangeerror"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"floaterror"}],"output":{"name":"generalerror"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"generalerrorkind"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"generalerrorkind"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"generalerrorkind"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"generalerrorkind"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"noerror"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",4,{"inputs":[{"name":"unrepresentable"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"negoverflow"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"posoverflow"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"rangeerrorkind"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"rangeerror"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"generalerror"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"floaterror"}],"output":{"name":"generalerrorkind"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"noerror"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"noerror"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"noerror"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"noerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unrepresentable"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"unrepresentable"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"unrepresentable"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"unrepresentable"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"unrepresentable"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"unrepresentable"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"unrepresentable"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"unrepresentable"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"unrepresentable"}],"output":{"name":"bool"}}],[11,"into_inner","","Returns the value stored in this error.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"noerror"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"negoverflow"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"negoverflow"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"negoverflow"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"negoverflow"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"negoverflow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"negoverflow"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"negoverflow"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"negoverflow"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"negoverflow"}],"output":{"name":"bool"}}],[11,"into_inner","","Returns the value stored in this error.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"noerror"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"posoverflow"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"posoverflow"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"posoverflow"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"posoverflow"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"posoverflow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"posoverflow"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"posoverflow"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"posoverflow"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"posoverflow"}],"output":{"name":"bool"}}],[11,"into_inner","","Returns the value stored in this error.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"noerror"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"floaterror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"floaterror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"floaterror"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"floaterror"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"floaterror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"floaterror"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"floaterror"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"floaterror"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"floaterror"}],"output":{"name":"bool"}}],[11,"into_inner","","Returns the value stored in this error.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"noerror"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",5,{"inputs":[{"name":"negoverflow"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"posoverflow"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"rangeerror"}],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"rangeerror"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"rangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"rangeerror"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"rangeerror"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"rangeerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"rangeerror"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"rangeerror"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"rangeerror"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"rangeerror"}],"output":{"name":"bool"}}],[11,"into_inner","","Returns the value stored in this error.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"noerror"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",6,{"inputs":[{"name":"negoverflow"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"posoverflow"}],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"rangeerrorkind"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"rangeerrorkind"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"rangeerrorkind"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"rangeerrorkind"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",7,{"inputs":[{"name":"noerror"}],"output":{"name":"self"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",7,{"inputs":[{"name":"negoverflow"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"posoverflow"}],"output":{"name":"self"}}],[11,"from","","",7,{"inputs":[{"name":"rangeerror"}],"output":{"name":"self"}}],[0,"misc","conv","This module defines some additional traits not directly tied to conversions.",null,null],[8,"Saturated","conv::misc","This trait indicates that values of a type can be logically \"saturated\".",null,null],[10,"saturated_max","","Returns the type's saturated, maximum value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"saturated_min","","Returns the type's saturated, minimum value.",14,{"inputs":[],"output":{"name":"self"}}],[8,"InvalidSentinel","","This trait indicates that a type has an \"invalid\" sentinel value.",null,null],[10,"invalid_sentinel","","Returns the type's \"invalid\" sentinel value.",15,{"inputs":[],"output":{"name":"self"}}],[8,"SignedInfinity","","This trait indicates that a type has positive and negative \"infinity\" values.",null,null],[10,"neg_infinity","","Returns the type's positive infinity value.",16,{"inputs":[],"output":{"name":"self"}}],[10,"pos_infinity","","Returns the type's negative infinity value.",16,{"inputs":[],"output":{"name":"self"}}],[8,"ApproxFrom","conv","This trait is used to perform a conversion that is permitted to approximate the result, but not to wrap or saturate the result to fit into the destination type's representable range.",null,null],[16,"Err","","The error type produced by a failed conversion.",17,null],[10,"approx_from","","Convert the given value into an approximately equivalent representation.",17,{"inputs":[{"name":"src"}],"output":{"name":"result"}}],[8,"ApproxInto","","This is the dual of `ApproxFrom`; see that trait for information.",null,null],[16,"Err","","The error type produced by a failed conversion.",18,null],[10,"approx_into","","Convert the subject into an approximately equivalent representation.",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"ApproxScheme","","This trait is used to mark approximation scheme types.",null,null],[8,"TryFrom","","This trait is used to perform a conversion between different semantic types which might fail.",null,null],[16,"Err","","The error type produced by a failed conversion.",19,null],[10,"try_from","","Convert the given value into the subject type.",19,{"inputs":[{"name":"src"}],"output":{"name":"result"}}],[8,"TryInto","","This is the dual of `TryFrom`; see that trait for information.",null,null],[16,"Err","","The error type produced by a failed conversion.",20,null],[10,"try_into","","Convert the subject into the destination type.",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"ValueFrom","","This trait is used to perform an exact, value-preserving conversion.",null,null],[16,"Err","","The error type produced by a failed conversion.",21,null],[10,"value_from","","Convert the given value into an exactly equivalent representation.",21,{"inputs":[{"name":"src"}],"output":{"name":"result"}}],[8,"ValueInto","","This is the dual of `ValueFrom`; see that trait for information.",null,null],[16,"Err","","The error type produced by a failed conversion.",22,null],[10,"value_into","","Convert the subject into an exactly equivalent representation.",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"ConvUtil","","This extension trait exists to simplify using various conversions.",null,null],[11,"approx_as","","Approximate the subject to a given type with the default scheme.",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"approx_as_by","","Approximate the subject to a given type with a specific scheme.",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_as","","Convert the subject to a given type.",23,{"inputs":[{"name":"self"}],"output":{"name":"dst"}}],[11,"try_as","","Attempt to convert the subject to a given type.",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"value_as","","Attempt a value conversion of the subject to a given type.",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"ConvAsUtil","","This extension trait exists to simplify using various conversions.",null,null],[11,"approx","","Approximate the subject with the default scheme.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"approx_by","","Approximate the subject with a specific scheme.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[14,"TryFrom","","See the documentation for the `macros` module for details.",null,null]],"paths":[[3,"Unrepresentable"],[3,"NegOverflow"],[3,"PosOverflow"],[4,"GeneralError"],[4,"GeneralErrorKind"],[4,"FloatError"],[4,"RangeError"],[4,"RangeErrorKind"],[8,"Saturate"],[8,"UnwrapOk"],[8,"UnwrapOrInf"],[8,"UnwrapOrInvalid"],[8,"UnwrapOrSaturate"],[4,"NoError"],[8,"Saturated"],[8,"InvalidSentinel"],[8,"SignedInfinity"],[8,"ApproxFrom"],[8,"ApproxInto"],[8,"TryFrom"],[8,"TryInto"],[8,"ValueFrom"],[8,"ValueInto"],[8,"ConvUtil"],[8,"ConvAsUtil"]]};
searchIndex["custom_derive"] = {"doc":"Note: This crate has been superseded by `macro-attr`.","items":[],"paths":[]};
searchIndex["debugit"] = {"doc":"Use debug printlns, without the trait bounds (using specialization to find the right impl anyway).","items":[[3,"DebugIt","debugit","This type always implements `Debug`. Uses specialization to use the inner value's Debug (which it should basically always have).",null,null],[12,"0","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"debugit"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"debugit","","Print a message, and then each value's debug representation (if it has one)",null,null]],"paths":[[3,"DebugIt"]]};
searchIndex["flate2"] = {"doc":"A DEFLATE-based stream compression/decompression library","items":[[3,"GzBuilder","flate2","A builder structure to create a new gzip Encoder.",null,null],[3,"GzHeader","","A structure representing the header of a gzip stream.",null,null],[3,"Compress","","Raw in-memory compression stream for blocks of data.",null,null],[3,"CompressError","","Error returned when a compression object is used incorrectly or otherwise generates an error.",null,null],[3,"DecompressError","","Error returned when a decompression object finds that the input stream of bytes was not a valid input stream of bytes.",null,null],[3,"Decompress","","Raw in-memory decompression stream for blocks of data.",null,null],[3,"Crc","","The CRC calculated by a [`CrcReader`].",null,null],[3,"CrcReader","","A wrapper around a [`Read`] that calculates the CRC.",null,null],[3,"Compression","","When compressing data, the compression level can be specified by a value in this enum.",null,null],[4,"Status","","Possible status results of compressing some data or successfully decompressing a block of data.",null,null],[13,"Ok","","Indicates success.",0,null],[13,"BufError","","Indicates that forward progress is not possible due to input or output buffers being empty.",0,null],[13,"StreamEnd","","Indicates that all input has been consumed and all output bytes have been written. Decompression/compression should not be called again.",0,null],[4,"FlushCompress","","Values which indicate the form of flushing to be used when compressing in-memory data.",null,null],[13,"None","","A typical parameter for passing to compression/decompression functions, this indicates that the underlying stream to decide how much data to accumulate before producing output in order to maximize compression.",1,null],[13,"Sync","","All pending output is flushed to the output buffer and the output is aligned on a byte boundary so that the decompressor can get all input data available so far.",1,null],[13,"Partial","","All pending output is flushed to the output buffer, but the output is not aligned to a byte boundary.",1,null],[13,"Full","","All output is flushed as with `Flush::Sync` and the compression state is reset so decompression can restart from this point if previous compressed data has been damaged or if random access is desired.",1,null],[13,"Finish","","Pending input is processed and pending output is flushed.",1,null],[4,"FlushDecompress","","Values which indicate the form of flushing to be used when decompressing in-memory data.",null,null],[13,"None","","A typical parameter for passing to compression/decompression functions, this indicates that the underlying stream to decide how much data to accumulate before producing output in order to maximize compression.",2,null],[13,"Sync","","All pending output is flushed to the output buffer and the output is aligned on a byte boundary so that the decompressor can get all input data available so far.",2,null],[13,"Finish","","Pending input is processed and pending output is flushed.",2,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new CRC.",3,{"inputs":[],"output":{"name":"crc"}}],[11,"sum","","bla",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"amount","","The number of bytes that have been used to calculate the CRC. This value is only accurate if the amount is lower than 232.",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"update","","Update the CRC with the bytes in `data`.",3,null],[11,"reset","","Reset the CRC.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"combine","","Combine the CRC with the CRC for the subsequent block of bytes.",3,{"inputs":[{"name":"self"},{"name":"crc"}],"output":null}],[11,"new","","Create a new CrcReader.",4,{"inputs":[{"name":"r"}],"output":{"name":"crcreader"}}],[11,"crc","","Get the Crc for this CrcReader.",4,{"inputs":[{"name":"self"}],"output":{"name":"crc"}}],[11,"into_inner","","Get the reader that is wrapped by this CrcReader.",4,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_ref","","Get the reader that is wrapped by this CrcReader by reference.",4,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Get a mutable reference to the reader that is wrapped by this CrcReader.",4,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"reset","","Reset the Crc in this CrcReader.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"read","","",4,null],[11,"fill_buf","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"consume","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"gzheader"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"gzheader"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gzheader"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"filename","","Returns the `filename` field of this gzip stream's header, if present.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"extra","","Returns the `extra` field of this gzip stream's header, if present.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"comment","","Returns the `comment` field of this gzip stream's header, if present.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"operating_system","","Returns the `operating_system` field of this gzip stream's header.",5,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"mtime","","This gives the most recent modification time of the original file being compressed.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"mtime_as_datetime","","Returns the most recent modification time represented by a date-time type. Returns `None` if the value of the underlying counter is 0, indicating no time stamp is available.",5,{"inputs":[{"name":"self"}],"output":{"generics":["systemtime"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new blank builder with no header by default.",6,{"inputs":[],"output":{"name":"gzbuilder"}}],[11,"mtime","","Configure the `mtime` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"gzbuilder"}}],[11,"operating_system","","Configure the `operating_system` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"gzbuilder"}}],[11,"extra","","Configure the `extra` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"gzbuilder"}}],[11,"filename","","Configure the `filename` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"gzbuilder"}}],[11,"comment","","Configure the `comment` field in the gzip header.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"gzbuilder"}}],[11,"write","","Consume this builder, creating a writer encoder in the process.",6,{"inputs":[{"name":"self"},{"name":"w"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"read","","Consume this builder, creating a reader encoder in the process.",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"buf_read","","Consume this builder, creating a reader encoder in the process.",6,{"inputs":[{"name":"self"},{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"flushcompress"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"flushcompress"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"flushdecompress"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"flushdecompress"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new object ready for compressing data that it's given.",7,{"inputs":[{"name":"compression"},{"name":"bool"}],"output":{"name":"compress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by this compression object.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by this compression object.",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reset","","Quickly resets this compressor without having to reallocate anything.",7,{"inputs":[{"name":"self"}],"output":null}],[11,"compress","","Compresses the input data into the output, consuming only as much input as needed and writing as much output as possible.",7,null],[11,"compress_vec","","Compresses the input data into the extra space of the output, consuming only as much input as needed and writing as much output as possible.",7,null],[11,"new","","Creates a new object ready for decompressing data that it's given.",8,{"inputs":[{"name":"bool"}],"output":{"name":"decompress"}}],[11,"total_in","","Returns the total number of input bytes which have been processed by this decompression object.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of output bytes which have been produced by this decompression object.",8,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"decompress","","Decompresses the input data into the output, consuming only as much input as needed and writing as much output as possible.",8,null],[11,"decompress_vec","","Decompresses the input data into the extra space in the output vector specified by `output`.",8,null],[11,"reset","","Performs the equivalent of replacing this decompression state with a freshly allocated copy.",8,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","","Types which operate over [`Read`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::read","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[3,"MultiGzDecoder","","A gzip streaming decoder that decodes all members of a multistream",null,null],[0,"write","flate2","Types which operate over [`Write`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::write","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[0,"bufread","flate2","Types which operate over [`BufRead`] streams, both encoders and decoders for various formats.",null,null],[3,"DeflateEncoder","flate2::bufread","A DEFLATE encoder, or compressor.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder, or decompressor.",null,null],[3,"ZlibEncoder","","A ZLIB encoder, or compressor.",null,null],[3,"ZlibDecoder","","A ZLIB decoder, or decompressor.",null,null],[3,"GzEncoder","","A gzip streaming encoder",null,null],[3,"GzDecoder","","A gzip streaming decoder",null,null],[3,"MultiGzDecoder","","A gzip streaming decoder that decodes all members of a multistream",null,null],[11,"clone","flate2","",11,{"inputs":[{"name":"self"}],"output":{"name":"compression"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new description of the compression level with an explicitly specified integer.",11,{"inputs":[{"name":"u32"}],"output":{"name":"compression"}}],[11,"none","","No compression is to be performed, this may actually inflate data slightly when encoding.",11,{"inputs":[],"output":{"name":"compression"}}],[11,"fast","","Optimize for the best speed of encoding.",11,{"inputs":[],"output":{"name":"compression"}}],[11,"best","","Optimize for the size of data being encoded.",11,{"inputs":[],"output":{"name":"compression"}}],[11,"level","","Returns an integer representing the compression level, typically on a scale of 0-9",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"compression"}}],[11,"fmt","flate2::bufread","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",12,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",12,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",12,null],[11,"write","","",12,null],[11,"flush","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",13,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"reset_data","","Resets the state of this decoder's data",13,{"inputs":[{"name":"self"}],"output":null}],[11,"get_ref","","Acquires a reference to the underlying stream",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",13,null],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::read","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",14,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",14,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",14,null],[11,"write","","",14,null],[11,"flush","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",15,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoder"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",15,{"inputs":[{"name":"r"},{"generics":["u8"],"name":"vec"}],"output":{"name":"deflatedecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",15,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",15,null],[11,"write","","",15,null],[11,"flush","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::write","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will write compressed data to the stream given at the given compression level.",16,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"deflateencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output stream for another.",16,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_finish","","Consumes this encoder, flushing the output stream.",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that have been written to this compresor.",16,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",16,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",16,null],[11,"flush","","",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will write uncompressed data to the stream.",17,{"inputs":[{"name":"w"}],"output":{"name":"deflatedecoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",17,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",17,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output stream for another.",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for decompression.",17,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its output stream.",17,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",17,null],[11,"flush","","",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",17,null],[11,"fmt","flate2::bufread","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",18,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying reader.",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",18,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",18,null],[11,"write","","",18,null],[11,"flush","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the gzip header.",19,{"inputs":[{"name":"r"}],"output":{"name":"gzdecoder"}}],[11,"header","","Returns the header associated with this stream, if it was valid",19,{"inputs":[{"name":"self"}],"output":{"generics":["gzheader"],"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",19,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",19,null],[11,"write","","",19,null],[11,"flush","","",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the (first) gzip header. If the gzip stream contains multiple members all will be decoded.",20,{"inputs":[{"name":"r"}],"output":{"name":"multigzdecoder"}}],[11,"header","","Returns the current header associated with this stream, if it's valid",20,{"inputs":[{"name":"self"}],"output":{"generics":["gzheader"],"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",20,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",20,null],[11,"write","","",20,null],[11,"flush","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::read","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",21,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying reader.",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Returns the underlying stream, consuming this encoder",21,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",21,null],[11,"write","","",21,null],[11,"flush","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the gzip header.",22,{"inputs":[{"name":"r"}],"output":{"name":"gzdecoder"}}],[11,"header","","Returns the header associated with this stream, if it was valid.",22,{"inputs":[{"name":"self"}],"output":{"generics":["gzheader"],"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",22,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",22,null],[11,"write","","",22,null],[11,"flush","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder from the given reader, immediately parsing the (first) gzip header. If the gzip stream contains multiple members all will be decoded.",23,{"inputs":[{"name":"r"}],"output":{"name":"multigzdecoder"}}],[11,"header","","Returns the current header associated with this stream, if it's valid.",23,{"inputs":[{"name":"self"}],"output":{"generics":["gzheader"],"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying reader.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",23,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"read","","",23,null],[11,"write","","",23,null],[11,"flush","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::write","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will use the given compression level.",24,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"gzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",24,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",24,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Finish encoding this stream, returning the underlying writer once the encoding is done.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",24,null],[11,"flush","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",24,null],[11,"drop","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","flate2::bufread","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",25,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",25,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying reader",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",25,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",25,null],[11,"write","","",25,null],[11,"flush","","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",26,{"inputs":[{"name":"r"}],"output":{"name":"zlibdecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",26,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",26,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",26,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",26,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",26,null],[11,"write","","",26,null],[11,"flush","","",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::read","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",27,{"inputs":[{"name":"r"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the input stream for another.",27,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",27,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",27,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",27,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that have been read into this compressor.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",27,null],[11,"write","","",27,null],[11,"flush","","",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",28,{"inputs":[{"name":"r"}],"output":{"name":"zlibdecoder"}}],[11,"new_with_buf","","Same as `new`, but the intermediate buffer for data is specified.",28,{"inputs":[{"name":"r"},{"generics":["u8"],"name":"vec"}],"output":{"name":"zlibdecoder"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the input stream for another.",28,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Acquires a reference to the underlying stream",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",28,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",28,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",28,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",28,null],[11,"write","","",28,null],[11,"flush","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","flate2::write","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new encoder which will write compressed data to the stream given at the given compression level.",29,{"inputs":[{"name":"w"},{"name":"compression"}],"output":{"name":"zlibencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",29,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",29,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this encoder entirely, swapping out the output stream for another.",29,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_finish","","Consumes this encoder, flushing the output stream.",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that have been written to this compresor.",29,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the compressor has produced.",29,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",29,null],[11,"flush","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",29,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will write uncompressed data to the stream.",30,{"inputs":[{"name":"w"}],"output":{"name":"zlibdecoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",30,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",30,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"reset","","Resets the state of this decoder entirely, swapping out the output stream for another.",30,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed for decompression.",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has written to its output stream.",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",30,null],[11,"flush","","",30,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",30,null]],"paths":[[4,"Status"],[4,"FlushCompress"],[4,"FlushDecompress"],[3,"Crc"],[3,"CrcReader"],[3,"GzHeader"],[3,"GzBuilder"],[3,"Compress"],[3,"Decompress"],[3,"DecompressError"],[3,"CompressError"],[3,"Compression"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"DeflateEncoder"],[3,"DeflateDecoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"GzEncoder"],[3,"GzDecoder"],[3,"MultiGzDecoder"],[3,"GzEncoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"],[3,"ZlibEncoder"],[3,"ZlibDecoder"]]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,{"inputs":[{"name":"u64"}],"output":{"name":"fnvhasher"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["gmp_mpfr_sys"] = {"doc":"Rust low-level bindings for GMP, MPFR and MPC","items":[[0,"gmp","gmp_mpfr_sys","Function and type bindings for the GMP library.",null,null],[3,"mpz_t","gmp_mpfr_sys::gmp","See: `mpz_t` and Integer Internals",null,null],[12,"alloc","","See: Integer Internals",0,null],[12,"size","","See: Integer Internals",0,null],[12,"d","","See: Integer Internals",0,null],[3,"mpq_t","","See: `mpq_t` and Rational Internals",null,null],[3,"mpf_t","","See: `mpf_t` and Float Internals",null,null],[12,"prec","","See: Float Internals",1,null],[12,"size","","See: Float Internals",1,null],[12,"exp","","See: Float Internals",1,null],[12,"d","","See: Float Internals",1,null],[3,"randstate_t","","See: `gmp_randstate_t`",null,null],[5,"mpz_set_q","","See: `mpz_set_q`",null,null],[5,"mpz_get_ui","","See: `mpz_get_ui`",null,null],[5,"mpz_neg","","See: `mpz_neg`",null,null],[5,"mpz_abs","","See: `mpz_abs`",null,null],[5,"mpz_mod_ui","","See: `mpz_mod_ui`",null,null],[5,"mpz_perfect_square_p","","See: `mpz_perfect_square_p`",null,null],[5,"mpz_legendre","","See: `mpz_legendre`",null,null],[5,"mpz_kronecker","","See: `mpz_kronecker`",null,null],[5,"mpz_sgn","","See: `mpz_sgn`",null,null],[5,"mpz_popcount","","See: `mpz_popcount`",null,null],[5,"mpz_fits_ulong_p","","See: `mpz_fits_ulong_p`",null,null],[5,"mpz_fits_uint_p","","See: `mpz_fits_uint_p`",null,null],[5,"mpz_fits_ushort_p","","See: `mpz_fits_ushort_p`",null,null],[5,"mpz_odd_p","","See: `mpz_odd_p`",null,null],[5,"mpz_even_p","","See: `mpz_even_p`",null,null],[5,"mpz_getlimbn","","See: `mpz_getlimbn`",null,null],[5,"mpz_size","","See: `mpz_size`",null,null],[5,"mpq_neg","","See: `mpq_neg`",null,null],[5,"mpq_abs","","See: `mpq_abs`",null,null],[5,"mpq_sgn","","See: `mpq_sgn`",null,null],[5,"mpq_numref","","See: `mpq_numref`",null,null],[5,"mpq_numref_const","","Constant version of `mpq_numref`.",null,null],[5,"mpq_denref","","See: `mpq_denref`",null,null],[5,"mpq_denref_const","","Constant version of `mpq_denref`.",null,null],[5,"mpf_sgn","","See: `mpf_sgn`",null,null],[5,"mpn_divmod_1","","See: `mpn_divmod_1`",null,null],[5,"mpn_divexact_by3","","See: `mpn_divexact_by3`",null,null],[7,"bits_per_limb","","See: `mp_bits_per_limb`",null,null],[7,"version","","See: `gmp_version`",null,null],[5,"mpz_init","","See: `mpz_init`",null,null],[5,"mpz_inits","","See: `mpz_inits`",null,null],[5,"mpz_init2","","See: `mpz_init2`",null,null],[5,"mpz_clear","","See: `mpz_clear`",null,null],[5,"mpz_clears","","See: `mpz_clears`",null,null],[5,"mpz_realloc2","","See: `mpz_realloc2`",null,null],[5,"mpz_set","","See: `mpz_set`",null,null],[5,"mpz_set_ui","","See: `mpz_set_ui`",null,null],[5,"mpz_set_si","","See: `mpz_set_si`",null,null],[5,"mpz_set_d","","See: `mpz_set_d`",null,null],[5,"mpz_set_f","","See: `mpz_set_f`",null,null],[5,"mpz_set_str","","See: `mpz_set_str`",null,null],[5,"mpz_swap","","See: `mpz_swap`",null,null],[5,"mpz_init_set","","See: `mpz_init_set`",null,null],[5,"mpz_init_set_ui","","See: `mpz_init_set_ui`",null,null],[5,"mpz_init_set_si","","See: `mpz_init_set_si`",null,null],[5,"mpz_init_set_d","","See: `mpz_init_set_d`",null,null],[5,"mpz_init_set_str","","See: `mpz_init_set_str`",null,null],[5,"mpz_get_si","","See: `mpz_get_si`",null,null],[5,"mpz_get_d","","See: `mpz_get_d`",null,null],[5,"mpz_get_d_2exp","","See: `mpz_get_d_2exp`",null,null],[5,"mpz_get_str","","See: `mpz_get_str`",null,null],[5,"mpz_add","","See: `mpz_add`",null,null],[5,"mpz_add_ui","","See: `mpz_add_ui`",null,null],[5,"mpz_sub","","See: `mpz_sub`",null,null],[5,"mpz_sub_ui","","See: `mpz_sub_ui`",null,null],[5,"mpz_ui_sub","","See: `mpz_ui_sub`",null,null],[5,"mpz_mul","","See: `mpz_mul`",null,null],[5,"mpz_mul_si","","See: `mpz_mul_si`",null,null],[5,"mpz_mul_ui","","See: `mpz_mul_ui`",null,null],[5,"mpz_addmul","","See: `mpz_addmul`",null,null],[5,"mpz_addmul_ui","","See: `mpz_addmul_ui`",null,null],[5,"mpz_submul","","See: `mpz_submul`",null,null],[5,"mpz_submul_ui","","See: `mpz_submul_ui`",null,null],[5,"mpz_mul_2exp","","See: `mpz_mul_2exp`",null,null],[5,"mpz_cdiv_q","","See: `mpz_cdiv_q`",null,null],[5,"mpz_cdiv_r","","See: `mpz_cdiv_r`",null,null],[5,"mpz_cdiv_qr","","See: `mpz_cdiv_qr`",null,null],[5,"mpz_cdiv_q_ui","","See: `mpz_cdiv_q_ui`",null,null],[5,"mpz_cdiv_r_ui","","See: `mpz_cdiv_r_ui`",null,null],[5,"mpz_cdiv_qr_ui","","See: `mpz_cdiv_qr_ui`",null,null],[5,"mpz_cdiv_ui","","See: `mpz_cdiv_ui`",null,null],[5,"mpz_cdiv_q_2exp","","See: `mpz_cdiv_q_2exp`",null,null],[5,"mpz_cdiv_r_2exp","","See: `mpz_cdiv_r_2exp`",null,null],[5,"mpz_fdiv_q","","See: `mpz_fdiv_q`",null,null],[5,"mpz_fdiv_r","","See: `mpz_fdiv_r`",null,null],[5,"mpz_fdiv_qr","","See: `mpz_fdiv_qr`",null,null],[5,"mpz_fdiv_q_ui","","See: `mpz_fdiv_q_ui`",null,null],[5,"mpz_fdiv_r_ui","","See: `mpz_fdiv_r_ui`",null,null],[5,"mpz_fdiv_qr_ui","","See: `mpz_fdiv_qr_ui`",null,null],[5,"mpz_fdiv_ui","","See: `mpz_fdiv_ui`",null,null],[5,"mpz_fdiv_q_2exp","","See: `mpz_fdiv_q_2exp`",null,null],[5,"mpz_fdiv_r_2exp","","See: `mpz_fdiv_r_2exp`",null,null],[5,"mpz_tdiv_q","","See: `mpz_tdiv_q`",null,null],[5,"mpz_tdiv_r","","See: `mpz_tdiv_r`",null,null],[5,"mpz_tdiv_qr","","See: `mpz_tdiv_qr`",null,null],[5,"mpz_tdiv_q_ui","","See: `mpz_tdiv_q_ui`",null,null],[5,"mpz_tdiv_r_ui","","See: `mpz_tdiv_r_ui`",null,null],[5,"mpz_tdiv_qr_ui","","See: `mpz_tdiv_qr_ui`",null,null],[5,"mpz_tdiv_ui","","See: `mpz_tdiv_ui`",null,null],[5,"mpz_tdiv_q_2exp","","See: `mpz_tdiv_q_2exp`",null,null],[5,"mpz_tdiv_r_2exp","","See: `mpz_tdiv_r_2exp`",null,null],[5,"mpz_mod","","See: `mpz_mod`",null,null],[5,"mpz_divexact","","See: `mpz_divexact`",null,null],[5,"mpz_divexact_ui","","See: `mpz_divexact_ui`",null,null],[5,"mpz_divisible_p","","See: `mpz_divisible_p`",null,null],[5,"mpz_divisible_ui_p","","See: `mpz_divisible_ui_p`",null,null],[5,"mpz_divisible_2exp_p","","See: `mpz_divisible_2exp_p`",null,null],[5,"mpz_congruent_p","","See: `mpz_congruent_p`",null,null],[5,"mpz_congruent_ui_p","","See: `mpz_congruent_ui_p`",null,null],[5,"mpz_congruent_2exp_p","","See: `mpz_congruent_2exp_p`",null,null],[5,"mpz_powm","","See: `mpz_powm`",null,null],[5,"mpz_powm_ui","","See: `mpz_powm_ui`",null,null],[5,"mpz_powm_sec","","See: `mpz_powm_sec`",null,null],[5,"mpz_pow_ui","","See: `mpz_pow_ui`",null,null],[5,"mpz_ui_pow_ui","","See: `mpz_ui_pow_ui`",null,null],[5,"mpz_root","","See: `mpz_root`",null,null],[5,"mpz_rootrem","","See: `mpz_rootrem`",null,null],[5,"mpz_sqrt","","See: `mpz_sqrt`",null,null],[5,"mpz_sqrtrem","","See: `mpz_sqrtrem`",null,null],[5,"mpz_perfect_power_p","","See: `mpz_perfect_power_p`",null,null],[5,"mpz_probab_prime_p","","See: `mpz_probab_prime_p`",null,null],[5,"mpz_nextprime","","See: `mpz_nextprime`",null,null],[5,"mpz_gcd","","See: `mpz_gcd`",null,null],[5,"mpz_gcd_ui","","See: `mpz_gcd_ui`",null,null],[5,"mpz_gcdext","","See: `mpz_gcdext`",null,null],[5,"mpz_lcm","","See: `mpz_lcm`",null,null],[5,"mpz_lcm_ui","","See: `mpz_lcm_ui`",null,null],[5,"mpz_invert","","See: `mpz_invert`",null,null],[5,"mpz_jacobi","","See: `mpz_jacobi`",null,null],[5,"mpz_kronecker_si","","See: `mpz_kronecker_si`",null,null],[5,"mpz_kronecker_ui","","See: `mpz_kronecker_ui`",null,null],[5,"mpz_si_kronecker","","See: `mpz_si_kronecker`",null,null],[5,"mpz_ui_kronecker","","See: `mpz_ui_kronecker`",null,null],[5,"mpz_remove","","See: `mpz_remove`",null,null],[5,"mpz_fac_ui","","See: `mpz_fac_ui`",null,null],[5,"mpz_2fac_ui","","See: `mpz_2fac_ui`",null,null],[5,"mpz_mfac_uiui","","See: `mpz_mfac_uiui`",null,null],[5,"mpz_primorial_ui","","See: `mpz_primorial_ui`",null,null],[5,"mpz_bin_ui","","See: `mpz_bin_ui`",null,null],[5,"mpz_bin_uiui","","See: `mpz_bin_uiui`",null,null],[5,"mpz_fib_ui","","See: `mpz_fib_ui`",null,null],[5,"mpz_fib2_ui","","See: `mpz_fib2_ui`",null,null],[5,"mpz_lucnum_ui","","See: `mpz_lucnum_ui`",null,null],[5,"mpz_lucnum2_ui","","See: `mpz_lucnum2_ui`",null,null],[5,"mpz_cmp","","See: `mpz_cmp`",null,null],[5,"mpz_cmp_d","","See: `mpz_cmp_d`",null,null],[5,"mpz_cmp_si","","See: `mpz_cmp_si`",null,null],[5,"mpz_cmp_ui","","See: `mpz_cmp_ui`",null,null],[5,"mpz_cmpabs","","See: `mpz_cmpabs`",null,null],[5,"mpz_cmpabs_d","","See: `mpz_cmpabs_d`",null,null],[5,"mpz_cmpabs_ui","","See: `mpz_cmpabs_ui`",null,null],[5,"mpz_and","","See: `mpz_and`",null,null],[5,"mpz_ior","","See: `mpz_ior`",null,null],[5,"mpz_xor","","See: `mpz_xor`",null,null],[5,"mpz_com","","See: `mpz_com`",null,null],[5,"mpz_hamdist","","See: `mpz_hamdist`",null,null],[5,"mpz_scan0","","See: `mpz_scan0`",null,null],[5,"mpz_scan1","","See: `mpz_scan1`",null,null],[5,"mpz_setbit","","See: `mpz_setbit`",null,null],[5,"mpz_clrbit","","See: `mpz_clrbit`",null,null],[5,"mpz_combit","","See: `mpz_combit`",null,null],[5,"mpz_tstbit","","See: `mpz_tstbit`",null,null],[5,"mpz_urandomb","","See: `mpz_urandomb`",null,null],[5,"mpz_urandomm","","See: `mpz_urandomm`",null,null],[5,"mpz_rrandomb","","See: `mpz_rrandomb`",null,null],[5,"mpz_random2","","See: `mpz_random2`",null,null],[5,"mpz_import","","See: `mpz_import`",null,null],[5,"mpz_export","","See: `mpz_export`",null,null],[5,"mpz_fits_slong_p","","See: `mpz_fits_slong_p`",null,null],[5,"mpz_fits_sint_p","","See: `mpz_fits_sint_p`",null,null],[5,"mpz_fits_sshort_p","","See: `mpz_fits_sshort_p`",null,null],[5,"mpz_sizeinbase","","See: `mpz_sizeinbase`",null,null],[5,"_mpz_realloc","","See: `_mpz_realloc`",null,null],[5,"mpz_limbs_read","","See: `mpz_limbs_read`",null,null],[5,"mpz_limbs_write","","See: `mpz_limbs_write`",null,null],[5,"mpz_limbs_modify","","See: `mpz_limbs_modify`",null,null],[5,"mpz_limbs_finish","","See: `mpz_limbs_finish`",null,null],[5,"mpz_roinit_n","","See: `mpz_roinit_n`",null,null],[5,"mpq_canonicalize","","See: `mpq_canonicalize`",null,null],[5,"mpq_init","","See: `mpq_init`",null,null],[5,"mpq_inits","","See: `mpq_inits`",null,null],[5,"mpq_clear","","See: `mpq_clear`",null,null],[5,"mpq_clears","","See: `mpq_clears`",null,null],[5,"mpq_set","","See: `mpq_set`",null,null],[5,"mpq_set_z","","See: `mpq_set_z`",null,null],[5,"mpq_set_ui","","See: `mpq_set_ui`",null,null],[5,"mpq_set_si","","See: `mpq_set_si`",null,null],[5,"mpq_set_str","","See: `mpq_set_str`",null,null],[5,"mpq_swap","","See: `mpq_swap`",null,null],[5,"mpq_get_d","","See: `mpq_get_d`",null,null],[5,"mpq_set_d","","See: `mpq_set_d`",null,null],[5,"mpq_set_f","","See: `mpq_set_f`",null,null],[5,"mpq_get_str","","See: `mpq_get_str`",null,null],[5,"mpq_add","","See: `mpq_add`",null,null],[5,"mpq_sub","","See: `mpq_sub`",null,null],[5,"mpq_mul","","See: `mpq_mul`",null,null],[5,"mpq_mul_2exp","","See: `mpq_mul_2exp`",null,null],[5,"mpq_div","","See: `mpq_div`",null,null],[5,"mpq_div_2exp","","See: `mpq_div_2exp`",null,null],[5,"mpq_inv","","See: `mpq_inv`",null,null],[5,"mpq_cmp","","See: `mpq_cmp`",null,null],[5,"mpq_cmp_z","","See: `mpq_cmp_z`",null,null],[5,"mpq_cmp_ui","","See: `mpq_cmp_ui`",null,null],[5,"mpq_cmp_si","","See: `mpq_cmp_si`",null,null],[5,"mpq_equal","","See: `mpq_equal`",null,null],[5,"mpq_get_num","","See: `mpq_get_num`",null,null],[5,"mpq_get_den","","See: `mpq_get_den`",null,null],[5,"mpq_set_den","","See: `mpq_set_den`",null,null],[5,"mpq_set_num","","See: `mpq_set_num`",null,null],[5,"mpf_set_default_prec","","See: `mpf_set_default_prec`",null,null],[5,"mpf_get_default_prec","","See: `mpf_get_default_prec`",null,null],[5,"mpf_init","","See: `mpf_init`",null,null],[5,"mpf_init2","","See: `mpf_init2`",null,null],[5,"mpf_inits","","See: `mpf_inits`",null,null],[5,"mpf_clear","","See: `mpf_clear`",null,null],[5,"mpf_clears","","See: `mpf_clears`",null,null],[5,"mpf_get_prec","","See: `mpf_get_prec`",null,null],[5,"mpf_set_prec","","See: `mpf_set_prec`",null,null],[5,"mpf_set_prec_raw","","See: `mpf_set_prec_raw`",null,null],[5,"mpf_set","","See: `mpf_set`",null,null],[5,"mpf_set_ui","","See: `mpf_set_ui`",null,null],[5,"mpf_set_si","","See: `mpf_set_si`",null,null],[5,"mpf_set_d","","See: `mpf_set_default_prec`",null,null],[5,"mpf_set_z","","See: `mpf_set_z`",null,null],[5,"mpf_set_q","","See: `mpf_set_q`",null,null],[5,"mpf_set_str","","See: `mpf_set_str`",null,null],[5,"mpf_swap","","See: `mpf_swap`",null,null],[5,"mpf_init_set","","See: `mpf_init_set`",null,null],[5,"mpf_init_set_ui","","See: `mpf_init_set_ui`",null,null],[5,"mpf_init_set_si","","See: `mpf_init_set_si`",null,null],[5,"mpf_init_set_d","","See: `mpf_init_set_d`",null,null],[5,"mpf_init_set_str","","See: `mpf_init_set_str`",null,null],[5,"mpf_get_d","","See: `mpf_get_d`",null,null],[5,"mpf_get_d_2exp","","See: `mpf_get_d_2exp`",null,null],[5,"mpf_get_si","","See: `mpf_get_si`",null,null],[5,"mpf_get_ui","","See: `mpf_get_ui`",null,null],[5,"mpf_get_str","","See: `mpf_get_str`",null,null],[5,"mpf_add","","See: `mpf_add`",null,null],[5,"mpf_add_ui","","See: `mpf_add_ui`",null,null],[5,"mpf_sub","","See: `mpf_sub`",null,null],[5,"mpf_ui_sub","","See: `mpf_ui_sub`",null,null],[5,"mpf_sub_ui","","See: `mpf_sub_ui`",null,null],[5,"mpf_mul","","See: `mpf_mul`",null,null],[5,"mpf_mul_ui","","See: `mpf_mul_ui`",null,null],[5,"mpf_div","","See: `mpf_div`",null,null],[5,"mpf_ui_div","","See: `mpf_ui_div`",null,null],[5,"mpf_div_ui","","See: `mpf_div_ui`",null,null],[5,"mpf_sqrt","","See: `mpf_sqrt`",null,null],[5,"mpf_sqrt_ui","","See: `mpf_sqrt_ui`",null,null],[5,"mpf_pow_ui","","See: `mpf_pow_ui`",null,null],[5,"mpf_neg","","See: `mpf_neg`",null,null],[5,"mpf_abs","","See: `mpf_abs`",null,null],[5,"mpf_mul_2exp","","See: `mpf_mul_2exp`",null,null],[5,"mpf_div_2exp","","See: `mpf_div_2exp`",null,null],[5,"mpf_cmp","","See: `mpn_cmp`",null,null],[5,"mpf_cmp_z","","See: `mpq_cmp_z`",null,null],[5,"mpf_cmp_d","","See: `mpf_cmp_d`",null,null],[5,"mpf_cmp_ui","","See: `mpf_cmp_ui`",null,null],[5,"mpf_cmp_si","","See: `mpf_cmp_si`",null,null],[5,"mpf_eq","","See: `mpf_eq`",null,null],[5,"mpf_reldiff","","See: `mpf_reldiff`",null,null],[5,"mpf_ceil","","See: `mpf_ceil`",null,null],[5,"mpf_floor","","See: `mpf_floor`",null,null],[5,"mpf_trunc","","See: `mpf_trunc`",null,null],[5,"mpf_integer_p","","See: `mpf_integer_p`",null,null],[5,"mpf_fits_ulong_p","","See: `mpf_fits_ulong_p`",null,null],[5,"mpf_fits_slong_p","","See: `mpf_fits_slong_p`",null,null],[5,"mpf_fits_uint_p","","See: `mpf_fits_uint_p`",null,null],[5,"mpf_fits_sint_p","","See: `mpf_fits_sint_p`",null,null],[5,"mpf_fits_ushort_p","","See: `mpf_fits_ushort_p`",null,null],[5,"mpf_fits_sshort_p","","See: `mpf_fits_sshort_p`",null,null],[5,"mpf_urandomb","","See: `mpf_urandomb`",null,null],[5,"mpf_random2","","See: `mpf_random2`",null,null],[5,"mpn_add_n","","See: `mpn_add_n`",null,null],[5,"mpn_add_1","","See: `mpn_add_1`",null,null],[5,"mpn_add","","See: `mpn_add`",null,null],[5,"mpn_sub_n","","See: `mpn_cnd_sub_n`",null,null],[5,"mpn_sub_1","","See: `mpn_sub_1`",null,null],[5,"mpn_sub","","See: `mpn_sub`",null,null],[5,"mpn_neg","","See: `mpn_neg`",null,null],[5,"mpn_mul_n","","See: `mpn_mul_n`",null,null],[5,"mpn_mul","","See: `mpn_mul`",null,null],[5,"mpn_sqr","","See: `mpn_sqr`",null,null],[5,"mpn_mul_1","","See: `mpn_mul_1`",null,null],[5,"mpn_addmul_1","","See: `mpn_addmul_1`",null,null],[5,"mpn_submul_1","","See: `mpn_submul_1`",null,null],[5,"mpn_tdiv_qr","","See: `mpn_tdiv_qr`",null,null],[5,"mpn_divrem_1","","See: `mpn_divrem_1`",null,null],[5,"mpn_divexact_1","","See: `mpn_divexact_1`",null,null],[5,"mpn_divexact_by3c","","See: `mpn_divexact_by3c`",null,null],[5,"mpn_mod_1","","See: `mpn_divmod_1`",null,null],[5,"mpn_lshift","","See: `mpn_lshift`",null,null],[5,"mpn_rshift","","See: `mpn_rshift`",null,null],[5,"mpn_cmp","","See: `mpn_cmp`",null,null],[5,"mpn_zero_p","","See: `mpn_zero_p`",null,null],[5,"mpn_gcd","","See: `mpn_gcd`",null,null],[5,"mpn_gcd_1","","See: `mpn_gcd_1`",null,null],[5,"mpn_gcdext","","See: `mpn_gcdext`",null,null],[5,"mpn_sqrtrem","","See: `mpn_sqrtrem`",null,null],[5,"mpn_sizeinbase","","See: `mpn_sizeinbase`",null,null],[5,"mpn_get_str","","See: `mpn_get_str`",null,null],[5,"mpn_set_str","","See: `mpn_set_str`",null,null],[5,"mpn_scan0","","See: `mpn_scan0`",null,null],[5,"mpn_scan1","","See: `mpn_scan1`",null,null],[5,"mpn_random","","See: `mpn_random`",null,null],[5,"mpn_random2","","See: `mpn_random2`",null,null],[5,"mpn_popcount","","See: `mpn_popcount`",null,null],[5,"mpn_hamdist","","See: `mpn_hamdist`",null,null],[5,"mpn_perfect_square_p","","See: `mpn_perfect_square_p`",null,null],[5,"mpn_and_n","","See: `mpn_and_n`",null,null],[5,"mpn_ior_n","","See: `mpn_ior_n`",null,null],[5,"mpn_xor_n","","See: `mpn_xor_n`",null,null],[5,"mpn_andn_n","","See: `mpn_andn_n`",null,null],[5,"mpn_iorn_n","","See: `mpn_iorn_n`",null,null],[5,"mpn_nand_n","","See: `mpn_nand_n`",null,null],[5,"mpn_nior_n","","See: `mpn_nior_n`",null,null],[5,"mpn_xnor_n","","See: `mpn_xnor_n`",null,null],[5,"mpn_com","","See: `mpn_com`",null,null],[5,"mpn_copyi","","See: `mpn_copyi`",null,null],[5,"mpn_copyd","","See: `mpn_copyd`",null,null],[5,"mpn_zero","","See: `mpn_zero`",null,null],[5,"mpn_cnd_add_n","","See: `mpn_cnd_add_n`",null,null],[5,"mpn_cnd_sub_n","","See: `mpn_cnd_sub_n`",null,null],[5,"mpn_sec_add_1","","See: `mpn_sec_add_1`",null,null],[5,"mpn_sec_add_1_itch","","See: `mpn_sec_add_1`",null,null],[5,"mpn_sec_sub_1","","See: `mpn_sec_sub_1`",null,null],[5,"mpn_sec_sub_1_itch","","See: `mpn_sec_sub_1`",null,null],[5,"mpn_cnd_swap","","See: `mpn_cnd_swap`",null,null],[5,"mpn_sec_mul","","See: `mpn_sec_mul`",null,null],[5,"mpn_sec_mul_itch","","See: `mpn_sec_mul_itch`",null,null],[5,"mpn_sec_sqr","","See: `mpn_sec_sqr`",null,null],[5,"mpn_sec_sqr_itch","","See: `mpn_sec_sqr_itch`",null,null],[5,"mpn_sec_powm","","See: `mpn_sec_powm`",null,null],[5,"mpn_sec_powm_itch","","See: `mpn_sec_powm_itch`",null,null],[5,"mpn_sec_tabselect","","See: `mpn_sec_tabselect`",null,null],[5,"mpn_sec_div_qr","","See: `mpn_sec_div_qr`",null,null],[5,"mpn_sec_div_qr_itch","","See: `mpn_sec_div_qr_itch`",null,null],[5,"mpn_sec_div_r","","See: `mpn_sec_div_r`",null,null],[5,"mpn_sec_div_r_itch","","See: `mpn_sec_div_r_itch`",null,null],[5,"mpn_sec_invert","","See: `mpn_sec_invert`",null,null],[5,"mpn_sec_invert_itch","","See: `mpn_sec_invert_itch`",null,null],[5,"randinit_default","","See: `gmp_randinit_default`",null,null],[5,"randinit_mt","","See: `gmp_randinit_mt`",null,null],[5,"randinit_lc_2exp","","See: `gmp_randinit_lc_2exp`",null,null],[5,"randinit_lc_2exp_size","","See: `gmp_randinit_lc_2exp_size`",null,null],[5,"randinit_set","","See: `gmp_randinit_set`",null,null],[5,"randclear","","See: `gmp_randclear`",null,null],[5,"randseed","","See: `gmp_randseed`",null,null],[5,"randseed_ui","","See: `gmp_randseed_ui`",null,null],[5,"urandomb_ui","","See: `gmp_urandomb_ui`",null,null],[5,"urandomm_ui","","See: `gmp_urandomm_ui`",null,null],[5,"printf","","See: `gmp_printf`",null,null],[5,"sprintf","","See: `gmp_sprintf`",null,null],[5,"snprintf","","See: `gmp_snprintf`",null,null],[5,"asprintf","","See: `gmp_asprintf`",null,null],[5,"scanf","","See: `gmp_scanf`",null,null],[5,"sscanf","","See: `gmp_sscanf`",null,null],[5,"set_memory_functions","","See: `mp_set_memory_functions`",null,null],[5,"get_memory_functions","","See: `mp_get_memory_functions`",null,null],[6,"exp_t","","See: `mp_exp_t`",null,null],[6,"limb_t","","See: `mp_limb_t`",null,null],[6,"size_t","","See: `mp_size_t`",null,null],[6,"bitcnt_t","","See: `mp_bitcnt_t`",null,null],[6,"allocate_function","","See: `allocate_function`",null,null],[6,"reallocate_function","","See: `reallocate_function`",null,null],[6,"free_function","","See: `free_function`",null,null],[17,"VERSION","","See: `__GNU_MP_VERSION`",null,null],[17,"VERSION_MINOR","","See: `__GNU_MP_VERSION_MINOR`",null,null],[17,"VERSION_PATCHLEVEL","","See: `__GNU_MP_VERSION_PATCHLEVEL`",null,null],[17,"CC","","See: `__GMP_CC`",null,null],[17,"CFLAGS","","See: `__GMP_CFLAGS`",null,null],[17,"NAIL_BITS","","See: `GMP_NAIL_BITS`",null,null],[17,"NUMB_BITS","","See: `GMP_NUMB_BITS`",null,null],[17,"LIMB_BITS","","See: `GMP_LIMB_BITS`",null,null],[17,"NAIL_MASK","","See: `GMP_NAIL_MASK`",null,null],[17,"NUMB_MASK","","See: `GMP_NUMB_MASK`",null,null],[17,"NUMB_MAX","","See: `GMP_NUMB_MAX`",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"mpz_t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"mpq_t"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"mpf_t"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"randstate_t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"mpz_t"],[3,"mpf_t"],[3,"mpq_t"],[3,"randstate_t"]]};
searchIndex["lapacke"] = {"doc":"Wrappers for [LAPACKE] (C).","items":[[4,"Error","lapacke","",null,null],[13,"None","","",0,null],[13,"WorkMemory","","",0,null],[13,"TransposeMemory","","",0,null],[4,"Layout","","",null,null],[13,"RowMajor","","",1,null],[13,"ColumnMajor","","",1,null],[5,"sbdsdc","","",null,null],[5,"dbdsdc","","",null,null],[5,"sbdsqr","","",null,null],[5,"dbdsqr","","",null,null],[5,"cbdsqr","","",null,null],[5,"zbdsqr","","",null,null],[5,"sbdsvdx","","",null,null],[5,"dbdsvdx","","",null,null],[5,"sdisna","","",null,null],[5,"ddisna","","",null,null],[5,"sgbbrd","","",null,null],[5,"dgbbrd","","",null,null],[5,"cgbbrd","","",null,null],[5,"zgbbrd","","",null,null],[5,"sgbcon","","",null,null],[5,"dgbcon","","",null,null],[5,"cgbcon","","",null,null],[5,"zgbcon","","",null,null],[5,"sgbequ","","",null,null],[5,"dgbequ","","",null,null],[5,"cgbequ","","",null,null],[5,"zgbequ","","",null,null],[5,"sgbequb","","",null,null],[5,"dgbequb","","",null,null],[5,"cgbequb","","",null,null],[5,"zgbequb","","",null,null],[5,"sgbrfs","","",null,null],[5,"dgbrfs","","",null,null],[5,"cgbrfs","","",null,null],[5,"zgbrfs","","",null,null],[5,"sgbrfsx","","",null,null],[5,"dgbrfsx","","",null,null],[5,"cgbrfsx","","",null,null],[5,"zgbrfsx","","",null,null],[5,"sgbsv","","",null,null],[5,"dgbsv","","",null,null],[5,"cgbsv","","",null,null],[5,"zgbsv","","",null,null],[5,"sgbsvx","","",null,null],[5,"dgbsvx","","",null,null],[5,"cgbsvx","","",null,null],[5,"zgbsvx","","",null,null],[5,"sgbsvxx","","",null,null],[5,"dgbsvxx","","",null,null],[5,"cgbsvxx","","",null,null],[5,"zgbsvxx","","",null,null],[5,"sgbtrf","","",null,null],[5,"dgbtrf","","",null,null],[5,"cgbtrf","","",null,null],[5,"zgbtrf","","",null,null],[5,"sgbtrs","","",null,null],[5,"dgbtrs","","",null,null],[5,"cgbtrs","","",null,null],[5,"zgbtrs","","",null,null],[5,"sgebak","","",null,null],[5,"dgebak","","",null,null],[5,"cgebak","","",null,null],[5,"zgebak","","",null,null],[5,"sgebal","","",null,null],[5,"dgebal","","",null,null],[5,"cgebal","","",null,null],[5,"zgebal","","",null,null],[5,"sgebrd","","",null,null],[5,"dgebrd","","",null,null],[5,"cgebrd","","",null,null],[5,"zgebrd","","",null,null],[5,"sgecon","","",null,null],[5,"dgecon","","",null,null],[5,"cgecon","","",null,null],[5,"zgecon","","",null,null],[5,"sgeequ","","",null,null],[5,"dgeequ","","",null,null],[5,"cgeequ","","",null,null],[5,"zgeequ","","",null,null],[5,"sgeequb","","",null,null],[5,"dgeequb","","",null,null],[5,"cgeequb","","",null,null],[5,"zgeequb","","",null,null],[5,"sgees","","",null,null],[5,"dgees","","",null,null],[5,"cgees","","",null,null],[5,"zgees","","",null,null],[5,"sgeesx","","",null,null],[5,"dgeesx","","",null,null],[5,"cgeesx","","",null,null],[5,"zgeesx","","",null,null],[5,"sgeev","","",null,null],[5,"dgeev","","",null,null],[5,"cgeev","","",null,null],[5,"zgeev","","",null,null],[5,"sgeevx","","",null,null],[5,"dgeevx","","",null,null],[5,"cgeevx","","",null,null],[5,"zgeevx","","",null,null],[5,"sgehrd","","",null,null],[5,"dgehrd","","",null,null],[5,"cgehrd","","",null,null],[5,"zgehrd","","",null,null],[5,"sgejsv","","",null,null],[5,"dgejsv","","",null,null],[5,"cgejsv","","",null,null],[5,"zgejsv","","",null,null],[5,"sgelq2","","",null,null],[5,"dgelq2","","",null,null],[5,"cgelq2","","",null,null],[5,"zgelq2","","",null,null],[5,"sgelqf","","",null,null],[5,"dgelqf","","",null,null],[5,"cgelqf","","",null,null],[5,"zgelqf","","",null,null],[5,"sgels","","",null,null],[5,"dgels","","",null,null],[5,"cgels","","",null,null],[5,"zgels","","",null,null],[5,"sgelsd","","",null,null],[5,"dgelsd","","",null,null],[5,"cgelsd","","",null,null],[5,"zgelsd","","",null,null],[5,"sgelss","","",null,null],[5,"dgelss","","",null,null],[5,"cgelss","","",null,null],[5,"zgelss","","",null,null],[5,"sgelsy","","",null,null],[5,"dgelsy","","",null,null],[5,"cgelsy","","",null,null],[5,"zgelsy","","",null,null],[5,"sgeqlf","","",null,null],[5,"dgeqlf","","",null,null],[5,"cgeqlf","","",null,null],[5,"zgeqlf","","",null,null],[5,"sgeqp3","","",null,null],[5,"dgeqp3","","",null,null],[5,"cgeqp3","","",null,null],[5,"zgeqp3","","",null,null],[5,"sgeqpf","","",null,null],[5,"dgeqpf","","",null,null],[5,"cgeqpf","","",null,null],[5,"zgeqpf","","",null,null],[5,"sgeqr2","","",null,null],[5,"dgeqr2","","",null,null],[5,"cgeqr2","","",null,null],[5,"zgeqr2","","",null,null],[5,"sgeqrf","","",null,null],[5,"dgeqrf","","",null,null],[5,"cgeqrf","","",null,null],[5,"zgeqrf","","",null,null],[5,"sgeqrfp","","",null,null],[5,"dgeqrfp","","",null,null],[5,"cgeqrfp","","",null,null],[5,"zgeqrfp","","",null,null],[5,"sgerfs","","",null,null],[5,"dgerfs","","",null,null],[5,"cgerfs","","",null,null],[5,"zgerfs","","",null,null],[5,"sgerfsx","","",null,null],[5,"dgerfsx","","",null,null],[5,"cgerfsx","","",null,null],[5,"zgerfsx","","",null,null],[5,"sgerqf","","",null,null],[5,"dgerqf","","",null,null],[5,"cgerqf","","",null,null],[5,"zgerqf","","",null,null],[5,"sgesdd","","",null,null],[5,"dgesdd","","",null,null],[5,"cgesdd","","",null,null],[5,"zgesdd","","",null,null],[5,"sgesv","","",null,null],[5,"dgesv","","",null,null],[5,"cgesv","","",null,null],[5,"zgesv","","",null,null],[5,"dsgesv","","",null,null],[5,"zcgesv","","",null,null],[5,"sgesvd","","",null,null],[5,"dgesvd","","",null,null],[5,"cgesvd","","",null,null],[5,"zgesvd","","",null,null],[5,"sgesvdx","","",null,null],[5,"dgesvdx","","",null,null],[5,"cgesvdx","","",null,null],[5,"zgesvdx","","",null,null],[5,"sgesvj","","",null,null],[5,"dgesvj","","",null,null],[5,"cgesvj","","",null,null],[5,"zgesvj","","",null,null],[5,"sgesvx","","",null,null],[5,"dgesvx","","",null,null],[5,"cgesvx","","",null,null],[5,"zgesvx","","",null,null],[5,"sgesvxx","","",null,null],[5,"dgesvxx","","",null,null],[5,"cgesvxx","","",null,null],[5,"zgesvxx","","",null,null],[5,"sgetf2","","",null,null],[5,"dgetf2","","",null,null],[5,"cgetf2","","",null,null],[5,"zgetf2","","",null,null],[5,"sgetrf","","",null,null],[5,"dgetrf","","",null,null],[5,"cgetrf","","",null,null],[5,"zgetrf","","",null,null],[5,"sgetrf2","","",null,null],[5,"dgetrf2","","",null,null],[5,"cgetrf2","","",null,null],[5,"zgetrf2","","",null,null],[5,"sgetri","","",null,null],[5,"dgetri","","",null,null],[5,"cgetri","","",null,null],[5,"zgetri","","",null,null],[5,"sgetrs","","",null,null],[5,"dgetrs","","",null,null],[5,"cgetrs","","",null,null],[5,"zgetrs","","",null,null],[5,"sggbak","","",null,null],[5,"dggbak","","",null,null],[5,"cggbak","","",null,null],[5,"zggbak","","",null,null],[5,"sggbal","","",null,null],[5,"dggbal","","",null,null],[5,"cggbal","","",null,null],[5,"zggbal","","",null,null],[5,"sgges","","",null,null],[5,"dgges","","",null,null],[5,"cgges","","",null,null],[5,"zgges","","",null,null],[5,"sgges3","","",null,null],[5,"dgges3","","",null,null],[5,"cgges3","","",null,null],[5,"zgges3","","",null,null],[5,"sggesx","","",null,null],[5,"dggesx","","",null,null],[5,"cggesx","","",null,null],[5,"zggesx","","",null,null],[5,"sggev","","",null,null],[5,"dggev","","",null,null],[5,"cggev","","",null,null],[5,"zggev","","",null,null],[5,"sggev3","","",null,null],[5,"dggev3","","",null,null],[5,"cggev3","","",null,null],[5,"zggev3","","",null,null],[5,"sggevx","","",null,null],[5,"dggevx","","",null,null],[5,"cggevx","","",null,null],[5,"zggevx","","",null,null],[5,"sggglm","","",null,null],[5,"dggglm","","",null,null],[5,"cggglm","","",null,null],[5,"zggglm","","",null,null],[5,"sgghrd","","",null,null],[5,"dgghrd","","",null,null],[5,"cgghrd","","",null,null],[5,"zgghrd","","",null,null],[5,"sgghd3","","",null,null],[5,"dgghd3","","",null,null],[5,"cgghd3","","",null,null],[5,"zgghd3","","",null,null],[5,"sgglse","","",null,null],[5,"dgglse","","",null,null],[5,"cgglse","","",null,null],[5,"zgglse","","",null,null],[5,"sggqrf","","",null,null],[5,"dggqrf","","",null,null],[5,"cggqrf","","",null,null],[5,"zggqrf","","",null,null],[5,"sggrqf","","",null,null],[5,"dggrqf","","",null,null],[5,"cggrqf","","",null,null],[5,"zggrqf","","",null,null],[5,"sggsvd","","",null,null],[5,"dggsvd","","",null,null],[5,"cggsvd","","",null,null],[5,"zggsvd","","",null,null],[5,"sggsvd3","","",null,null],[5,"dggsvd3","","",null,null],[5,"cggsvd3","","",null,null],[5,"zggsvd3","","",null,null],[5,"sggsvp","","",null,null],[5,"dggsvp","","",null,null],[5,"cggsvp","","",null,null],[5,"zggsvp","","",null,null],[5,"sggsvp3","","",null,null],[5,"dggsvp3","","",null,null],[5,"cggsvp3","","",null,null],[5,"zggsvp3","","",null,null],[5,"sgtcon","","",null,null],[5,"dgtcon","","",null,null],[5,"cgtcon","","",null,null],[5,"zgtcon","","",null,null],[5,"sgtrfs","","",null,null],[5,"dgtrfs","","",null,null],[5,"cgtrfs","","",null,null],[5,"zgtrfs","","",null,null],[5,"sgtsv","","",null,null],[5,"dgtsv","","",null,null],[5,"cgtsv","","",null,null],[5,"zgtsv","","",null,null],[5,"sgtsvx","","",null,null],[5,"dgtsvx","","",null,null],[5,"cgtsvx","","",null,null],[5,"zgtsvx","","",null,null],[5,"sgttrf","","",null,null],[5,"dgttrf","","",null,null],[5,"cgttrf","","",null,null],[5,"zgttrf","","",null,null],[5,"sgttrs","","",null,null],[5,"dgttrs","","",null,null],[5,"cgttrs","","",null,null],[5,"zgttrs","","",null,null],[5,"chbev","","",null,null],[5,"zhbev","","",null,null],[5,"chbevd","","",null,null],[5,"zhbevd","","",null,null],[5,"chbevx","","",null,null],[5,"zhbevx","","",null,null],[5,"chbgst","","",null,null],[5,"zhbgst","","",null,null],[5,"chbgv","","",null,null],[5,"zhbgv","","",null,null],[5,"chbgvd","","",null,null],[5,"zhbgvd","","",null,null],[5,"chbgvx","","",null,null],[5,"zhbgvx","","",null,null],[5,"chbtrd","","",null,null],[5,"zhbtrd","","",null,null],[5,"checon","","",null,null],[5,"zhecon","","",null,null],[5,"cheequb","","",null,null],[5,"zheequb","","",null,null],[5,"cheev","","",null,null],[5,"zheev","","",null,null],[5,"cheevd","","",null,null],[5,"zheevd","","",null,null],[5,"cheevr","","",null,null],[5,"zheevr","","",null,null],[5,"cheevx","","",null,null],[5,"zheevx","","",null,null],[5,"chegst","","",null,null],[5,"zhegst","","",null,null],[5,"chegv","","",null,null],[5,"zhegv","","",null,null],[5,"chegvd","","",null,null],[5,"zhegvd","","",null,null],[5,"chegvx","","",null,null],[5,"zhegvx","","",null,null],[5,"cherfs","","",null,null],[5,"zherfs","","",null,null],[5,"cherfsx","","",null,null],[5,"zherfsx","","",null,null],[5,"chesv","","",null,null],[5,"zhesv","","",null,null],[5,"chesvx","","",null,null],[5,"zhesvx","","",null,null],[5,"chesvxx","","",null,null],[5,"zhesvxx","","",null,null],[5,"chetrd","","",null,null],[5,"zhetrd","","",null,null],[5,"chetrf","","",null,null],[5,"zhetrf","","",null,null],[5,"chetri","","",null,null],[5,"zhetri","","",null,null],[5,"chetrs","","",null,null],[5,"zhetrs","","",null,null],[5,"chfrk","","",null,null],[5,"zhfrk","","",null,null],[5,"shgeqz","","",null,null],[5,"dhgeqz","","",null,null],[5,"chgeqz","","",null,null],[5,"zhgeqz","","",null,null],[5,"chpcon","","",null,null],[5,"zhpcon","","",null,null],[5,"chpev","","",null,null],[5,"zhpev","","",null,null],[5,"chpevd","","",null,null],[5,"zhpevd","","",null,null],[5,"chpevx","","",null,null],[5,"zhpevx","","",null,null],[5,"chpgst","","",null,null],[5,"zhpgst","","",null,null],[5,"chpgv","","",null,null],[5,"zhpgv","","",null,null],[5,"chpgvd","","",null,null],[5,"zhpgvd","","",null,null],[5,"chpgvx","","",null,null],[5,"zhpgvx","","",null,null],[5,"chprfs","","",null,null],[5,"zhprfs","","",null,null],[5,"chpsv","","",null,null],[5,"zhpsv","","",null,null],[5,"chpsvx","","",null,null],[5,"zhpsvx","","",null,null],[5,"chptrd","","",null,null],[5,"zhptrd","","",null,null],[5,"chptrf","","",null,null],[5,"zhptrf","","",null,null],[5,"chptri","","",null,null],[5,"zhptri","","",null,null],[5,"chptrs","","",null,null],[5,"zhptrs","","",null,null],[5,"shsein","","",null,null],[5,"dhsein","","",null,null],[5,"chsein","","",null,null],[5,"zhsein","","",null,null],[5,"shseqr","","",null,null],[5,"dhseqr","","",null,null],[5,"chseqr","","",null,null],[5,"zhseqr","","",null,null],[5,"clacgv","","",null,null],[5,"zlacgv","","",null,null],[5,"slacn2","","",null,null],[5,"dlacn2","","",null,null],[5,"clacn2","","",null,null],[5,"zlacn2","","",null,null],[5,"slacpy","","",null,null],[5,"dlacpy","","",null,null],[5,"clacpy","","",null,null],[5,"zlacpy","","",null,null],[5,"clacp2","","",null,null],[5,"zlacp2","","",null,null],[5,"zlag2c","","",null,null],[5,"slag2d","","",null,null],[5,"dlag2s","","",null,null],[5,"clag2z","","",null,null],[5,"slagge","","",null,null],[5,"dlagge","","",null,null],[5,"clagge","","",null,null],[5,"zlagge","","",null,null],[5,"slamch","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"f32"}}],[5,"dlamch","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"f64"}}],[5,"slange","","",null,null],[5,"dlange","","",null,null],[5,"clange","","",null,null],[5,"zlange","","",null,null],[5,"clanhe","","",null,null],[5,"zlanhe","","",null,null],[5,"slansy","","",null,null],[5,"dlansy","","",null,null],[5,"clansy","","",null,null],[5,"zlansy","","",null,null],[5,"slantr","","",null,null],[5,"dlantr","","",null,null],[5,"clantr","","",null,null],[5,"zlantr","","",null,null],[5,"slarfb","","",null,null],[5,"dlarfb","","",null,null],[5,"clarfb","","",null,null],[5,"zlarfb","","",null,null],[5,"slarfg","","",null,null],[5,"dlarfg","","",null,null],[5,"clarfg","","",null,null],[5,"zlarfg","","",null,null],[5,"slarft","","",null,null],[5,"dlarft","","",null,null],[5,"clarft","","",null,null],[5,"zlarft","","",null,null],[5,"slarfx","","",null,null],[5,"dlarfx","","",null,null],[5,"clarfx","","",null,null],[5,"zlarfx","","",null,null],[5,"slarnv","","",null,null],[5,"dlarnv","","",null,null],[5,"clarnv","","",null,null],[5,"zlarnv","","",null,null],[5,"slascl","","",null,null],[5,"dlascl","","",null,null],[5,"clascl","","",null,null],[5,"zlascl","","",null,null],[5,"slaset","","",null,null],[5,"dlaset","","",null,null],[5,"claset","","",null,null],[5,"zlaset","","",null,null],[5,"slasrt","","",null,null],[5,"dlasrt","","",null,null],[5,"slaswp","","",null,null],[5,"dlaswp","","",null,null],[5,"claswp","","",null,null],[5,"zlaswp","","",null,null],[5,"slatms","","",null,null],[5,"dlatms","","",null,null],[5,"clatms","","",null,null],[5,"zlatms","","",null,null],[5,"slauum","","",null,null],[5,"dlauum","","",null,null],[5,"clauum","","",null,null],[5,"zlauum","","",null,null],[5,"sopgtr","","",null,null],[5,"dopgtr","","",null,null],[5,"sopmtr","","",null,null],[5,"dopmtr","","",null,null],[5,"sorgbr","","",null,null],[5,"dorgbr","","",null,null],[5,"sorghr","","",null,null],[5,"dorghr","","",null,null],[5,"sorglq","","",null,null],[5,"dorglq","","",null,null],[5,"sorgql","","",null,null],[5,"dorgql","","",null,null],[5,"sorgqr","","",null,null],[5,"dorgqr","","",null,null],[5,"sorgrq","","",null,null],[5,"dorgrq","","",null,null],[5,"sorgtr","","",null,null],[5,"dorgtr","","",null,null],[5,"sormbr","","",null,null],[5,"dormbr","","",null,null],[5,"sormhr","","",null,null],[5,"dormhr","","",null,null],[5,"sormlq","","",null,null],[5,"dormlq","","",null,null],[5,"sormql","","",null,null],[5,"dormql","","",null,null],[5,"sormqr","","",null,null],[5,"dormqr","","",null,null],[5,"sormrq","","",null,null],[5,"dormrq","","",null,null],[5,"sormrz","","",null,null],[5,"dormrz","","",null,null],[5,"sormtr","","",null,null],[5,"dormtr","","",null,null],[5,"spbcon","","",null,null],[5,"dpbcon","","",null,null],[5,"cpbcon","","",null,null],[5,"zpbcon","","",null,null],[5,"spbequ","","",null,null],[5,"dpbequ","","",null,null],[5,"cpbequ","","",null,null],[5,"zpbequ","","",null,null],[5,"spbrfs","","",null,null],[5,"dpbrfs","","",null,null],[5,"cpbrfs","","",null,null],[5,"zpbrfs","","",null,null],[5,"spbstf","","",null,null],[5,"dpbstf","","",null,null],[5,"cpbstf","","",null,null],[5,"zpbstf","","",null,null],[5,"spbsv","","",null,null],[5,"dpbsv","","",null,null],[5,"cpbsv","","",null,null],[5,"zpbsv","","",null,null],[5,"spbsvx","","",null,null],[5,"dpbsvx","","",null,null],[5,"cpbsvx","","",null,null],[5,"zpbsvx","","",null,null],[5,"spbtrf","","",null,null],[5,"dpbtrf","","",null,null],[5,"cpbtrf","","",null,null],[5,"zpbtrf","","",null,null],[5,"spbtrs","","",null,null],[5,"dpbtrs","","",null,null],[5,"cpbtrs","","",null,null],[5,"zpbtrs","","",null,null],[5,"spftrf","","",null,null],[5,"dpftrf","","",null,null],[5,"cpftrf","","",null,null],[5,"zpftrf","","",null,null],[5,"spftri","","",null,null],[5,"dpftri","","",null,null],[5,"cpftri","","",null,null],[5,"zpftri","","",null,null],[5,"spftrs","","",null,null],[5,"dpftrs","","",null,null],[5,"cpftrs","","",null,null],[5,"zpftrs","","",null,null],[5,"spocon","","",null,null],[5,"dpocon","","",null,null],[5,"cpocon","","",null,null],[5,"zpocon","","",null,null],[5,"spoequ","","",null,null],[5,"dpoequ","","",null,null],[5,"cpoequ","","",null,null],[5,"zpoequ","","",null,null],[5,"spoequb","","",null,null],[5,"dpoequb","","",null,null],[5,"cpoequb","","",null,null],[5,"zpoequb","","",null,null],[5,"sporfs","","",null,null],[5,"dporfs","","",null,null],[5,"cporfs","","",null,null],[5,"zporfs","","",null,null],[5,"sporfsx","","",null,null],[5,"dporfsx","","",null,null],[5,"cporfsx","","",null,null],[5,"zporfsx","","",null,null],[5,"sposv","","",null,null],[5,"dposv","","",null,null],[5,"cposv","","",null,null],[5,"zposv","","",null,null],[5,"dsposv","","",null,null],[5,"zcposv","","",null,null],[5,"sposvx","","",null,null],[5,"dposvx","","",null,null],[5,"cposvx","","",null,null],[5,"zposvx","","",null,null],[5,"sposvxx","","",null,null],[5,"dposvxx","","",null,null],[5,"cposvxx","","",null,null],[5,"zposvxx","","",null,null],[5,"spotrf2","","",null,null],[5,"dpotrf2","","",null,null],[5,"cpotrf2","","",null,null],[5,"zpotrf2","","",null,null],[5,"spotrf","","",null,null],[5,"dpotrf","","",null,null],[5,"cpotrf","","",null,null],[5,"zpotrf","","",null,null],[5,"spotri","","",null,null],[5,"dpotri","","",null,null],[5,"cpotri","","",null,null],[5,"zpotri","","",null,null],[5,"spotrs","","",null,null],[5,"dpotrs","","",null,null],[5,"cpotrs","","",null,null],[5,"zpotrs","","",null,null],[5,"sppcon","","",null,null],[5,"dppcon","","",null,null],[5,"cppcon","","",null,null],[5,"zppcon","","",null,null],[5,"sppequ","","",null,null],[5,"dppequ","","",null,null],[5,"cppequ","","",null,null],[5,"zppequ","","",null,null],[5,"spprfs","","",null,null],[5,"dpprfs","","",null,null],[5,"cpprfs","","",null,null],[5,"zpprfs","","",null,null],[5,"sppsv","","",null,null],[5,"dppsv","","",null,null],[5,"cppsv","","",null,null],[5,"zppsv","","",null,null],[5,"sppsvx","","",null,null],[5,"dppsvx","","",null,null],[5,"cppsvx","","",null,null],[5,"zppsvx","","",null,null],[5,"spptrf","","",null,null],[5,"dpptrf","","",null,null],[5,"cpptrf","","",null,null],[5,"zpptrf","","",null,null],[5,"spptri","","",null,null],[5,"dpptri","","",null,null],[5,"cpptri","","",null,null],[5,"zpptri","","",null,null],[5,"spptrs","","",null,null],[5,"dpptrs","","",null,null],[5,"cpptrs","","",null,null],[5,"zpptrs","","",null,null],[5,"spstrf","","",null,null],[5,"dpstrf","","",null,null],[5,"cpstrf","","",null,null],[5,"zpstrf","","",null,null],[5,"sptcon","","",null,null],[5,"dptcon","","",null,null],[5,"cptcon","","",null,null],[5,"zptcon","","",null,null],[5,"spteqr","","",null,null],[5,"dpteqr","","",null,null],[5,"cpteqr","","",null,null],[5,"zpteqr","","",null,null],[5,"sptrfs","","",null,null],[5,"dptrfs","","",null,null],[5,"cptrfs","","",null,null],[5,"zptrfs","","",null,null],[5,"sptsv","","",null,null],[5,"dptsv","","",null,null],[5,"cptsv","","",null,null],[5,"zptsv","","",null,null],[5,"sptsvx","","",null,null],[5,"dptsvx","","",null,null],[5,"cptsvx","","",null,null],[5,"zptsvx","","",null,null],[5,"spttrf","","",null,null],[5,"dpttrf","","",null,null],[5,"cpttrf","","",null,null],[5,"zpttrf","","",null,null],[5,"spttrs","","",null,null],[5,"dpttrs","","",null,null],[5,"cpttrs","","",null,null],[5,"zpttrs","","",null,null],[5,"ssbev","","",null,null],[5,"dsbev","","",null,null],[5,"ssbevd","","",null,null],[5,"dsbevd","","",null,null],[5,"ssbevx","","",null,null],[5,"dsbevx","","",null,null],[5,"ssbgst","","",null,null],[5,"dsbgst","","",null,null],[5,"ssbgv","","",null,null],[5,"dsbgv","","",null,null],[5,"ssbgvd","","",null,null],[5,"dsbgvd","","",null,null],[5,"ssbgvx","","",null,null],[5,"dsbgvx","","",null,null],[5,"ssbtrd","","",null,null],[5,"dsbtrd","","",null,null],[5,"ssfrk","","",null,null],[5,"dsfrk","","",null,null],[5,"sspcon","","",null,null],[5,"dspcon","","",null,null],[5,"cspcon","","",null,null],[5,"zspcon","","",null,null],[5,"sspev","","",null,null],[5,"dspev","","",null,null],[5,"sspevd","","",null,null],[5,"dspevd","","",null,null],[5,"sspevx","","",null,null],[5,"dspevx","","",null,null],[5,"sspgst","","",null,null],[5,"dspgst","","",null,null],[5,"sspgv","","",null,null],[5,"dspgv","","",null,null],[5,"sspgvd","","",null,null],[5,"dspgvd","","",null,null],[5,"sspgvx","","",null,null],[5,"dspgvx","","",null,null],[5,"ssprfs","","",null,null],[5,"dsprfs","","",null,null],[5,"csprfs","","",null,null],[5,"zsprfs","","",null,null],[5,"sspsv","","",null,null],[5,"dspsv","","",null,null],[5,"cspsv","","",null,null],[5,"zspsv","","",null,null],[5,"sspsvx","","",null,null],[5,"dspsvx","","",null,null],[5,"cspsvx","","",null,null],[5,"zspsvx","","",null,null],[5,"ssptrd","","",null,null],[5,"dsptrd","","",null,null],[5,"ssptrf","","",null,null],[5,"dsptrf","","",null,null],[5,"csptrf","","",null,null],[5,"zsptrf","","",null,null],[5,"ssptri","","",null,null],[5,"dsptri","","",null,null],[5,"csptri","","",null,null],[5,"zsptri","","",null,null],[5,"ssptrs","","",null,null],[5,"dsptrs","","",null,null],[5,"csptrs","","",null,null],[5,"zsptrs","","",null,null],[5,"sstebz","","",null,null],[5,"dstebz","","",null,null],[5,"sstedc","","",null,null],[5,"dstedc","","",null,null],[5,"cstedc","","",null,null],[5,"zstedc","","",null,null],[5,"sstegr","","",null,null],[5,"dstegr","","",null,null],[5,"cstegr","","",null,null],[5,"zstegr","","",null,null],[5,"sstein","","",null,null],[5,"dstein","","",null,null],[5,"cstein","","",null,null],[5,"zstein","","",null,null],[5,"sstemr","","",null,null],[5,"dstemr","","",null,null],[5,"cstemr","","",null,null],[5,"zstemr","","",null,null],[5,"ssteqr","","",null,null],[5,"dsteqr","","",null,null],[5,"csteqr","","",null,null],[5,"zsteqr","","",null,null],[5,"ssterf","","",null,null],[5,"dsterf","","",null,null],[5,"sstev","","",null,null],[5,"dstev","","",null,null],[5,"sstevd","","",null,null],[5,"dstevd","","",null,null],[5,"sstevr","","",null,null],[5,"dstevr","","",null,null],[5,"sstevx","","",null,null],[5,"dstevx","","",null,null],[5,"ssycon","","",null,null],[5,"dsycon","","",null,null],[5,"csycon","","",null,null],[5,"zsycon","","",null,null],[5,"ssyequb","","",null,null],[5,"dsyequb","","",null,null],[5,"csyequb","","",null,null],[5,"zsyequb","","",null,null],[5,"ssyev","","",null,null],[5,"dsyev","","",null,null],[5,"ssyevd","","",null,null],[5,"dsyevd","","",null,null],[5,"ssyevr","","",null,null],[5,"dsyevr","","",null,null],[5,"ssyevx","","",null,null],[5,"dsyevx","","",null,null],[5,"ssygst","","",null,null],[5,"dsygst","","",null,null],[5,"ssygv","","",null,null],[5,"dsygv","","",null,null],[5,"ssygvd","","",null,null],[5,"dsygvd","","",null,null],[5,"ssygvx","","",null,null],[5,"dsygvx","","",null,null],[5,"ssyrfs","","",null,null],[5,"dsyrfs","","",null,null],[5,"csyrfs","","",null,null],[5,"zsyrfs","","",null,null],[5,"ssyrfsx","","",null,null],[5,"dsyrfsx","","",null,null],[5,"csyrfsx","","",null,null],[5,"zsyrfsx","","",null,null],[5,"ssysv","","",null,null],[5,"dsysv","","",null,null],[5,"csysv","","",null,null],[5,"zsysv","","",null,null],[5,"ssysvx","","",null,null],[5,"dsysvx","","",null,null],[5,"csysvx","","",null,null],[5,"zsysvx","","",null,null],[5,"ssysvxx","","",null,null],[5,"dsysvxx","","",null,null],[5,"csysvxx","","",null,null],[5,"zsysvxx","","",null,null],[5,"ssytrd","","",null,null],[5,"dsytrd","","",null,null],[5,"ssytrf","","",null,null],[5,"dsytrf","","",null,null],[5,"csytrf","","",null,null],[5,"zsytrf","","",null,null],[5,"ssytri","","",null,null],[5,"dsytri","","",null,null],[5,"csytri","","",null,null],[5,"zsytri","","",null,null],[5,"ssytrs","","",null,null],[5,"dsytrs","","",null,null],[5,"csytrs","","",null,null],[5,"zsytrs","","",null,null],[5,"stbcon","","",null,null],[5,"dtbcon","","",null,null],[5,"ctbcon","","",null,null],[5,"ztbcon","","",null,null],[5,"stbrfs","","",null,null],[5,"dtbrfs","","",null,null],[5,"ctbrfs","","",null,null],[5,"ztbrfs","","",null,null],[5,"stbtrs","","",null,null],[5,"dtbtrs","","",null,null],[5,"ctbtrs","","",null,null],[5,"ztbtrs","","",null,null],[5,"stfsm","","",null,null],[5,"dtfsm","","",null,null],[5,"ctfsm","","",null,null],[5,"ztfsm","","",null,null],[5,"stftri","","",null,null],[5,"dtftri","","",null,null],[5,"ctftri","","",null,null],[5,"ztftri","","",null,null],[5,"stfttp","","",null,null],[5,"dtfttp","","",null,null],[5,"ctfttp","","",null,null],[5,"ztfttp","","",null,null],[5,"stfttr","","",null,null],[5,"dtfttr","","",null,null],[5,"ctfttr","","",null,null],[5,"ztfttr","","",null,null],[5,"stgevc","","",null,null],[5,"dtgevc","","",null,null],[5,"ctgevc","","",null,null],[5,"ztgevc","","",null,null],[5,"stgexc","","",null,null],[5,"dtgexc","","",null,null],[5,"ctgexc","","",null,null],[5,"ztgexc","","",null,null],[5,"stgsen","","",null,null],[5,"dtgsen","","",null,null],[5,"ctgsen","","",null,null],[5,"ztgsen","","",null,null],[5,"stgsja","","",null,null],[5,"dtgsja","","",null,null],[5,"ctgsja","","",null,null],[5,"ztgsja","","",null,null],[5,"stgsna","","",null,null],[5,"dtgsna","","",null,null],[5,"ctgsna","","",null,null],[5,"ztgsna","","",null,null],[5,"stgsyl","","",null,null],[5,"dtgsyl","","",null,null],[5,"ctgsyl","","",null,null],[5,"ztgsyl","","",null,null],[5,"stpcon","","",null,null],[5,"dtpcon","","",null,null],[5,"ctpcon","","",null,null],[5,"ztpcon","","",null,null],[5,"stprfs","","",null,null],[5,"dtprfs","","",null,null],[5,"ctprfs","","",null,null],[5,"ztprfs","","",null,null],[5,"stptri","","",null,null],[5,"dtptri","","",null,null],[5,"ctptri","","",null,null],[5,"ztptri","","",null,null],[5,"stptrs","","",null,null],[5,"dtptrs","","",null,null],[5,"ctptrs","","",null,null],[5,"ztptrs","","",null,null],[5,"stpttf","","",null,null],[5,"dtpttf","","",null,null],[5,"ctpttf","","",null,null],[5,"ztpttf","","",null,null],[5,"stpttr","","",null,null],[5,"dtpttr","","",null,null],[5,"ctpttr","","",null,null],[5,"ztpttr","","",null,null],[5,"strcon","","",null,null],[5,"dtrcon","","",null,null],[5,"ctrcon","","",null,null],[5,"ztrcon","","",null,null],[5,"strevc","","",null,null],[5,"dtrevc","","",null,null],[5,"ctrevc","","",null,null],[5,"ztrevc","","",null,null],[5,"strexc","","",null,null],[5,"dtrexc","","",null,null],[5,"ctrexc","","",null,null],[5,"ztrexc","","",null,null],[5,"strrfs","","",null,null],[5,"dtrrfs","","",null,null],[5,"ctrrfs","","",null,null],[5,"ztrrfs","","",null,null],[5,"strsen","","",null,null],[5,"dtrsen","","",null,null],[5,"ctrsen","","",null,null],[5,"ztrsen","","",null,null],[5,"strsna","","",null,null],[5,"dtrsna","","",null,null],[5,"ctrsna","","",null,null],[5,"ztrsna","","",null,null],[5,"strsyl","","",null,null],[5,"dtrsyl","","",null,null],[5,"ctrsyl","","",null,null],[5,"ztrsyl","","",null,null],[5,"strtri","","",null,null],[5,"dtrtri","","",null,null],[5,"ctrtri","","",null,null],[5,"ztrtri","","",null,null],[5,"strtrs","","",null,null],[5,"dtrtrs","","",null,null],[5,"ctrtrs","","",null,null],[5,"ztrtrs","","",null,null],[5,"strttf","","",null,null],[5,"dtrttf","","",null,null],[5,"ctrttf","","",null,null],[5,"ztrttf","","",null,null],[5,"strttp","","",null,null],[5,"dtrttp","","",null,null],[5,"ctrttp","","",null,null],[5,"ztrttp","","",null,null],[5,"stzrzf","","",null,null],[5,"dtzrzf","","",null,null],[5,"ctzrzf","","",null,null],[5,"ztzrzf","","",null,null],[5,"cungbr","","",null,null],[5,"zungbr","","",null,null],[5,"cunghr","","",null,null],[5,"zunghr","","",null,null],[5,"cunglq","","",null,null],[5,"zunglq","","",null,null],[5,"cungql","","",null,null],[5,"zungql","","",null,null],[5,"cungqr","","",null,null],[5,"zungqr","","",null,null],[5,"cungrq","","",null,null],[5,"zungrq","","",null,null],[5,"cungtr","","",null,null],[5,"zungtr","","",null,null],[5,"cunmbr","","",null,null],[5,"zunmbr","","",null,null],[5,"cunmhr","","",null,null],[5,"zunmhr","","",null,null],[5,"cunmlq","","",null,null],[5,"zunmlq","","",null,null],[5,"cunmql","","",null,null],[5,"zunmql","","",null,null],[5,"cunmqr","","",null,null],[5,"zunmqr","","",null,null],[5,"cunmrq","","",null,null],[5,"zunmrq","","",null,null],[5,"cunmrz","","",null,null],[5,"zunmrz","","",null,null],[5,"cunmtr","","",null,null],[5,"zunmtr","","",null,null],[5,"cupgtr","","",null,null],[5,"zupgtr","","",null,null],[5,"cupmtr","","",null,null],[5,"zupmtr","","",null,null],[5,"sbdsdc_work","","",null,null],[5,"dbdsdc_work","","",null,null],[5,"sbdsvdx_work","","",null,null],[5,"dbdsvdx_work","","",null,null],[5,"sbdsqr_work","","",null,null],[5,"dbdsqr_work","","",null,null],[5,"cbdsqr_work","","",null,null],[5,"zbdsqr_work","","",null,null],[5,"sdisna_work","","",null,null],[5,"ddisna_work","","",null,null],[5,"sgbbrd_work","","",null,null],[5,"dgbbrd_work","","",null,null],[5,"cgbbrd_work","","",null,null],[5,"zgbbrd_work","","",null,null],[5,"sgbcon_work","","",null,null],[5,"dgbcon_work","","",null,null],[5,"cgbcon_work","","",null,null],[5,"zgbcon_work","","",null,null],[5,"sgbequ_work","","",null,null],[5,"dgbequ_work","","",null,null],[5,"cgbequ_work","","",null,null],[5,"zgbequ_work","","",null,null],[5,"sgbequb_work","","",null,null],[5,"dgbequb_work","","",null,null],[5,"cgbequb_work","","",null,null],[5,"zgbequb_work","","",null,null],[5,"sgbrfs_work","","",null,null],[5,"dgbrfs_work","","",null,null],[5,"cgbrfs_work","","",null,null],[5,"zgbrfs_work","","",null,null],[5,"sgbrfsx_work","","",null,null],[5,"dgbrfsx_work","","",null,null],[5,"cgbrfsx_work","","",null,null],[5,"zgbrfsx_work","","",null,null],[5,"sgbsv_work","","",null,null],[5,"dgbsv_work","","",null,null],[5,"cgbsv_work","","",null,null],[5,"zgbsv_work","","",null,null],[5,"sgbsvx_work","","",null,null],[5,"dgbsvx_work","","",null,null],[5,"cgbsvx_work","","",null,null],[5,"zgbsvx_work","","",null,null],[5,"sgbsvxx_work","","",null,null],[5,"dgbsvxx_work","","",null,null],[5,"cgbsvxx_work","","",null,null],[5,"zgbsvxx_work","","",null,null],[5,"sgbtrf_work","","",null,null],[5,"dgbtrf_work","","",null,null],[5,"cgbtrf_work","","",null,null],[5,"zgbtrf_work","","",null,null],[5,"sgbtrs_work","","",null,null],[5,"dgbtrs_work","","",null,null],[5,"cgbtrs_work","","",null,null],[5,"zgbtrs_work","","",null,null],[5,"sgebak_work","","",null,null],[5,"dgebak_work","","",null,null],[5,"cgebak_work","","",null,null],[5,"zgebak_work","","",null,null],[5,"sgebal_work","","",null,null],[5,"dgebal_work","","",null,null],[5,"cgebal_work","","",null,null],[5,"zgebal_work","","",null,null],[5,"sgebrd_work","","",null,null],[5,"dgebrd_work","","",null,null],[5,"cgebrd_work","","",null,null],[5,"zgebrd_work","","",null,null],[5,"sgecon_work","","",null,null],[5,"dgecon_work","","",null,null],[5,"cgecon_work","","",null,null],[5,"zgecon_work","","",null,null],[5,"sgeequ_work","","",null,null],[5,"dgeequ_work","","",null,null],[5,"cgeequ_work","","",null,null],[5,"zgeequ_work","","",null,null],[5,"sgeequb_work","","",null,null],[5,"dgeequb_work","","",null,null],[5,"cgeequb_work","","",null,null],[5,"zgeequb_work","","",null,null],[5,"sgees_work","","",null,null],[5,"dgees_work","","",null,null],[5,"cgees_work","","",null,null],[5,"zgees_work","","",null,null],[5,"sgeesx_work","","",null,null],[5,"dgeesx_work","","",null,null],[5,"cgeesx_work","","",null,null],[5,"zgeesx_work","","",null,null],[5,"sgeev_work","","",null,null],[5,"dgeev_work","","",null,null],[5,"cgeev_work","","",null,null],[5,"zgeev_work","","",null,null],[5,"sgeevx_work","","",null,null],[5,"dgeevx_work","","",null,null],[5,"cgeevx_work","","",null,null],[5,"zgeevx_work","","",null,null],[5,"sgehrd_work","","",null,null],[5,"dgehrd_work","","",null,null],[5,"cgehrd_work","","",null,null],[5,"zgehrd_work","","",null,null],[5,"sgejsv_work","","",null,null],[5,"dgejsv_work","","",null,null],[5,"cgejsv_work","","",null,null],[5,"zgejsv_work","","",null,null],[5,"sgelq2_work","","",null,null],[5,"dgelq2_work","","",null,null],[5,"cgelq2_work","","",null,null],[5,"zgelq2_work","","",null,null],[5,"sgelqf_work","","",null,null],[5,"dgelqf_work","","",null,null],[5,"cgelqf_work","","",null,null],[5,"zgelqf_work","","",null,null],[5,"sgels_work","","",null,null],[5,"dgels_work","","",null,null],[5,"cgels_work","","",null,null],[5,"zgels_work","","",null,null],[5,"sgelsd_work","","",null,null],[5,"dgelsd_work","","",null,null],[5,"cgelsd_work","","",null,null],[5,"zgelsd_work","","",null,null],[5,"sgelss_work","","",null,null],[5,"dgelss_work","","",null,null],[5,"cgelss_work","","",null,null],[5,"zgelss_work","","",null,null],[5,"sgelsy_work","","",null,null],[5,"dgelsy_work","","",null,null],[5,"cgelsy_work","","",null,null],[5,"zgelsy_work","","",null,null],[5,"sgeqlf_work","","",null,null],[5,"dgeqlf_work","","",null,null],[5,"cgeqlf_work","","",null,null],[5,"zgeqlf_work","","",null,null],[5,"sgeqp3_work","","",null,null],[5,"dgeqp3_work","","",null,null],[5,"cgeqp3_work","","",null,null],[5,"zgeqp3_work","","",null,null],[5,"sgeqpf_work","","",null,null],[5,"dgeqpf_work","","",null,null],[5,"cgeqpf_work","","",null,null],[5,"zgeqpf_work","","",null,null],[5,"sgeqr2_work","","",null,null],[5,"dgeqr2_work","","",null,null],[5,"cgeqr2_work","","",null,null],[5,"zgeqr2_work","","",null,null],[5,"sgeqrf_work","","",null,null],[5,"dgeqrf_work","","",null,null],[5,"cgeqrf_work","","",null,null],[5,"zgeqrf_work","","",null,null],[5,"sgeqrfp_work","","",null,null],[5,"dgeqrfp_work","","",null,null],[5,"cgeqrfp_work","","",null,null],[5,"zgeqrfp_work","","",null,null],[5,"sgerfs_work","","",null,null],[5,"dgerfs_work","","",null,null],[5,"cgerfs_work","","",null,null],[5,"zgerfs_work","","",null,null],[5,"sgerfsx_work","","",null,null],[5,"dgerfsx_work","","",null,null],[5,"cgerfsx_work","","",null,null],[5,"zgerfsx_work","","",null,null],[5,"sgerqf_work","","",null,null],[5,"dgerqf_work","","",null,null],[5,"cgerqf_work","","",null,null],[5,"zgerqf_work","","",null,null],[5,"sgesdd_work","","",null,null],[5,"dgesdd_work","","",null,null],[5,"cgesdd_work","","",null,null],[5,"zgesdd_work","","",null,null],[5,"sgesv_work","","",null,null],[5,"dgesv_work","","",null,null],[5,"cgesv_work","","",null,null],[5,"zgesv_work","","",null,null],[5,"dsgesv_work","","",null,null],[5,"zcgesv_work","","",null,null],[5,"sgesvd_work","","",null,null],[5,"dgesvd_work","","",null,null],[5,"cgesvd_work","","",null,null],[5,"zgesvd_work","","",null,null],[5,"sgesvdx_work","","",null,null],[5,"dgesvdx_work","","",null,null],[5,"cgesvdx_work","","",null,null],[5,"zgesvdx_work","","",null,null],[5,"sgesvj_work","","",null,null],[5,"dgesvj_work","","",null,null],[5,"cgesvj_work","","",null,null],[5,"zgesvj_work","","",null,null],[5,"sgesvx_work","","",null,null],[5,"dgesvx_work","","",null,null],[5,"cgesvx_work","","",null,null],[5,"zgesvx_work","","",null,null],[5,"sgesvxx_work","","",null,null],[5,"dgesvxx_work","","",null,null],[5,"cgesvxx_work","","",null,null],[5,"zgesvxx_work","","",null,null],[5,"sgetf2_work","","",null,null],[5,"dgetf2_work","","",null,null],[5,"cgetf2_work","","",null,null],[5,"zgetf2_work","","",null,null],[5,"sgetrf_work","","",null,null],[5,"dgetrf_work","","",null,null],[5,"cgetrf_work","","",null,null],[5,"zgetrf_work","","",null,null],[5,"sgetrf2_work","","",null,null],[5,"dgetrf2_work","","",null,null],[5,"cgetrf2_work","","",null,null],[5,"zgetrf2_work","","",null,null],[5,"sgetri_work","","",null,null],[5,"dgetri_work","","",null,null],[5,"cgetri_work","","",null,null],[5,"zgetri_work","","",null,null],[5,"sgetrs_work","","",null,null],[5,"dgetrs_work","","",null,null],[5,"cgetrs_work","","",null,null],[5,"zgetrs_work","","",null,null],[5,"sggbak_work","","",null,null],[5,"dggbak_work","","",null,null],[5,"cggbak_work","","",null,null],[5,"zggbak_work","","",null,null],[5,"sggbal_work","","",null,null],[5,"dggbal_work","","",null,null],[5,"cggbal_work","","",null,null],[5,"zggbal_work","","",null,null],[5,"sgges_work","","",null,null],[5,"dgges_work","","",null,null],[5,"cgges_work","","",null,null],[5,"zgges_work","","",null,null],[5,"sgges3_work","","",null,null],[5,"dgges3_work","","",null,null],[5,"cgges3_work","","",null,null],[5,"zgges3_work","","",null,null],[5,"sggesx_work","","",null,null],[5,"dggesx_work","","",null,null],[5,"cggesx_work","","",null,null],[5,"zggesx_work","","",null,null],[5,"sggev_work","","",null,null],[5,"dggev_work","","",null,null],[5,"cggev_work","","",null,null],[5,"zggev_work","","",null,null],[5,"sggev3_work","","",null,null],[5,"dggev3_work","","",null,null],[5,"cggev3_work","","",null,null],[5,"zggev3_work","","",null,null],[5,"sggevx_work","","",null,null],[5,"dggevx_work","","",null,null],[5,"cggevx_work","","",null,null],[5,"zggevx_work","","",null,null],[5,"sggglm_work","","",null,null],[5,"dggglm_work","","",null,null],[5,"cggglm_work","","",null,null],[5,"zggglm_work","","",null,null],[5,"sgghrd_work","","",null,null],[5,"dgghrd_work","","",null,null],[5,"cgghrd_work","","",null,null],[5,"zgghrd_work","","",null,null],[5,"sgghd3_work","","",null,null],[5,"dgghd3_work","","",null,null],[5,"cgghd3_work","","",null,null],[5,"zgghd3_work","","",null,null],[5,"sgglse_work","","",null,null],[5,"dgglse_work","","",null,null],[5,"cgglse_work","","",null,null],[5,"zgglse_work","","",null,null],[5,"sggqrf_work","","",null,null],[5,"dggqrf_work","","",null,null],[5,"cggqrf_work","","",null,null],[5,"zggqrf_work","","",null,null],[5,"sggrqf_work","","",null,null],[5,"dggrqf_work","","",null,null],[5,"cggrqf_work","","",null,null],[5,"zggrqf_work","","",null,null],[5,"sggsvd_work","","",null,null],[5,"dggsvd_work","","",null,null],[5,"cggsvd_work","","",null,null],[5,"zggsvd_work","","",null,null],[5,"sggsvd3_work","","",null,null],[5,"dggsvd3_work","","",null,null],[5,"cggsvd3_work","","",null,null],[5,"zggsvd3_work","","",null,null],[5,"sggsvp_work","","",null,null],[5,"dggsvp_work","","",null,null],[5,"cggsvp_work","","",null,null],[5,"zggsvp_work","","",null,null],[5,"sggsvp3_work","","",null,null],[5,"dggsvp3_work","","",null,null],[5,"cggsvp3_work","","",null,null],[5,"zggsvp3_work","","",null,null],[5,"sgtcon_work","","",null,null],[5,"dgtcon_work","","",null,null],[5,"cgtcon_work","","",null,null],[5,"zgtcon_work","","",null,null],[5,"sgtrfs_work","","",null,null],[5,"dgtrfs_work","","",null,null],[5,"cgtrfs_work","","",null,null],[5,"zgtrfs_work","","",null,null],[5,"sgtsv_work","","",null,null],[5,"dgtsv_work","","",null,null],[5,"cgtsv_work","","",null,null],[5,"zgtsv_work","","",null,null],[5,"sgtsvx_work","","",null,null],[5,"dgtsvx_work","","",null,null],[5,"cgtsvx_work","","",null,null],[5,"zgtsvx_work","","",null,null],[5,"sgttrf_work","","",null,null],[5,"dgttrf_work","","",null,null],[5,"cgttrf_work","","",null,null],[5,"zgttrf_work","","",null,null],[5,"sgttrs_work","","",null,null],[5,"dgttrs_work","","",null,null],[5,"cgttrs_work","","",null,null],[5,"zgttrs_work","","",null,null],[5,"chbev_work","","",null,null],[5,"zhbev_work","","",null,null],[5,"chbevd_work","","",null,null],[5,"zhbevd_work","","",null,null],[5,"chbevx_work","","",null,null],[5,"zhbevx_work","","",null,null],[5,"chbgst_work","","",null,null],[5,"zhbgst_work","","",null,null],[5,"chbgv_work","","",null,null],[5,"zhbgv_work","","",null,null],[5,"chbgvd_work","","",null,null],[5,"zhbgvd_work","","",null,null],[5,"chbgvx_work","","",null,null],[5,"zhbgvx_work","","",null,null],[5,"chbtrd_work","","",null,null],[5,"zhbtrd_work","","",null,null],[5,"checon_work","","",null,null],[5,"zhecon_work","","",null,null],[5,"cheequb_work","","",null,null],[5,"zheequb_work","","",null,null],[5,"cheev_work","","",null,null],[5,"zheev_work","","",null,null],[5,"cheevd_work","","",null,null],[5,"zheevd_work","","",null,null],[5,"cheevr_work","","",null,null],[5,"zheevr_work","","",null,null],[5,"cheevx_work","","",null,null],[5,"zheevx_work","","",null,null],[5,"chegst_work","","",null,null],[5,"zhegst_work","","",null,null],[5,"chegv_work","","",null,null],[5,"zhegv_work","","",null,null],[5,"chegvd_work","","",null,null],[5,"zhegvd_work","","",null,null],[5,"chegvx_work","","",null,null],[5,"zhegvx_work","","",null,null],[5,"cherfs_work","","",null,null],[5,"zherfs_work","","",null,null],[5,"cherfsx_work","","",null,null],[5,"zherfsx_work","","",null,null],[5,"chesv_work","","",null,null],[5,"zhesv_work","","",null,null],[5,"chesvx_work","","",null,null],[5,"zhesvx_work","","",null,null],[5,"chesvxx_work","","",null,null],[5,"zhesvxx_work","","",null,null],[5,"chetrd_work","","",null,null],[5,"zhetrd_work","","",null,null],[5,"chetrf_work","","",null,null],[5,"zhetrf_work","","",null,null],[5,"chetri_work","","",null,null],[5,"zhetri_work","","",null,null],[5,"chetrs_work","","",null,null],[5,"zhetrs_work","","",null,null],[5,"chfrk_work","","",null,null],[5,"zhfrk_work","","",null,null],[5,"shgeqz_work","","",null,null],[5,"dhgeqz_work","","",null,null],[5,"chgeqz_work","","",null,null],[5,"zhgeqz_work","","",null,null],[5,"chpcon_work","","",null,null],[5,"zhpcon_work","","",null,null],[5,"chpev_work","","",null,null],[5,"zhpev_work","","",null,null],[5,"chpevd_work","","",null,null],[5,"zhpevd_work","","",null,null],[5,"chpevx_work","","",null,null],[5,"zhpevx_work","","",null,null],[5,"chpgst_work","","",null,null],[5,"zhpgst_work","","",null,null],[5,"chpgv_work","","",null,null],[5,"zhpgv_work","","",null,null],[5,"chpgvd_work","","",null,null],[5,"zhpgvd_work","","",null,null],[5,"chpgvx_work","","",null,null],[5,"zhpgvx_work","","",null,null],[5,"chprfs_work","","",null,null],[5,"zhprfs_work","","",null,null],[5,"chpsv_work","","",null,null],[5,"zhpsv_work","","",null,null],[5,"chpsvx_work","","",null,null],[5,"zhpsvx_work","","",null,null],[5,"chptrd_work","","",null,null],[5,"zhptrd_work","","",null,null],[5,"chptrf_work","","",null,null],[5,"zhptrf_work","","",null,null],[5,"chptri_work","","",null,null],[5,"zhptri_work","","",null,null],[5,"chptrs_work","","",null,null],[5,"zhptrs_work","","",null,null],[5,"shsein_work","","",null,null],[5,"dhsein_work","","",null,null],[5,"chsein_work","","",null,null],[5,"zhsein_work","","",null,null],[5,"shseqr_work","","",null,null],[5,"dhseqr_work","","",null,null],[5,"chseqr_work","","",null,null],[5,"zhseqr_work","","",null,null],[5,"clacgv_work","","",null,null],[5,"zlacgv_work","","",null,null],[5,"slacn2_work","","",null,null],[5,"dlacn2_work","","",null,null],[5,"clacn2_work","","",null,null],[5,"zlacn2_work","","",null,null],[5,"slacpy_work","","",null,null],[5,"dlacpy_work","","",null,null],[5,"clacpy_work","","",null,null],[5,"zlacpy_work","","",null,null],[5,"clacp2_work","","",null,null],[5,"zlacp2_work","","",null,null],[5,"zlag2c_work","","",null,null],[5,"slag2d_work","","",null,null],[5,"dlag2s_work","","",null,null],[5,"clag2z_work","","",null,null],[5,"slagge_work","","",null,null],[5,"dlagge_work","","",null,null],[5,"clagge_work","","",null,null],[5,"zlagge_work","","",null,null],[5,"claghe_work","","",null,null],[5,"zlaghe_work","","",null,null],[5,"slagsy_work","","",null,null],[5,"dlagsy_work","","",null,null],[5,"clagsy_work","","",null,null],[5,"zlagsy_work","","",null,null],[5,"slapmr_work","","",null,null],[5,"dlapmr_work","","",null,null],[5,"clapmr_work","","",null,null],[5,"zlapmr_work","","",null,null],[5,"slapmt_work","","",null,null],[5,"dlapmt_work","","",null,null],[5,"clapmt_work","","",null,null],[5,"zlapmt_work","","",null,null],[5,"slartgp_work","","",null,null],[5,"dlartgp_work","","",null,null],[5,"slartgs_work","","",null,null],[5,"dlartgs_work","","",null,null],[5,"slapy2_work","","",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"dlapy2_work","","",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"slapy3_work","","",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"dlapy3_work","","",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"slamch_work","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"f32"}}],[5,"dlamch_work","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"f64"}}],[5,"slange_work","","",null,null],[5,"dlange_work","","",null,null],[5,"clange_work","","",null,null],[5,"zlange_work","","",null,null],[5,"clanhe_work","","",null,null],[5,"zlanhe_work","","",null,null],[5,"slansy_work","","",null,null],[5,"dlansy_work","","",null,null],[5,"clansy_work","","",null,null],[5,"zlansy_work","","",null,null],[5,"slantr_work","","",null,null],[5,"dlantr_work","","",null,null],[5,"clantr_work","","",null,null],[5,"zlantr_work","","",null,null],[5,"slarfb_work","","",null,null],[5,"dlarfb_work","","",null,null],[5,"clarfb_work","","",null,null],[5,"zlarfb_work","","",null,null],[5,"slarfg_work","","",null,null],[5,"dlarfg_work","","",null,null],[5,"clarfg_work","","",null,null],[5,"zlarfg_work","","",null,null],[5,"slarft_work","","",null,null],[5,"dlarft_work","","",null,null],[5,"clarft_work","","",null,null],[5,"zlarft_work","","",null,null],[5,"slarfx_work","","",null,null],[5,"dlarfx_work","","",null,null],[5,"clarfx_work","","",null,null],[5,"zlarfx_work","","",null,null],[5,"slarnv_work","","",null,null],[5,"dlarnv_work","","",null,null],[5,"clarnv_work","","",null,null],[5,"zlarnv_work","","",null,null],[5,"slascl_work","","",null,null],[5,"dlascl_work","","",null,null],[5,"clascl_work","","",null,null],[5,"zlascl_work","","",null,null],[5,"slaset_work","","",null,null],[5,"dlaset_work","","",null,null],[5,"claset_work","","",null,null],[5,"zlaset_work","","",null,null],[5,"slasrt_work","","",null,null],[5,"dlasrt_work","","",null,null],[5,"slaswp_work","","",null,null],[5,"dlaswp_work","","",null,null],[5,"claswp_work","","",null,null],[5,"zlaswp_work","","",null,null],[5,"slatms_work","","",null,null],[5,"dlatms_work","","",null,null],[5,"clatms_work","","",null,null],[5,"zlatms_work","","",null,null],[5,"slauum_work","","",null,null],[5,"dlauum_work","","",null,null],[5,"clauum_work","","",null,null],[5,"zlauum_work","","",null,null],[5,"sopgtr_work","","",null,null],[5,"dopgtr_work","","",null,null],[5,"sopmtr_work","","",null,null],[5,"dopmtr_work","","",null,null],[5,"sorgbr_work","","",null,null],[5,"dorgbr_work","","",null,null],[5,"sorghr_work","","",null,null],[5,"dorghr_work","","",null,null],[5,"sorglq_work","","",null,null],[5,"dorglq_work","","",null,null],[5,"sorgql_work","","",null,null],[5,"dorgql_work","","",null,null],[5,"sorgqr_work","","",null,null],[5,"dorgqr_work","","",null,null],[5,"sorgrq_work","","",null,null],[5,"dorgrq_work","","",null,null],[5,"sorgtr_work","","",null,null],[5,"dorgtr_work","","",null,null],[5,"sormbr_work","","",null,null],[5,"dormbr_work","","",null,null],[5,"sormhr_work","","",null,null],[5,"dormhr_work","","",null,null],[5,"sormlq_work","","",null,null],[5,"dormlq_work","","",null,null],[5,"sormql_work","","",null,null],[5,"dormql_work","","",null,null],[5,"sormqr_work","","",null,null],[5,"dormqr_work","","",null,null],[5,"sormrq_work","","",null,null],[5,"dormrq_work","","",null,null],[5,"sormrz_work","","",null,null],[5,"dormrz_work","","",null,null],[5,"sormtr_work","","",null,null],[5,"dormtr_work","","",null,null],[5,"spbcon_work","","",null,null],[5,"dpbcon_work","","",null,null],[5,"cpbcon_work","","",null,null],[5,"zpbcon_work","","",null,null],[5,"spbequ_work","","",null,null],[5,"dpbequ_work","","",null,null],[5,"cpbequ_work","","",null,null],[5,"zpbequ_work","","",null,null],[5,"spbrfs_work","","",null,null],[5,"dpbrfs_work","","",null,null],[5,"cpbrfs_work","","",null,null],[5,"zpbrfs_work","","",null,null],[5,"spbstf_work","","",null,null],[5,"dpbstf_work","","",null,null],[5,"cpbstf_work","","",null,null],[5,"zpbstf_work","","",null,null],[5,"spbsv_work","","",null,null],[5,"dpbsv_work","","",null,null],[5,"cpbsv_work","","",null,null],[5,"zpbsv_work","","",null,null],[5,"spbsvx_work","","",null,null],[5,"dpbsvx_work","","",null,null],[5,"cpbsvx_work","","",null,null],[5,"zpbsvx_work","","",null,null],[5,"spbtrf_work","","",null,null],[5,"dpbtrf_work","","",null,null],[5,"cpbtrf_work","","",null,null],[5,"zpbtrf_work","","",null,null],[5,"spbtrs_work","","",null,null],[5,"dpbtrs_work","","",null,null],[5,"cpbtrs_work","","",null,null],[5,"zpbtrs_work","","",null,null],[5,"spftrf_work","","",null,null],[5,"dpftrf_work","","",null,null],[5,"cpftrf_work","","",null,null],[5,"zpftrf_work","","",null,null],[5,"spftri_work","","",null,null],[5,"dpftri_work","","",null,null],[5,"cpftri_work","","",null,null],[5,"zpftri_work","","",null,null],[5,"spftrs_work","","",null,null],[5,"dpftrs_work","","",null,null],[5,"cpftrs_work","","",null,null],[5,"zpftrs_work","","",null,null],[5,"spocon_work","","",null,null],[5,"dpocon_work","","",null,null],[5,"cpocon_work","","",null,null],[5,"zpocon_work","","",null,null],[5,"spoequ_work","","",null,null],[5,"dpoequ_work","","",null,null],[5,"cpoequ_work","","",null,null],[5,"zpoequ_work","","",null,null],[5,"spoequb_work","","",null,null],[5,"dpoequb_work","","",null,null],[5,"cpoequb_work","","",null,null],[5,"zpoequb_work","","",null,null],[5,"sporfs_work","","",null,null],[5,"dporfs_work","","",null,null],[5,"cporfs_work","","",null,null],[5,"zporfs_work","","",null,null],[5,"sporfsx_work","","",null,null],[5,"dporfsx_work","","",null,null],[5,"cporfsx_work","","",null,null],[5,"zporfsx_work","","",null,null],[5,"sposv_work","","",null,null],[5,"dposv_work","","",null,null],[5,"cposv_work","","",null,null],[5,"zposv_work","","",null,null],[5,"dsposv_work","","",null,null],[5,"zcposv_work","","",null,null],[5,"sposvx_work","","",null,null],[5,"dposvx_work","","",null,null],[5,"cposvx_work","","",null,null],[5,"zposvx_work","","",null,null],[5,"sposvxx_work","","",null,null],[5,"dposvxx_work","","",null,null],[5,"cposvxx_work","","",null,null],[5,"zposvxx_work","","",null,null],[5,"spotrf2_work","","",null,null],[5,"dpotrf2_work","","",null,null],[5,"cpotrf2_work","","",null,null],[5,"zpotrf2_work","","",null,null],[5,"spotrf_work","","",null,null],[5,"dpotrf_work","","",null,null],[5,"cpotrf_work","","",null,null],[5,"zpotrf_work","","",null,null],[5,"spotri_work","","",null,null],[5,"dpotri_work","","",null,null],[5,"cpotri_work","","",null,null],[5,"zpotri_work","","",null,null],[5,"spotrs_work","","",null,null],[5,"dpotrs_work","","",null,null],[5,"cpotrs_work","","",null,null],[5,"zpotrs_work","","",null,null],[5,"sppcon_work","","",null,null],[5,"dppcon_work","","",null,null],[5,"cppcon_work","","",null,null],[5,"zppcon_work","","",null,null],[5,"sppequ_work","","",null,null],[5,"dppequ_work","","",null,null],[5,"cppequ_work","","",null,null],[5,"zppequ_work","","",null,null],[5,"spprfs_work","","",null,null],[5,"dpprfs_work","","",null,null],[5,"cpprfs_work","","",null,null],[5,"zpprfs_work","","",null,null],[5,"sppsv_work","","",null,null],[5,"dppsv_work","","",null,null],[5,"cppsv_work","","",null,null],[5,"zppsv_work","","",null,null],[5,"sppsvx_work","","",null,null],[5,"dppsvx_work","","",null,null],[5,"cppsvx_work","","",null,null],[5,"zppsvx_work","","",null,null],[5,"spptrf_work","","",null,null],[5,"dpptrf_work","","",null,null],[5,"cpptrf_work","","",null,null],[5,"zpptrf_work","","",null,null],[5,"spptri_work","","",null,null],[5,"dpptri_work","","",null,null],[5,"cpptri_work","","",null,null],[5,"zpptri_work","","",null,null],[5,"spptrs_work","","",null,null],[5,"dpptrs_work","","",null,null],[5,"cpptrs_work","","",null,null],[5,"zpptrs_work","","",null,null],[5,"spstrf_work","","",null,null],[5,"dpstrf_work","","",null,null],[5,"cpstrf_work","","",null,null],[5,"zpstrf_work","","",null,null],[5,"sptcon_work","","",null,null],[5,"dptcon_work","","",null,null],[5,"cptcon_work","","",null,null],[5,"zptcon_work","","",null,null],[5,"spteqr_work","","",null,null],[5,"dpteqr_work","","",null,null],[5,"cpteqr_work","","",null,null],[5,"zpteqr_work","","",null,null],[5,"sptrfs_work","","",null,null],[5,"dptrfs_work","","",null,null],[5,"cptrfs_work","","",null,null],[5,"zptrfs_work","","",null,null],[5,"sptsv_work","","",null,null],[5,"dptsv_work","","",null,null],[5,"cptsv_work","","",null,null],[5,"zptsv_work","","",null,null],[5,"sptsvx_work","","",null,null],[5,"dptsvx_work","","",null,null],[5,"cptsvx_work","","",null,null],[5,"zptsvx_work","","",null,null],[5,"spttrf_work","","",null,null],[5,"dpttrf_work","","",null,null],[5,"cpttrf_work","","",null,null],[5,"zpttrf_work","","",null,null],[5,"spttrs_work","","",null,null],[5,"dpttrs_work","","",null,null],[5,"cpttrs_work","","",null,null],[5,"zpttrs_work","","",null,null],[5,"ssbev_work","","",null,null],[5,"dsbev_work","","",null,null],[5,"ssbevd_work","","",null,null],[5,"dsbevd_work","","",null,null],[5,"ssbevx_work","","",null,null],[5,"dsbevx_work","","",null,null],[5,"ssbgst_work","","",null,null],[5,"dsbgst_work","","",null,null],[5,"ssbgv_work","","",null,null],[5,"dsbgv_work","","",null,null],[5,"ssbgvd_work","","",null,null],[5,"dsbgvd_work","","",null,null],[5,"ssbgvx_work","","",null,null],[5,"dsbgvx_work","","",null,null],[5,"ssbtrd_work","","",null,null],[5,"dsbtrd_work","","",null,null],[5,"ssfrk_work","","",null,null],[5,"dsfrk_work","","",null,null],[5,"sspcon_work","","",null,null],[5,"dspcon_work","","",null,null],[5,"cspcon_work","","",null,null],[5,"zspcon_work","","",null,null],[5,"sspev_work","","",null,null],[5,"dspev_work","","",null,null],[5,"sspevd_work","","",null,null],[5,"dspevd_work","","",null,null],[5,"sspevx_work","","",null,null],[5,"dspevx_work","","",null,null],[5,"sspgst_work","","",null,null],[5,"dspgst_work","","",null,null],[5,"sspgv_work","","",null,null],[5,"dspgv_work","","",null,null],[5,"sspgvd_work","","",null,null],[5,"dspgvd_work","","",null,null],[5,"sspgvx_work","","",null,null],[5,"dspgvx_work","","",null,null],[5,"ssprfs_work","","",null,null],[5,"dsprfs_work","","",null,null],[5,"csprfs_work","","",null,null],[5,"zsprfs_work","","",null,null],[5,"sspsv_work","","",null,null],[5,"dspsv_work","","",null,null],[5,"cspsv_work","","",null,null],[5,"zspsv_work","","",null,null],[5,"sspsvx_work","","",null,null],[5,"dspsvx_work","","",null,null],[5,"cspsvx_work","","",null,null],[5,"zspsvx_work","","",null,null],[5,"ssptrd_work","","",null,null],[5,"dsptrd_work","","",null,null],[5,"ssptrf_work","","",null,null],[5,"dsptrf_work","","",null,null],[5,"csptrf_work","","",null,null],[5,"zsptrf_work","","",null,null],[5,"ssptri_work","","",null,null],[5,"dsptri_work","","",null,null],[5,"csptri_work","","",null,null],[5,"zsptri_work","","",null,null],[5,"ssptrs_work","","",null,null],[5,"dsptrs_work","","",null,null],[5,"csptrs_work","","",null,null],[5,"zsptrs_work","","",null,null],[5,"sstebz_work","","",null,null],[5,"dstebz_work","","",null,null],[5,"sstedc_work","","",null,null],[5,"dstedc_work","","",null,null],[5,"cstedc_work","","",null,null],[5,"zstedc_work","","",null,null],[5,"sstegr_work","","",null,null],[5,"dstegr_work","","",null,null],[5,"cstegr_work","","",null,null],[5,"zstegr_work","","",null,null],[5,"sstein_work","","",null,null],[5,"dstein_work","","",null,null],[5,"cstein_work","","",null,null],[5,"zstein_work","","",null,null],[5,"sstemr_work","","",null,null],[5,"dstemr_work","","",null,null],[5,"cstemr_work","","",null,null],[5,"zstemr_work","","",null,null],[5,"ssteqr_work","","",null,null],[5,"dsteqr_work","","",null,null],[5,"csteqr_work","","",null,null],[5,"zsteqr_work","","",null,null],[5,"ssterf_work","","",null,null],[5,"dsterf_work","","",null,null],[5,"sstev_work","","",null,null],[5,"dstev_work","","",null,null],[5,"sstevd_work","","",null,null],[5,"dstevd_work","","",null,null],[5,"sstevr_work","","",null,null],[5,"dstevr_work","","",null,null],[5,"sstevx_work","","",null,null],[5,"dstevx_work","","",null,null],[5,"ssycon_work","","",null,null],[5,"dsycon_work","","",null,null],[5,"csycon_work","","",null,null],[5,"zsycon_work","","",null,null],[5,"ssyequb_work","","",null,null],[5,"dsyequb_work","","",null,null],[5,"csyequb_work","","",null,null],[5,"zsyequb_work","","",null,null],[5,"ssyev_work","","",null,null],[5,"dsyev_work","","",null,null],[5,"ssyevd_work","","",null,null],[5,"dsyevd_work","","",null,null],[5,"ssyevr_work","","",null,null],[5,"dsyevr_work","","",null,null],[5,"ssyevx_work","","",null,null],[5,"dsyevx_work","","",null,null],[5,"ssygst_work","","",null,null],[5,"dsygst_work","","",null,null],[5,"ssygv_work","","",null,null],[5,"dsygv_work","","",null,null],[5,"ssygvd_work","","",null,null],[5,"dsygvd_work","","",null,null],[5,"ssygvx_work","","",null,null],[5,"dsygvx_work","","",null,null],[5,"ssyrfs_work","","",null,null],[5,"dsyrfs_work","","",null,null],[5,"csyrfs_work","","",null,null],[5,"zsyrfs_work","","",null,null],[5,"ssyrfsx_work","","",null,null],[5,"dsyrfsx_work","","",null,null],[5,"csyrfsx_work","","",null,null],[5,"zsyrfsx_work","","",null,null],[5,"ssysv_work","","",null,null],[5,"dsysv_work","","",null,null],[5,"csysv_work","","",null,null],[5,"zsysv_work","","",null,null],[5,"ssysvx_work","","",null,null],[5,"dsysvx_work","","",null,null],[5,"csysvx_work","","",null,null],[5,"zsysvx_work","","",null,null],[5,"ssysvxx_work","","",null,null],[5,"dsysvxx_work","","",null,null],[5,"csysvxx_work","","",null,null],[5,"zsysvxx_work","","",null,null],[5,"ssytrd_work","","",null,null],[5,"dsytrd_work","","",null,null],[5,"ssytrf_work","","",null,null],[5,"dsytrf_work","","",null,null],[5,"csytrf_work","","",null,null],[5,"zsytrf_work","","",null,null],[5,"ssytri_work","","",null,null],[5,"dsytri_work","","",null,null],[5,"csytri_work","","",null,null],[5,"zsytri_work","","",null,null],[5,"ssytrs_work","","",null,null],[5,"dsytrs_work","","",null,null],[5,"csytrs_work","","",null,null],[5,"zsytrs_work","","",null,null],[5,"stbcon_work","","",null,null],[5,"dtbcon_work","","",null,null],[5,"ctbcon_work","","",null,null],[5,"ztbcon_work","","",null,null],[5,"stbrfs_work","","",null,null],[5,"dtbrfs_work","","",null,null],[5,"ctbrfs_work","","",null,null],[5,"ztbrfs_work","","",null,null],[5,"stbtrs_work","","",null,null],[5,"dtbtrs_work","","",null,null],[5,"ctbtrs_work","","",null,null],[5,"ztbtrs_work","","",null,null],[5,"stfsm_work","","",null,null],[5,"dtfsm_work","","",null,null],[5,"ctfsm_work","","",null,null],[5,"ztfsm_work","","",null,null],[5,"stftri_work","","",null,null],[5,"dtftri_work","","",null,null],[5,"ctftri_work","","",null,null],[5,"ztftri_work","","",null,null],[5,"stfttp_work","","",null,null],[5,"dtfttp_work","","",null,null],[5,"ctfttp_work","","",null,null],[5,"ztfttp_work","","",null,null],[5,"stfttr_work","","",null,null],[5,"dtfttr_work","","",null,null],[5,"ctfttr_work","","",null,null],[5,"ztfttr_work","","",null,null],[5,"stgevc_work","","",null,null],[5,"dtgevc_work","","",null,null],[5,"ctgevc_work","","",null,null],[5,"ztgevc_work","","",null,null],[5,"stgexc_work","","",null,null],[5,"dtgexc_work","","",null,null],[5,"ctgexc_work","","",null,null],[5,"ztgexc_work","","",null,null],[5,"stgsen_work","","",null,null],[5,"dtgsen_work","","",null,null],[5,"ctgsen_work","","",null,null],[5,"ztgsen_work","","",null,null],[5,"stgsja_work","","",null,null],[5,"dtgsja_work","","",null,null],[5,"ctgsja_work","","",null,null],[5,"ztgsja_work","","",null,null],[5,"stgsna_work","","",null,null],[5,"dtgsna_work","","",null,null],[5,"ctgsna_work","","",null,null],[5,"ztgsna_work","","",null,null],[5,"stgsyl_work","","",null,null],[5,"dtgsyl_work","","",null,null],[5,"ctgsyl_work","","",null,null],[5,"ztgsyl_work","","",null,null],[5,"stpcon_work","","",null,null],[5,"dtpcon_work","","",null,null],[5,"ctpcon_work","","",null,null],[5,"ztpcon_work","","",null,null],[5,"stprfs_work","","",null,null],[5,"dtprfs_work","","",null,null],[5,"ctprfs_work","","",null,null],[5,"ztprfs_work","","",null,null],[5,"stptri_work","","",null,null],[5,"dtptri_work","","",null,null],[5,"ctptri_work","","",null,null],[5,"ztptri_work","","",null,null],[5,"stptrs_work","","",null,null],[5,"dtptrs_work","","",null,null],[5,"ctptrs_work","","",null,null],[5,"ztptrs_work","","",null,null],[5,"stpttf_work","","",null,null],[5,"dtpttf_work","","",null,null],[5,"ctpttf_work","","",null,null],[5,"ztpttf_work","","",null,null],[5,"stpttr_work","","",null,null],[5,"dtpttr_work","","",null,null],[5,"ctpttr_work","","",null,null],[5,"ztpttr_work","","",null,null],[5,"strcon_work","","",null,null],[5,"dtrcon_work","","",null,null],[5,"ctrcon_work","","",null,null],[5,"ztrcon_work","","",null,null],[5,"strevc_work","","",null,null],[5,"dtrevc_work","","",null,null],[5,"ctrevc_work","","",null,null],[5,"ztrevc_work","","",null,null],[5,"strexc_work","","",null,null],[5,"dtrexc_work","","",null,null],[5,"ctrexc_work","","",null,null],[5,"ztrexc_work","","",null,null],[5,"strrfs_work","","",null,null],[5,"dtrrfs_work","","",null,null],[5,"ctrrfs_work","","",null,null],[5,"ztrrfs_work","","",null,null],[5,"strsen_work","","",null,null],[5,"dtrsen_work","","",null,null],[5,"ctrsen_work","","",null,null],[5,"ztrsen_work","","",null,null],[5,"strsna_work","","",null,null],[5,"dtrsna_work","","",null,null],[5,"ctrsna_work","","",null,null],[5,"ztrsna_work","","",null,null],[5,"strsyl_work","","",null,null],[5,"dtrsyl_work","","",null,null],[5,"ctrsyl_work","","",null,null],[5,"ztrsyl_work","","",null,null],[5,"strtri_work","","",null,null],[5,"dtrtri_work","","",null,null],[5,"ctrtri_work","","",null,null],[5,"ztrtri_work","","",null,null],[5,"strtrs_work","","",null,null],[5,"dtrtrs_work","","",null,null],[5,"ctrtrs_work","","",null,null],[5,"ztrtrs_work","","",null,null],[5,"strttf_work","","",null,null],[5,"dtrttf_work","","",null,null],[5,"ctrttf_work","","",null,null],[5,"ztrttf_work","","",null,null],[5,"strttp_work","","",null,null],[5,"dtrttp_work","","",null,null],[5,"ctrttp_work","","",null,null],[5,"ztrttp_work","","",null,null],[5,"stzrzf_work","","",null,null],[5,"dtzrzf_work","","",null,null],[5,"ctzrzf_work","","",null,null],[5,"ztzrzf_work","","",null,null],[5,"cungbr_work","","",null,null],[5,"zungbr_work","","",null,null],[5,"cunghr_work","","",null,null],[5,"zunghr_work","","",null,null],[5,"cunglq_work","","",null,null],[5,"zunglq_work","","",null,null],[5,"cungql_work","","",null,null],[5,"zungql_work","","",null,null],[5,"cungqr_work","","",null,null],[5,"zungqr_work","","",null,null],[5,"cungrq_work","","",null,null],[5,"zungrq_work","","",null,null],[5,"cungtr_work","","",null,null],[5,"zungtr_work","","",null,null],[5,"cunmbr_work","","",null,null],[5,"zunmbr_work","","",null,null],[5,"cunmhr_work","","",null,null],[5,"zunmhr_work","","",null,null],[5,"cunmlq_work","","",null,null],[5,"zunmlq_work","","",null,null],[5,"cunmql_work","","",null,null],[5,"zunmql_work","","",null,null],[5,"cunmqr_work","","",null,null],[5,"zunmqr_work","","",null,null],[5,"cunmrq_work","","",null,null],[5,"zunmrq_work","","",null,null],[5,"cunmrz_work","","",null,null],[5,"zunmrz_work","","",null,null],[5,"cunmtr_work","","",null,null],[5,"zunmtr_work","","",null,null],[5,"cupgtr_work","","",null,null],[5,"zupgtr_work","","",null,null],[5,"cupmtr_work","","",null,null],[5,"zupmtr_work","","",null,null],[5,"claghe","","",null,null],[5,"zlaghe","","",null,null],[5,"slagsy","","",null,null],[5,"dlagsy","","",null,null],[5,"clagsy","","",null,null],[5,"zlagsy","","",null,null],[5,"slapmr","","",null,null],[5,"dlapmr","","",null,null],[5,"clapmr","","",null,null],[5,"zlapmr","","",null,null],[5,"slapmt","","",null,null],[5,"dlapmt","","",null,null],[5,"clapmt","","",null,null],[5,"zlapmt","","",null,null],[5,"slapy2","","",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"dlapy2","","",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"slapy3","","",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"dlapy3","","",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"slartgp","","",null,null],[5,"dlartgp","","",null,null],[5,"slartgs","","",null,null],[5,"dlartgs","","",null,null],[5,"cbbcsd","","",null,null],[5,"cbbcsd_work","","",null,null],[5,"cheswapr","","",null,null],[5,"cheswapr_work","","",null,null],[5,"chetri2","","",null,null],[5,"chetri2_work","","",null,null],[5,"chetri2x","","",null,null],[5,"chetri2x_work","","",null,null],[5,"chetrs2","","",null,null],[5,"chetrs2_work","","",null,null],[5,"csyconv","","",null,null],[5,"csyconv_work","","",null,null],[5,"csyswapr","","",null,null],[5,"csyswapr_work","","",null,null],[5,"csytri2","","",null,null],[5,"csytri2_work","","",null,null],[5,"csytri2x","","",null,null],[5,"csytri2x_work","","",null,null],[5,"csytrs2","","",null,null],[5,"csytrs2_work","","",null,null],[5,"cunbdb","","",null,null],[5,"cunbdb_work","","",null,null],[5,"cuncsd","","",null,null],[5,"cuncsd_work","","",null,null],[5,"cuncsd2by1","","",null,null],[5,"cuncsd2by1_work","","",null,null],[5,"dbbcsd","","",null,null],[5,"dbbcsd_work","","",null,null],[5,"dorbdb","","",null,null],[5,"dorbdb_work","","",null,null],[5,"dorcsd","","",null,null],[5,"dorcsd_work","","",null,null],[5,"dorcsd2by1","","",null,null],[5,"dorcsd2by1_work","","",null,null],[5,"dsyconv","","",null,null],[5,"dsyconv_work","","",null,null],[5,"dsyswapr","","",null,null],[5,"dsyswapr_work","","",null,null],[5,"dsytri2","","",null,null],[5,"dsytri2_work","","",null,null],[5,"dsytri2x","","",null,null],[5,"dsytri2x_work","","",null,null],[5,"dsytrs2","","",null,null],[5,"dsytrs2_work","","",null,null],[5,"sbbcsd","","",null,null],[5,"sbbcsd_work","","",null,null],[5,"sorbdb","","",null,null],[5,"sorbdb_work","","",null,null],[5,"sorcsd","","",null,null],[5,"sorcsd_work","","",null,null],[5,"sorcsd2by1","","",null,null],[5,"sorcsd2by1_work","","",null,null],[5,"ssyconv","","",null,null],[5,"ssyconv_work","","",null,null],[5,"ssyswapr","","",null,null],[5,"ssyswapr_work","","",null,null],[5,"ssytri2","","",null,null],[5,"ssytri2_work","","",null,null],[5,"ssytri2x","","",null,null],[5,"ssytri2x_work","","",null,null],[5,"ssytrs2","","",null,null],[5,"ssytrs2_work","","",null,null],[5,"zbbcsd","","",null,null],[5,"zbbcsd_work","","",null,null],[5,"zheswapr","","",null,null],[5,"zheswapr_work","","",null,null],[5,"zhetri2","","",null,null],[5,"zhetri2_work","","",null,null],[5,"zhetri2x","","",null,null],[5,"zhetri2x_work","","",null,null],[5,"zhetrs2","","",null,null],[5,"zhetrs2_work","","",null,null],[5,"zsyconv","","",null,null],[5,"zsyconv_work","","",null,null],[5,"zsyswapr","","",null,null],[5,"zsyswapr_work","","",null,null],[5,"zsytri2","","",null,null],[5,"zsytri2_work","","",null,null],[5,"zsytri2x","","",null,null],[5,"zsytri2x_work","","",null,null],[5,"zsytrs2","","",null,null],[5,"zsytrs2_work","","",null,null],[5,"zunbdb","","",null,null],[5,"zunbdb_work","","",null,null],[5,"zuncsd","","",null,null],[5,"zuncsd_work","","",null,null],[5,"zuncsd2by1","","",null,null],[5,"zuncsd2by1_work","","",null,null],[5,"sgemqrt","","",null,null],[5,"dgemqrt","","",null,null],[5,"cgemqrt","","",null,null],[5,"zgemqrt","","",null,null],[5,"sgeqrt","","",null,null],[5,"dgeqrt","","",null,null],[5,"cgeqrt","","",null,null],[5,"zgeqrt","","",null,null],[5,"sgeqrt2","","",null,null],[5,"dgeqrt2","","",null,null],[5,"cgeqrt2","","",null,null],[5,"zgeqrt2","","",null,null],[5,"sgeqrt3","","",null,null],[5,"dgeqrt3","","",null,null],[5,"cgeqrt3","","",null,null],[5,"zgeqrt3","","",null,null],[5,"stpmqrt","","",null,null],[5,"dtpmqrt","","",null,null],[5,"ctpmqrt","","",null,null],[5,"ztpmqrt","","",null,null],[5,"stpqrt","","",null,null],[5,"dtpqrt","","",null,null],[5,"ctpqrt","","",null,null],[5,"ztpqrt","","",null,null],[5,"stpqrt2","","",null,null],[5,"dtpqrt2","","",null,null],[5,"ctpqrt2","","",null,null],[5,"ztpqrt2","","",null,null],[5,"stprfb","","",null,null],[5,"dtprfb","","",null,null],[5,"ctprfb","","",null,null],[5,"ztprfb","","",null,null],[5,"sgemqrt_work","","",null,null],[5,"dgemqrt_work","","",null,null],[5,"cgemqrt_work","","",null,null],[5,"zgemqrt_work","","",null,null],[5,"sgeqrt_work","","",null,null],[5,"dgeqrt_work","","",null,null],[5,"cgeqrt_work","","",null,null],[5,"zgeqrt_work","","",null,null],[5,"sgeqrt2_work","","",null,null],[5,"dgeqrt2_work","","",null,null],[5,"cgeqrt2_work","","",null,null],[5,"zgeqrt2_work","","",null,null],[5,"sgeqrt3_work","","",null,null],[5,"dgeqrt3_work","","",null,null],[5,"cgeqrt3_work","","",null,null],[5,"zgeqrt3_work","","",null,null],[5,"stpmqrt_work","","",null,null],[5,"dtpmqrt_work","","",null,null],[5,"ctpmqrt_work","","",null,null],[5,"ztpmqrt_work","","",null,null],[5,"stpqrt_work","","",null,null],[5,"dtpqrt_work","","",null,null],[5,"ctpqrt_work","","",null,null],[5,"ztpqrt_work","","",null,null],[5,"stpqrt2_work","","",null,null],[5,"dtpqrt2_work","","",null,null],[5,"ctpqrt2_work","","",null,null],[5,"ztpqrt2_work","","",null,null],[5,"stprfb_work","","",null,null],[5,"dtprfb_work","","",null,null],[5,"ctprfb_work","","",null,null],[5,"ztprfb_work","","",null,null],[5,"ssysv_rook","","",null,null],[5,"dsysv_rook","","",null,null],[5,"csysv_rook","","",null,null],[5,"zsysv_rook","","",null,null],[5,"ssytrf_rook","","",null,null],[5,"dsytrf_rook","","",null,null],[5,"csytrf_rook","","",null,null],[5,"zsytrf_rook","","",null,null],[5,"ssytrs_rook","","",null,null],[5,"dsytrs_rook","","",null,null],[5,"csytrs_rook","","",null,null],[5,"zsytrs_rook","","",null,null],[5,"chetrf_rook","","",null,null],[5,"zhetrf_rook","","",null,null],[5,"chetrs_rook","","",null,null],[5,"zhetrs_rook","","",null,null],[5,"csyr","","",null,null],[5,"zsyr","","",null,null],[5,"ssysv_rook_work","","",null,null],[5,"dsysv_rook_work","","",null,null],[5,"csysv_rook_work","","",null,null],[5,"zsysv_rook_work","","",null,null],[5,"ssytrf_rook_work","","",null,null],[5,"dsytrf_rook_work","","",null,null],[5,"csytrf_rook_work","","",null,null],[5,"zsytrf_rook_work","","",null,null],[5,"ssytrs_rook_work","","",null,null],[5,"dsytrs_rook_work","","",null,null],[5,"csytrs_rook_work","","",null,null],[5,"zsytrs_rook_work","","",null,null],[5,"chetrf_rook_work","","",null,null],[5,"zhetrf_rook_work","","",null,null],[5,"chetrs_rook_work","","",null,null],[5,"zhetrs_rook_work","","",null,null],[5,"csyr_work","","",null,null],[5,"zsyr_work","","",null,null],[5,"ilaver","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[6,"c32","","A complex number with 32-bit parts.",null,null],[6,"c64","","A complex number with 64-bit parts.",null,null],[6,"Select2F32","","",null,null],[6,"Select3F32","","",null,null],[6,"Select2F64","","",null,null],[6,"Select3F64","","",null,null],[6,"Select1C32","","",null,null],[6,"Select2C32","","",null,null],[6,"Select1C64","","",null,null],[6,"Select2C64","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}]],"paths":[[4,"Error"],[4,"Layout"]]};
searchIndex["lapacke_sys"] = {"doc":"Bindings to [LAPACKE] (C).","items":[[5,"LAPACKE_sbdsdc","lapacke_sys","",null,null],[5,"LAPACKE_dbdsdc","","",null,null],[5,"LAPACKE_sbdsqr","","",null,null],[5,"LAPACKE_dbdsqr","","",null,null],[5,"LAPACKE_cbdsqr","","",null,null],[5,"LAPACKE_zbdsqr","","",null,null],[5,"LAPACKE_sbdsvdx","","",null,null],[5,"LAPACKE_dbdsvdx","","",null,null],[5,"LAPACKE_sdisna","","",null,null],[5,"LAPACKE_ddisna","","",null,null],[5,"LAPACKE_sgbbrd","","",null,null],[5,"LAPACKE_dgbbrd","","",null,null],[5,"LAPACKE_cgbbrd","","",null,null],[5,"LAPACKE_zgbbrd","","",null,null],[5,"LAPACKE_sgbcon","","",null,null],[5,"LAPACKE_dgbcon","","",null,null],[5,"LAPACKE_cgbcon","","",null,null],[5,"LAPACKE_zgbcon","","",null,null],[5,"LAPACKE_sgbequ","","",null,null],[5,"LAPACKE_dgbequ","","",null,null],[5,"LAPACKE_cgbequ","","",null,null],[5,"LAPACKE_zgbequ","","",null,null],[5,"LAPACKE_sgbequb","","",null,null],[5,"LAPACKE_dgbequb","","",null,null],[5,"LAPACKE_cgbequb","","",null,null],[5,"LAPACKE_zgbequb","","",null,null],[5,"LAPACKE_sgbrfs","","",null,null],[5,"LAPACKE_dgbrfs","","",null,null],[5,"LAPACKE_cgbrfs","","",null,null],[5,"LAPACKE_zgbrfs","","",null,null],[5,"LAPACKE_sgbrfsx","","",null,null],[5,"LAPACKE_dgbrfsx","","",null,null],[5,"LAPACKE_cgbrfsx","","",null,null],[5,"LAPACKE_zgbrfsx","","",null,null],[5,"LAPACKE_sgbsv","","",null,null],[5,"LAPACKE_dgbsv","","",null,null],[5,"LAPACKE_cgbsv","","",null,null],[5,"LAPACKE_zgbsv","","",null,null],[5,"LAPACKE_sgbsvx","","",null,null],[5,"LAPACKE_dgbsvx","","",null,null],[5,"LAPACKE_cgbsvx","","",null,null],[5,"LAPACKE_zgbsvx","","",null,null],[5,"LAPACKE_sgbsvxx","","",null,null],[5,"LAPACKE_dgbsvxx","","",null,null],[5,"LAPACKE_cgbsvxx","","",null,null],[5,"LAPACKE_zgbsvxx","","",null,null],[5,"LAPACKE_sgbtrf","","",null,null],[5,"LAPACKE_dgbtrf","","",null,null],[5,"LAPACKE_cgbtrf","","",null,null],[5,"LAPACKE_zgbtrf","","",null,null],[5,"LAPACKE_sgbtrs","","",null,null],[5,"LAPACKE_dgbtrs","","",null,null],[5,"LAPACKE_cgbtrs","","",null,null],[5,"LAPACKE_zgbtrs","","",null,null],[5,"LAPACKE_sgebak","","",null,null],[5,"LAPACKE_dgebak","","",null,null],[5,"LAPACKE_cgebak","","",null,null],[5,"LAPACKE_zgebak","","",null,null],[5,"LAPACKE_sgebal","","",null,null],[5,"LAPACKE_dgebal","","",null,null],[5,"LAPACKE_cgebal","","",null,null],[5,"LAPACKE_zgebal","","",null,null],[5,"LAPACKE_sgebrd","","",null,null],[5,"LAPACKE_dgebrd","","",null,null],[5,"LAPACKE_cgebrd","","",null,null],[5,"LAPACKE_zgebrd","","",null,null],[5,"LAPACKE_sgecon","","",null,null],[5,"LAPACKE_dgecon","","",null,null],[5,"LAPACKE_cgecon","","",null,null],[5,"LAPACKE_zgecon","","",null,null],[5,"LAPACKE_sgeequ","","",null,null],[5,"LAPACKE_dgeequ","","",null,null],[5,"LAPACKE_cgeequ","","",null,null],[5,"LAPACKE_zgeequ","","",null,null],[5,"LAPACKE_sgeequb","","",null,null],[5,"LAPACKE_dgeequb","","",null,null],[5,"LAPACKE_cgeequb","","",null,null],[5,"LAPACKE_zgeequb","","",null,null],[5,"LAPACKE_sgees","","",null,null],[5,"LAPACKE_dgees","","",null,null],[5,"LAPACKE_cgees","","",null,null],[5,"LAPACKE_zgees","","",null,null],[5,"LAPACKE_sgeesx","","",null,null],[5,"LAPACKE_dgeesx","","",null,null],[5,"LAPACKE_cgeesx","","",null,null],[5,"LAPACKE_zgeesx","","",null,null],[5,"LAPACKE_sgeev","","",null,null],[5,"LAPACKE_dgeev","","",null,null],[5,"LAPACKE_cgeev","","",null,null],[5,"LAPACKE_zgeev","","",null,null],[5,"LAPACKE_sgeevx","","",null,null],[5,"LAPACKE_dgeevx","","",null,null],[5,"LAPACKE_cgeevx","","",null,null],[5,"LAPACKE_zgeevx","","",null,null],[5,"LAPACKE_sgehrd","","",null,null],[5,"LAPACKE_dgehrd","","",null,null],[5,"LAPACKE_cgehrd","","",null,null],[5,"LAPACKE_zgehrd","","",null,null],[5,"LAPACKE_sgejsv","","",null,null],[5,"LAPACKE_dgejsv","","",null,null],[5,"LAPACKE_cgejsv","","",null,null],[5,"LAPACKE_zgejsv","","",null,null],[5,"LAPACKE_sgelq2","","",null,null],[5,"LAPACKE_dgelq2","","",null,null],[5,"LAPACKE_cgelq2","","",null,null],[5,"LAPACKE_zgelq2","","",null,null],[5,"LAPACKE_sgelqf","","",null,null],[5,"LAPACKE_dgelqf","","",null,null],[5,"LAPACKE_cgelqf","","",null,null],[5,"LAPACKE_zgelqf","","",null,null],[5,"LAPACKE_sgels","","",null,null],[5,"LAPACKE_dgels","","",null,null],[5,"LAPACKE_cgels","","",null,null],[5,"LAPACKE_zgels","","",null,null],[5,"LAPACKE_sgelsd","","",null,null],[5,"LAPACKE_dgelsd","","",null,null],[5,"LAPACKE_cgelsd","","",null,null],[5,"LAPACKE_zgelsd","","",null,null],[5,"LAPACKE_sgelss","","",null,null],[5,"LAPACKE_dgelss","","",null,null],[5,"LAPACKE_cgelss","","",null,null],[5,"LAPACKE_zgelss","","",null,null],[5,"LAPACKE_sgelsy","","",null,null],[5,"LAPACKE_dgelsy","","",null,null],[5,"LAPACKE_cgelsy","","",null,null],[5,"LAPACKE_zgelsy","","",null,null],[5,"LAPACKE_sgeqlf","","",null,null],[5,"LAPACKE_dgeqlf","","",null,null],[5,"LAPACKE_cgeqlf","","",null,null],[5,"LAPACKE_zgeqlf","","",null,null],[5,"LAPACKE_sgeqp3","","",null,null],[5,"LAPACKE_dgeqp3","","",null,null],[5,"LAPACKE_cgeqp3","","",null,null],[5,"LAPACKE_zgeqp3","","",null,null],[5,"LAPACKE_sgeqpf","","",null,null],[5,"LAPACKE_dgeqpf","","",null,null],[5,"LAPACKE_cgeqpf","","",null,null],[5,"LAPACKE_zgeqpf","","",null,null],[5,"LAPACKE_sgeqr2","","",null,null],[5,"LAPACKE_dgeqr2","","",null,null],[5,"LAPACKE_cgeqr2","","",null,null],[5,"LAPACKE_zgeqr2","","",null,null],[5,"LAPACKE_sgeqrf","","",null,null],[5,"LAPACKE_dgeqrf","","",null,null],[5,"LAPACKE_cgeqrf","","",null,null],[5,"LAPACKE_zgeqrf","","",null,null],[5,"LAPACKE_sgeqrfp","","",null,null],[5,"LAPACKE_dgeqrfp","","",null,null],[5,"LAPACKE_cgeqrfp","","",null,null],[5,"LAPACKE_zgeqrfp","","",null,null],[5,"LAPACKE_sgerfs","","",null,null],[5,"LAPACKE_dgerfs","","",null,null],[5,"LAPACKE_cgerfs","","",null,null],[5,"LAPACKE_zgerfs","","",null,null],[5,"LAPACKE_sgerfsx","","",null,null],[5,"LAPACKE_dgerfsx","","",null,null],[5,"LAPACKE_cgerfsx","","",null,null],[5,"LAPACKE_zgerfsx","","",null,null],[5,"LAPACKE_sgerqf","","",null,null],[5,"LAPACKE_dgerqf","","",null,null],[5,"LAPACKE_cgerqf","","",null,null],[5,"LAPACKE_zgerqf","","",null,null],[5,"LAPACKE_sgesdd","","",null,null],[5,"LAPACKE_dgesdd","","",null,null],[5,"LAPACKE_cgesdd","","",null,null],[5,"LAPACKE_zgesdd","","",null,null],[5,"LAPACKE_sgesv","","",null,null],[5,"LAPACKE_dgesv","","",null,null],[5,"LAPACKE_cgesv","","",null,null],[5,"LAPACKE_zgesv","","",null,null],[5,"LAPACKE_dsgesv","","",null,null],[5,"LAPACKE_zcgesv","","",null,null],[5,"LAPACKE_sgesvd","","",null,null],[5,"LAPACKE_dgesvd","","",null,null],[5,"LAPACKE_cgesvd","","",null,null],[5,"LAPACKE_zgesvd","","",null,null],[5,"LAPACKE_sgesvdx","","",null,null],[5,"LAPACKE_dgesvdx","","",null,null],[5,"LAPACKE_cgesvdx","","",null,null],[5,"LAPACKE_zgesvdx","","",null,null],[5,"LAPACKE_sgesvj","","",null,null],[5,"LAPACKE_dgesvj","","",null,null],[5,"LAPACKE_cgesvj","","",null,null],[5,"LAPACKE_zgesvj","","",null,null],[5,"LAPACKE_sgesvx","","",null,null],[5,"LAPACKE_dgesvx","","",null,null],[5,"LAPACKE_cgesvx","","",null,null],[5,"LAPACKE_zgesvx","","",null,null],[5,"LAPACKE_sgesvxx","","",null,null],[5,"LAPACKE_dgesvxx","","",null,null],[5,"LAPACKE_cgesvxx","","",null,null],[5,"LAPACKE_zgesvxx","","",null,null],[5,"LAPACKE_sgetf2","","",null,null],[5,"LAPACKE_dgetf2","","",null,null],[5,"LAPACKE_cgetf2","","",null,null],[5,"LAPACKE_zgetf2","","",null,null],[5,"LAPACKE_sgetrf","","",null,null],[5,"LAPACKE_dgetrf","","",null,null],[5,"LAPACKE_cgetrf","","",null,null],[5,"LAPACKE_zgetrf","","",null,null],[5,"LAPACKE_sgetrf2","","",null,null],[5,"LAPACKE_dgetrf2","","",null,null],[5,"LAPACKE_cgetrf2","","",null,null],[5,"LAPACKE_zgetrf2","","",null,null],[5,"LAPACKE_sgetri","","",null,null],[5,"LAPACKE_dgetri","","",null,null],[5,"LAPACKE_cgetri","","",null,null],[5,"LAPACKE_zgetri","","",null,null],[5,"LAPACKE_sgetrs","","",null,null],[5,"LAPACKE_dgetrs","","",null,null],[5,"LAPACKE_cgetrs","","",null,null],[5,"LAPACKE_zgetrs","","",null,null],[5,"LAPACKE_sggbak","","",null,null],[5,"LAPACKE_dggbak","","",null,null],[5,"LAPACKE_cggbak","","",null,null],[5,"LAPACKE_zggbak","","",null,null],[5,"LAPACKE_sggbal","","",null,null],[5,"LAPACKE_dggbal","","",null,null],[5,"LAPACKE_cggbal","","",null,null],[5,"LAPACKE_zggbal","","",null,null],[5,"LAPACKE_sgges","","",null,null],[5,"LAPACKE_dgges","","",null,null],[5,"LAPACKE_cgges","","",null,null],[5,"LAPACKE_zgges","","",null,null],[5,"LAPACKE_sgges3","","",null,null],[5,"LAPACKE_dgges3","","",null,null],[5,"LAPACKE_cgges3","","",null,null],[5,"LAPACKE_zgges3","","",null,null],[5,"LAPACKE_sggesx","","",null,null],[5,"LAPACKE_dggesx","","",null,null],[5,"LAPACKE_cggesx","","",null,null],[5,"LAPACKE_zggesx","","",null,null],[5,"LAPACKE_sggev","","",null,null],[5,"LAPACKE_dggev","","",null,null],[5,"LAPACKE_cggev","","",null,null],[5,"LAPACKE_zggev","","",null,null],[5,"LAPACKE_sggev3","","",null,null],[5,"LAPACKE_dggev3","","",null,null],[5,"LAPACKE_cggev3","","",null,null],[5,"LAPACKE_zggev3","","",null,null],[5,"LAPACKE_sggevx","","",null,null],[5,"LAPACKE_dggevx","","",null,null],[5,"LAPACKE_cggevx","","",null,null],[5,"LAPACKE_zggevx","","",null,null],[5,"LAPACKE_sggglm","","",null,null],[5,"LAPACKE_dggglm","","",null,null],[5,"LAPACKE_cggglm","","",null,null],[5,"LAPACKE_zggglm","","",null,null],[5,"LAPACKE_sgghrd","","",null,null],[5,"LAPACKE_dgghrd","","",null,null],[5,"LAPACKE_cgghrd","","",null,null],[5,"LAPACKE_zgghrd","","",null,null],[5,"LAPACKE_sgghd3","","",null,null],[5,"LAPACKE_dgghd3","","",null,null],[5,"LAPACKE_cgghd3","","",null,null],[5,"LAPACKE_zgghd3","","",null,null],[5,"LAPACKE_sgglse","","",null,null],[5,"LAPACKE_dgglse","","",null,null],[5,"LAPACKE_cgglse","","",null,null],[5,"LAPACKE_zgglse","","",null,null],[5,"LAPACKE_sggqrf","","",null,null],[5,"LAPACKE_dggqrf","","",null,null],[5,"LAPACKE_cggqrf","","",null,null],[5,"LAPACKE_zggqrf","","",null,null],[5,"LAPACKE_sggrqf","","",null,null],[5,"LAPACKE_dggrqf","","",null,null],[5,"LAPACKE_cggrqf","","",null,null],[5,"LAPACKE_zggrqf","","",null,null],[5,"LAPACKE_sggsvd","","",null,null],[5,"LAPACKE_dggsvd","","",null,null],[5,"LAPACKE_cggsvd","","",null,null],[5,"LAPACKE_zggsvd","","",null,null],[5,"LAPACKE_sggsvd3","","",null,null],[5,"LAPACKE_dggsvd3","","",null,null],[5,"LAPACKE_cggsvd3","","",null,null],[5,"LAPACKE_zggsvd3","","",null,null],[5,"LAPACKE_sggsvp","","",null,null],[5,"LAPACKE_dggsvp","","",null,null],[5,"LAPACKE_cggsvp","","",null,null],[5,"LAPACKE_zggsvp","","",null,null],[5,"LAPACKE_sggsvp3","","",null,null],[5,"LAPACKE_dggsvp3","","",null,null],[5,"LAPACKE_cggsvp3","","",null,null],[5,"LAPACKE_zggsvp3","","",null,null],[5,"LAPACKE_sgtcon","","",null,null],[5,"LAPACKE_dgtcon","","",null,null],[5,"LAPACKE_cgtcon","","",null,null],[5,"LAPACKE_zgtcon","","",null,null],[5,"LAPACKE_sgtrfs","","",null,null],[5,"LAPACKE_dgtrfs","","",null,null],[5,"LAPACKE_cgtrfs","","",null,null],[5,"LAPACKE_zgtrfs","","",null,null],[5,"LAPACKE_sgtsv","","",null,null],[5,"LAPACKE_dgtsv","","",null,null],[5,"LAPACKE_cgtsv","","",null,null],[5,"LAPACKE_zgtsv","","",null,null],[5,"LAPACKE_sgtsvx","","",null,null],[5,"LAPACKE_dgtsvx","","",null,null],[5,"LAPACKE_cgtsvx","","",null,null],[5,"LAPACKE_zgtsvx","","",null,null],[5,"LAPACKE_sgttrf","","",null,null],[5,"LAPACKE_dgttrf","","",null,null],[5,"LAPACKE_cgttrf","","",null,null],[5,"LAPACKE_zgttrf","","",null,null],[5,"LAPACKE_sgttrs","","",null,null],[5,"LAPACKE_dgttrs","","",null,null],[5,"LAPACKE_cgttrs","","",null,null],[5,"LAPACKE_zgttrs","","",null,null],[5,"LAPACKE_chbev","","",null,null],[5,"LAPACKE_zhbev","","",null,null],[5,"LAPACKE_chbevd","","",null,null],[5,"LAPACKE_zhbevd","","",null,null],[5,"LAPACKE_chbevx","","",null,null],[5,"LAPACKE_zhbevx","","",null,null],[5,"LAPACKE_chbgst","","",null,null],[5,"LAPACKE_zhbgst","","",null,null],[5,"LAPACKE_chbgv","","",null,null],[5,"LAPACKE_zhbgv","","",null,null],[5,"LAPACKE_chbgvd","","",null,null],[5,"LAPACKE_zhbgvd","","",null,null],[5,"LAPACKE_chbgvx","","",null,null],[5,"LAPACKE_zhbgvx","","",null,null],[5,"LAPACKE_chbtrd","","",null,null],[5,"LAPACKE_zhbtrd","","",null,null],[5,"LAPACKE_checon","","",null,null],[5,"LAPACKE_zhecon","","",null,null],[5,"LAPACKE_cheequb","","",null,null],[5,"LAPACKE_zheequb","","",null,null],[5,"LAPACKE_cheev","","",null,null],[5,"LAPACKE_zheev","","",null,null],[5,"LAPACKE_cheevd","","",null,null],[5,"LAPACKE_zheevd","","",null,null],[5,"LAPACKE_cheevr","","",null,null],[5,"LAPACKE_zheevr","","",null,null],[5,"LAPACKE_cheevx","","",null,null],[5,"LAPACKE_zheevx","","",null,null],[5,"LAPACKE_chegst","","",null,null],[5,"LAPACKE_zhegst","","",null,null],[5,"LAPACKE_chegv","","",null,null],[5,"LAPACKE_zhegv","","",null,null],[5,"LAPACKE_chegvd","","",null,null],[5,"LAPACKE_zhegvd","","",null,null],[5,"LAPACKE_chegvx","","",null,null],[5,"LAPACKE_zhegvx","","",null,null],[5,"LAPACKE_cherfs","","",null,null],[5,"LAPACKE_zherfs","","",null,null],[5,"LAPACKE_cherfsx","","",null,null],[5,"LAPACKE_zherfsx","","",null,null],[5,"LAPACKE_chesv","","",null,null],[5,"LAPACKE_zhesv","","",null,null],[5,"LAPACKE_chesvx","","",null,null],[5,"LAPACKE_zhesvx","","",null,null],[5,"LAPACKE_chesvxx","","",null,null],[5,"LAPACKE_zhesvxx","","",null,null],[5,"LAPACKE_chetrd","","",null,null],[5,"LAPACKE_zhetrd","","",null,null],[5,"LAPACKE_chetrf","","",null,null],[5,"LAPACKE_zhetrf","","",null,null],[5,"LAPACKE_chetri","","",null,null],[5,"LAPACKE_zhetri","","",null,null],[5,"LAPACKE_chetrs","","",null,null],[5,"LAPACKE_zhetrs","","",null,null],[5,"LAPACKE_chfrk","","",null,null],[5,"LAPACKE_zhfrk","","",null,null],[5,"LAPACKE_shgeqz","","",null,null],[5,"LAPACKE_dhgeqz","","",null,null],[5,"LAPACKE_chgeqz","","",null,null],[5,"LAPACKE_zhgeqz","","",null,null],[5,"LAPACKE_chpcon","","",null,null],[5,"LAPACKE_zhpcon","","",null,null],[5,"LAPACKE_chpev","","",null,null],[5,"LAPACKE_zhpev","","",null,null],[5,"LAPACKE_chpevd","","",null,null],[5,"LAPACKE_zhpevd","","",null,null],[5,"LAPACKE_chpevx","","",null,null],[5,"LAPACKE_zhpevx","","",null,null],[5,"LAPACKE_chpgst","","",null,null],[5,"LAPACKE_zhpgst","","",null,null],[5,"LAPACKE_chpgv","","",null,null],[5,"LAPACKE_zhpgv","","",null,null],[5,"LAPACKE_chpgvd","","",null,null],[5,"LAPACKE_zhpgvd","","",null,null],[5,"LAPACKE_chpgvx","","",null,null],[5,"LAPACKE_zhpgvx","","",null,null],[5,"LAPACKE_chprfs","","",null,null],[5,"LAPACKE_zhprfs","","",null,null],[5,"LAPACKE_chpsv","","",null,null],[5,"LAPACKE_zhpsv","","",null,null],[5,"LAPACKE_chpsvx","","",null,null],[5,"LAPACKE_zhpsvx","","",null,null],[5,"LAPACKE_chptrd","","",null,null],[5,"LAPACKE_zhptrd","","",null,null],[5,"LAPACKE_chptrf","","",null,null],[5,"LAPACKE_zhptrf","","",null,null],[5,"LAPACKE_chptri","","",null,null],[5,"LAPACKE_zhptri","","",null,null],[5,"LAPACKE_chptrs","","",null,null],[5,"LAPACKE_zhptrs","","",null,null],[5,"LAPACKE_shsein","","",null,null],[5,"LAPACKE_dhsein","","",null,null],[5,"LAPACKE_chsein","","",null,null],[5,"LAPACKE_zhsein","","",null,null],[5,"LAPACKE_shseqr","","",null,null],[5,"LAPACKE_dhseqr","","",null,null],[5,"LAPACKE_chseqr","","",null,null],[5,"LAPACKE_zhseqr","","",null,null],[5,"LAPACKE_clacgv","","",null,null],[5,"LAPACKE_zlacgv","","",null,null],[5,"LAPACKE_slacn2","","",null,null],[5,"LAPACKE_dlacn2","","",null,null],[5,"LAPACKE_clacn2","","",null,null],[5,"LAPACKE_zlacn2","","",null,null],[5,"LAPACKE_slacpy","","",null,null],[5,"LAPACKE_dlacpy","","",null,null],[5,"LAPACKE_clacpy","","",null,null],[5,"LAPACKE_zlacpy","","",null,null],[5,"LAPACKE_clacp2","","",null,null],[5,"LAPACKE_zlacp2","","",null,null],[5,"LAPACKE_zlag2c","","",null,null],[5,"LAPACKE_slag2d","","",null,null],[5,"LAPACKE_dlag2s","","",null,null],[5,"LAPACKE_clag2z","","",null,null],[5,"LAPACKE_slagge","","",null,null],[5,"LAPACKE_dlagge","","",null,null],[5,"LAPACKE_clagge","","",null,null],[5,"LAPACKE_zlagge","","",null,null],[5,"LAPACKE_slamch","","",null,null],[5,"LAPACKE_dlamch","","",null,null],[5,"LAPACKE_slange","","",null,null],[5,"LAPACKE_dlange","","",null,null],[5,"LAPACKE_clange","","",null,null],[5,"LAPACKE_zlange","","",null,null],[5,"LAPACKE_clanhe","","",null,null],[5,"LAPACKE_zlanhe","","",null,null],[5,"LAPACKE_slansy","","",null,null],[5,"LAPACKE_dlansy","","",null,null],[5,"LAPACKE_clansy","","",null,null],[5,"LAPACKE_zlansy","","",null,null],[5,"LAPACKE_slantr","","",null,null],[5,"LAPACKE_dlantr","","",null,null],[5,"LAPACKE_clantr","","",null,null],[5,"LAPACKE_zlantr","","",null,null],[5,"LAPACKE_slarfb","","",null,null],[5,"LAPACKE_dlarfb","","",null,null],[5,"LAPACKE_clarfb","","",null,null],[5,"LAPACKE_zlarfb","","",null,null],[5,"LAPACKE_slarfg","","",null,null],[5,"LAPACKE_dlarfg","","",null,null],[5,"LAPACKE_clarfg","","",null,null],[5,"LAPACKE_zlarfg","","",null,null],[5,"LAPACKE_slarft","","",null,null],[5,"LAPACKE_dlarft","","",null,null],[5,"LAPACKE_clarft","","",null,null],[5,"LAPACKE_zlarft","","",null,null],[5,"LAPACKE_slarfx","","",null,null],[5,"LAPACKE_dlarfx","","",null,null],[5,"LAPACKE_clarfx","","",null,null],[5,"LAPACKE_zlarfx","","",null,null],[5,"LAPACKE_slarnv","","",null,null],[5,"LAPACKE_dlarnv","","",null,null],[5,"LAPACKE_clarnv","","",null,null],[5,"LAPACKE_zlarnv","","",null,null],[5,"LAPACKE_slascl","","",null,null],[5,"LAPACKE_dlascl","","",null,null],[5,"LAPACKE_clascl","","",null,null],[5,"LAPACKE_zlascl","","",null,null],[5,"LAPACKE_slaset","","",null,null],[5,"LAPACKE_dlaset","","",null,null],[5,"LAPACKE_claset","","",null,null],[5,"LAPACKE_zlaset","","",null,null],[5,"LAPACKE_slasrt","","",null,null],[5,"LAPACKE_dlasrt","","",null,null],[5,"LAPACKE_slaswp","","",null,null],[5,"LAPACKE_dlaswp","","",null,null],[5,"LAPACKE_claswp","","",null,null],[5,"LAPACKE_zlaswp","","",null,null],[5,"LAPACKE_slatms","","",null,null],[5,"LAPACKE_dlatms","","",null,null],[5,"LAPACKE_clatms","","",null,null],[5,"LAPACKE_zlatms","","",null,null],[5,"LAPACKE_slauum","","",null,null],[5,"LAPACKE_dlauum","","",null,null],[5,"LAPACKE_clauum","","",null,null],[5,"LAPACKE_zlauum","","",null,null],[5,"LAPACKE_sopgtr","","",null,null],[5,"LAPACKE_dopgtr","","",null,null],[5,"LAPACKE_sopmtr","","",null,null],[5,"LAPACKE_dopmtr","","",null,null],[5,"LAPACKE_sorgbr","","",null,null],[5,"LAPACKE_dorgbr","","",null,null],[5,"LAPACKE_sorghr","","",null,null],[5,"LAPACKE_dorghr","","",null,null],[5,"LAPACKE_sorglq","","",null,null],[5,"LAPACKE_dorglq","","",null,null],[5,"LAPACKE_sorgql","","",null,null],[5,"LAPACKE_dorgql","","",null,null],[5,"LAPACKE_sorgqr","","",null,null],[5,"LAPACKE_dorgqr","","",null,null],[5,"LAPACKE_sorgrq","","",null,null],[5,"LAPACKE_dorgrq","","",null,null],[5,"LAPACKE_sorgtr","","",null,null],[5,"LAPACKE_dorgtr","","",null,null],[5,"LAPACKE_sormbr","","",null,null],[5,"LAPACKE_dormbr","","",null,null],[5,"LAPACKE_sormhr","","",null,null],[5,"LAPACKE_dormhr","","",null,null],[5,"LAPACKE_sormlq","","",null,null],[5,"LAPACKE_dormlq","","",null,null],[5,"LAPACKE_sormql","","",null,null],[5,"LAPACKE_dormql","","",null,null],[5,"LAPACKE_sormqr","","",null,null],[5,"LAPACKE_dormqr","","",null,null],[5,"LAPACKE_sormrq","","",null,null],[5,"LAPACKE_dormrq","","",null,null],[5,"LAPACKE_sormrz","","",null,null],[5,"LAPACKE_dormrz","","",null,null],[5,"LAPACKE_sormtr","","",null,null],[5,"LAPACKE_dormtr","","",null,null],[5,"LAPACKE_spbcon","","",null,null],[5,"LAPACKE_dpbcon","","",null,null],[5,"LAPACKE_cpbcon","","",null,null],[5,"LAPACKE_zpbcon","","",null,null],[5,"LAPACKE_spbequ","","",null,null],[5,"LAPACKE_dpbequ","","",null,null],[5,"LAPACKE_cpbequ","","",null,null],[5,"LAPACKE_zpbequ","","",null,null],[5,"LAPACKE_spbrfs","","",null,null],[5,"LAPACKE_dpbrfs","","",null,null],[5,"LAPACKE_cpbrfs","","",null,null],[5,"LAPACKE_zpbrfs","","",null,null],[5,"LAPACKE_spbstf","","",null,null],[5,"LAPACKE_dpbstf","","",null,null],[5,"LAPACKE_cpbstf","","",null,null],[5,"LAPACKE_zpbstf","","",null,null],[5,"LAPACKE_spbsv","","",null,null],[5,"LAPACKE_dpbsv","","",null,null],[5,"LAPACKE_cpbsv","","",null,null],[5,"LAPACKE_zpbsv","","",null,null],[5,"LAPACKE_spbsvx","","",null,null],[5,"LAPACKE_dpbsvx","","",null,null],[5,"LAPACKE_cpbsvx","","",null,null],[5,"LAPACKE_zpbsvx","","",null,null],[5,"LAPACKE_spbtrf","","",null,null],[5,"LAPACKE_dpbtrf","","",null,null],[5,"LAPACKE_cpbtrf","","",null,null],[5,"LAPACKE_zpbtrf","","",null,null],[5,"LAPACKE_spbtrs","","",null,null],[5,"LAPACKE_dpbtrs","","",null,null],[5,"LAPACKE_cpbtrs","","",null,null],[5,"LAPACKE_zpbtrs","","",null,null],[5,"LAPACKE_spftrf","","",null,null],[5,"LAPACKE_dpftrf","","",null,null],[5,"LAPACKE_cpftrf","","",null,null],[5,"LAPACKE_zpftrf","","",null,null],[5,"LAPACKE_spftri","","",null,null],[5,"LAPACKE_dpftri","","",null,null],[5,"LAPACKE_cpftri","","",null,null],[5,"LAPACKE_zpftri","","",null,null],[5,"LAPACKE_spftrs","","",null,null],[5,"LAPACKE_dpftrs","","",null,null],[5,"LAPACKE_cpftrs","","",null,null],[5,"LAPACKE_zpftrs","","",null,null],[5,"LAPACKE_spocon","","",null,null],[5,"LAPACKE_dpocon","","",null,null],[5,"LAPACKE_cpocon","","",null,null],[5,"LAPACKE_zpocon","","",null,null],[5,"LAPACKE_spoequ","","",null,null],[5,"LAPACKE_dpoequ","","",null,null],[5,"LAPACKE_cpoequ","","",null,null],[5,"LAPACKE_zpoequ","","",null,null],[5,"LAPACKE_spoequb","","",null,null],[5,"LAPACKE_dpoequb","","",null,null],[5,"LAPACKE_cpoequb","","",null,null],[5,"LAPACKE_zpoequb","","",null,null],[5,"LAPACKE_sporfs","","",null,null],[5,"LAPACKE_dporfs","","",null,null],[5,"LAPACKE_cporfs","","",null,null],[5,"LAPACKE_zporfs","","",null,null],[5,"LAPACKE_sporfsx","","",null,null],[5,"LAPACKE_dporfsx","","",null,null],[5,"LAPACKE_cporfsx","","",null,null],[5,"LAPACKE_zporfsx","","",null,null],[5,"LAPACKE_sposv","","",null,null],[5,"LAPACKE_dposv","","",null,null],[5,"LAPACKE_cposv","","",null,null],[5,"LAPACKE_zposv","","",null,null],[5,"LAPACKE_dsposv","","",null,null],[5,"LAPACKE_zcposv","","",null,null],[5,"LAPACKE_sposvx","","",null,null],[5,"LAPACKE_dposvx","","",null,null],[5,"LAPACKE_cposvx","","",null,null],[5,"LAPACKE_zposvx","","",null,null],[5,"LAPACKE_sposvxx","","",null,null],[5,"LAPACKE_dposvxx","","",null,null],[5,"LAPACKE_cposvxx","","",null,null],[5,"LAPACKE_zposvxx","","",null,null],[5,"LAPACKE_spotrf2","","",null,null],[5,"LAPACKE_dpotrf2","","",null,null],[5,"LAPACKE_cpotrf2","","",null,null],[5,"LAPACKE_zpotrf2","","",null,null],[5,"LAPACKE_spotrf","","",null,null],[5,"LAPACKE_dpotrf","","",null,null],[5,"LAPACKE_cpotrf","","",null,null],[5,"LAPACKE_zpotrf","","",null,null],[5,"LAPACKE_spotri","","",null,null],[5,"LAPACKE_dpotri","","",null,null],[5,"LAPACKE_cpotri","","",null,null],[5,"LAPACKE_zpotri","","",null,null],[5,"LAPACKE_spotrs","","",null,null],[5,"LAPACKE_dpotrs","","",null,null],[5,"LAPACKE_cpotrs","","",null,null],[5,"LAPACKE_zpotrs","","",null,null],[5,"LAPACKE_sppcon","","",null,null],[5,"LAPACKE_dppcon","","",null,null],[5,"LAPACKE_cppcon","","",null,null],[5,"LAPACKE_zppcon","","",null,null],[5,"LAPACKE_sppequ","","",null,null],[5,"LAPACKE_dppequ","","",null,null],[5,"LAPACKE_cppequ","","",null,null],[5,"LAPACKE_zppequ","","",null,null],[5,"LAPACKE_spprfs","","",null,null],[5,"LAPACKE_dpprfs","","",null,null],[5,"LAPACKE_cpprfs","","",null,null],[5,"LAPACKE_zpprfs","","",null,null],[5,"LAPACKE_sppsv","","",null,null],[5,"LAPACKE_dppsv","","",null,null],[5,"LAPACKE_cppsv","","",null,null],[5,"LAPACKE_zppsv","","",null,null],[5,"LAPACKE_sppsvx","","",null,null],[5,"LAPACKE_dppsvx","","",null,null],[5,"LAPACKE_cppsvx","","",null,null],[5,"LAPACKE_zppsvx","","",null,null],[5,"LAPACKE_spptrf","","",null,null],[5,"LAPACKE_dpptrf","","",null,null],[5,"LAPACKE_cpptrf","","",null,null],[5,"LAPACKE_zpptrf","","",null,null],[5,"LAPACKE_spptri","","",null,null],[5,"LAPACKE_dpptri","","",null,null],[5,"LAPACKE_cpptri","","",null,null],[5,"LAPACKE_zpptri","","",null,null],[5,"LAPACKE_spptrs","","",null,null],[5,"LAPACKE_dpptrs","","",null,null],[5,"LAPACKE_cpptrs","","",null,null],[5,"LAPACKE_zpptrs","","",null,null],[5,"LAPACKE_spstrf","","",null,null],[5,"LAPACKE_dpstrf","","",null,null],[5,"LAPACKE_cpstrf","","",null,null],[5,"LAPACKE_zpstrf","","",null,null],[5,"LAPACKE_sptcon","","",null,null],[5,"LAPACKE_dptcon","","",null,null],[5,"LAPACKE_cptcon","","",null,null],[5,"LAPACKE_zptcon","","",null,null],[5,"LAPACKE_spteqr","","",null,null],[5,"LAPACKE_dpteqr","","",null,null],[5,"LAPACKE_cpteqr","","",null,null],[5,"LAPACKE_zpteqr","","",null,null],[5,"LAPACKE_sptrfs","","",null,null],[5,"LAPACKE_dptrfs","","",null,null],[5,"LAPACKE_cptrfs","","",null,null],[5,"LAPACKE_zptrfs","","",null,null],[5,"LAPACKE_sptsv","","",null,null],[5,"LAPACKE_dptsv","","",null,null],[5,"LAPACKE_cptsv","","",null,null],[5,"LAPACKE_zptsv","","",null,null],[5,"LAPACKE_sptsvx","","",null,null],[5,"LAPACKE_dptsvx","","",null,null],[5,"LAPACKE_cptsvx","","",null,null],[5,"LAPACKE_zptsvx","","",null,null],[5,"LAPACKE_spttrf","","",null,null],[5,"LAPACKE_dpttrf","","",null,null],[5,"LAPACKE_cpttrf","","",null,null],[5,"LAPACKE_zpttrf","","",null,null],[5,"LAPACKE_spttrs","","",null,null],[5,"LAPACKE_dpttrs","","",null,null],[5,"LAPACKE_cpttrs","","",null,null],[5,"LAPACKE_zpttrs","","",null,null],[5,"LAPACKE_ssbev","","",null,null],[5,"LAPACKE_dsbev","","",null,null],[5,"LAPACKE_ssbevd","","",null,null],[5,"LAPACKE_dsbevd","","",null,null],[5,"LAPACKE_ssbevx","","",null,null],[5,"LAPACKE_dsbevx","","",null,null],[5,"LAPACKE_ssbgst","","",null,null],[5,"LAPACKE_dsbgst","","",null,null],[5,"LAPACKE_ssbgv","","",null,null],[5,"LAPACKE_dsbgv","","",null,null],[5,"LAPACKE_ssbgvd","","",null,null],[5,"LAPACKE_dsbgvd","","",null,null],[5,"LAPACKE_ssbgvx","","",null,null],[5,"LAPACKE_dsbgvx","","",null,null],[5,"LAPACKE_ssbtrd","","",null,null],[5,"LAPACKE_dsbtrd","","",null,null],[5,"LAPACKE_ssfrk","","",null,null],[5,"LAPACKE_dsfrk","","",null,null],[5,"LAPACKE_sspcon","","",null,null],[5,"LAPACKE_dspcon","","",null,null],[5,"LAPACKE_cspcon","","",null,null],[5,"LAPACKE_zspcon","","",null,null],[5,"LAPACKE_sspev","","",null,null],[5,"LAPACKE_dspev","","",null,null],[5,"LAPACKE_sspevd","","",null,null],[5,"LAPACKE_dspevd","","",null,null],[5,"LAPACKE_sspevx","","",null,null],[5,"LAPACKE_dspevx","","",null,null],[5,"LAPACKE_sspgst","","",null,null],[5,"LAPACKE_dspgst","","",null,null],[5,"LAPACKE_sspgv","","",null,null],[5,"LAPACKE_dspgv","","",null,null],[5,"LAPACKE_sspgvd","","",null,null],[5,"LAPACKE_dspgvd","","",null,null],[5,"LAPACKE_sspgvx","","",null,null],[5,"LAPACKE_dspgvx","","",null,null],[5,"LAPACKE_ssprfs","","",null,null],[5,"LAPACKE_dsprfs","","",null,null],[5,"LAPACKE_csprfs","","",null,null],[5,"LAPACKE_zsprfs","","",null,null],[5,"LAPACKE_sspsv","","",null,null],[5,"LAPACKE_dspsv","","",null,null],[5,"LAPACKE_cspsv","","",null,null],[5,"LAPACKE_zspsv","","",null,null],[5,"LAPACKE_sspsvx","","",null,null],[5,"LAPACKE_dspsvx","","",null,null],[5,"LAPACKE_cspsvx","","",null,null],[5,"LAPACKE_zspsvx","","",null,null],[5,"LAPACKE_ssptrd","","",null,null],[5,"LAPACKE_dsptrd","","",null,null],[5,"LAPACKE_ssptrf","","",null,null],[5,"LAPACKE_dsptrf","","",null,null],[5,"LAPACKE_csptrf","","",null,null],[5,"LAPACKE_zsptrf","","",null,null],[5,"LAPACKE_ssptri","","",null,null],[5,"LAPACKE_dsptri","","",null,null],[5,"LAPACKE_csptri","","",null,null],[5,"LAPACKE_zsptri","","",null,null],[5,"LAPACKE_ssptrs","","",null,null],[5,"LAPACKE_dsptrs","","",null,null],[5,"LAPACKE_csptrs","","",null,null],[5,"LAPACKE_zsptrs","","",null,null],[5,"LAPACKE_sstebz","","",null,null],[5,"LAPACKE_dstebz","","",null,null],[5,"LAPACKE_sstedc","","",null,null],[5,"LAPACKE_dstedc","","",null,null],[5,"LAPACKE_cstedc","","",null,null],[5,"LAPACKE_zstedc","","",null,null],[5,"LAPACKE_sstegr","","",null,null],[5,"LAPACKE_dstegr","","",null,null],[5,"LAPACKE_cstegr","","",null,null],[5,"LAPACKE_zstegr","","",null,null],[5,"LAPACKE_sstein","","",null,null],[5,"LAPACKE_dstein","","",null,null],[5,"LAPACKE_cstein","","",null,null],[5,"LAPACKE_zstein","","",null,null],[5,"LAPACKE_sstemr","","",null,null],[5,"LAPACKE_dstemr","","",null,null],[5,"LAPACKE_cstemr","","",null,null],[5,"LAPACKE_zstemr","","",null,null],[5,"LAPACKE_ssteqr","","",null,null],[5,"LAPACKE_dsteqr","","",null,null],[5,"LAPACKE_csteqr","","",null,null],[5,"LAPACKE_zsteqr","","",null,null],[5,"LAPACKE_ssterf","","",null,null],[5,"LAPACKE_dsterf","","",null,null],[5,"LAPACKE_sstev","","",null,null],[5,"LAPACKE_dstev","","",null,null],[5,"LAPACKE_sstevd","","",null,null],[5,"LAPACKE_dstevd","","",null,null],[5,"LAPACKE_sstevr","","",null,null],[5,"LAPACKE_dstevr","","",null,null],[5,"LAPACKE_sstevx","","",null,null],[5,"LAPACKE_dstevx","","",null,null],[5,"LAPACKE_ssycon","","",null,null],[5,"LAPACKE_dsycon","","",null,null],[5,"LAPACKE_csycon","","",null,null],[5,"LAPACKE_zsycon","","",null,null],[5,"LAPACKE_ssyequb","","",null,null],[5,"LAPACKE_dsyequb","","",null,null],[5,"LAPACKE_csyequb","","",null,null],[5,"LAPACKE_zsyequb","","",null,null],[5,"LAPACKE_ssyev","","",null,null],[5,"LAPACKE_dsyev","","",null,null],[5,"LAPACKE_ssyevd","","",null,null],[5,"LAPACKE_dsyevd","","",null,null],[5,"LAPACKE_ssyevr","","",null,null],[5,"LAPACKE_dsyevr","","",null,null],[5,"LAPACKE_ssyevx","","",null,null],[5,"LAPACKE_dsyevx","","",null,null],[5,"LAPACKE_ssygst","","",null,null],[5,"LAPACKE_dsygst","","",null,null],[5,"LAPACKE_ssygv","","",null,null],[5,"LAPACKE_dsygv","","",null,null],[5,"LAPACKE_ssygvd","","",null,null],[5,"LAPACKE_dsygvd","","",null,null],[5,"LAPACKE_ssygvx","","",null,null],[5,"LAPACKE_dsygvx","","",null,null],[5,"LAPACKE_ssyrfs","","",null,null],[5,"LAPACKE_dsyrfs","","",null,null],[5,"LAPACKE_csyrfs","","",null,null],[5,"LAPACKE_zsyrfs","","",null,null],[5,"LAPACKE_ssyrfsx","","",null,null],[5,"LAPACKE_dsyrfsx","","",null,null],[5,"LAPACKE_csyrfsx","","",null,null],[5,"LAPACKE_zsyrfsx","","",null,null],[5,"LAPACKE_ssysv","","",null,null],[5,"LAPACKE_dsysv","","",null,null],[5,"LAPACKE_csysv","","",null,null],[5,"LAPACKE_zsysv","","",null,null],[5,"LAPACKE_ssysvx","","",null,null],[5,"LAPACKE_dsysvx","","",null,null],[5,"LAPACKE_csysvx","","",null,null],[5,"LAPACKE_zsysvx","","",null,null],[5,"LAPACKE_ssysvxx","","",null,null],[5,"LAPACKE_dsysvxx","","",null,null],[5,"LAPACKE_csysvxx","","",null,null],[5,"LAPACKE_zsysvxx","","",null,null],[5,"LAPACKE_ssytrd","","",null,null],[5,"LAPACKE_dsytrd","","",null,null],[5,"LAPACKE_ssytrf","","",null,null],[5,"LAPACKE_dsytrf","","",null,null],[5,"LAPACKE_csytrf","","",null,null],[5,"LAPACKE_zsytrf","","",null,null],[5,"LAPACKE_ssytri","","",null,null],[5,"LAPACKE_dsytri","","",null,null],[5,"LAPACKE_csytri","","",null,null],[5,"LAPACKE_zsytri","","",null,null],[5,"LAPACKE_ssytrs","","",null,null],[5,"LAPACKE_dsytrs","","",null,null],[5,"LAPACKE_csytrs","","",null,null],[5,"LAPACKE_zsytrs","","",null,null],[5,"LAPACKE_stbcon","","",null,null],[5,"LAPACKE_dtbcon","","",null,null],[5,"LAPACKE_ctbcon","","",null,null],[5,"LAPACKE_ztbcon","","",null,null],[5,"LAPACKE_stbrfs","","",null,null],[5,"LAPACKE_dtbrfs","","",null,null],[5,"LAPACKE_ctbrfs","","",null,null],[5,"LAPACKE_ztbrfs","","",null,null],[5,"LAPACKE_stbtrs","","",null,null],[5,"LAPACKE_dtbtrs","","",null,null],[5,"LAPACKE_ctbtrs","","",null,null],[5,"LAPACKE_ztbtrs","","",null,null],[5,"LAPACKE_stfsm","","",null,null],[5,"LAPACKE_dtfsm","","",null,null],[5,"LAPACKE_ctfsm","","",null,null],[5,"LAPACKE_ztfsm","","",null,null],[5,"LAPACKE_stftri","","",null,null],[5,"LAPACKE_dtftri","","",null,null],[5,"LAPACKE_ctftri","","",null,null],[5,"LAPACKE_ztftri","","",null,null],[5,"LAPACKE_stfttp","","",null,null],[5,"LAPACKE_dtfttp","","",null,null],[5,"LAPACKE_ctfttp","","",null,null],[5,"LAPACKE_ztfttp","","",null,null],[5,"LAPACKE_stfttr","","",null,null],[5,"LAPACKE_dtfttr","","",null,null],[5,"LAPACKE_ctfttr","","",null,null],[5,"LAPACKE_ztfttr","","",null,null],[5,"LAPACKE_stgevc","","",null,null],[5,"LAPACKE_dtgevc","","",null,null],[5,"LAPACKE_ctgevc","","",null,null],[5,"LAPACKE_ztgevc","","",null,null],[5,"LAPACKE_stgexc","","",null,null],[5,"LAPACKE_dtgexc","","",null,null],[5,"LAPACKE_ctgexc","","",null,null],[5,"LAPACKE_ztgexc","","",null,null],[5,"LAPACKE_stgsen","","",null,null],[5,"LAPACKE_dtgsen","","",null,null],[5,"LAPACKE_ctgsen","","",null,null],[5,"LAPACKE_ztgsen","","",null,null],[5,"LAPACKE_stgsja","","",null,null],[5,"LAPACKE_dtgsja","","",null,null],[5,"LAPACKE_ctgsja","","",null,null],[5,"LAPACKE_ztgsja","","",null,null],[5,"LAPACKE_stgsna","","",null,null],[5,"LAPACKE_dtgsna","","",null,null],[5,"LAPACKE_ctgsna","","",null,null],[5,"LAPACKE_ztgsna","","",null,null],[5,"LAPACKE_stgsyl","","",null,null],[5,"LAPACKE_dtgsyl","","",null,null],[5,"LAPACKE_ctgsyl","","",null,null],[5,"LAPACKE_ztgsyl","","",null,null],[5,"LAPACKE_stpcon","","",null,null],[5,"LAPACKE_dtpcon","","",null,null],[5,"LAPACKE_ctpcon","","",null,null],[5,"LAPACKE_ztpcon","","",null,null],[5,"LAPACKE_stprfs","","",null,null],[5,"LAPACKE_dtprfs","","",null,null],[5,"LAPACKE_ctprfs","","",null,null],[5,"LAPACKE_ztprfs","","",null,null],[5,"LAPACKE_stptri","","",null,null],[5,"LAPACKE_dtptri","","",null,null],[5,"LAPACKE_ctptri","","",null,null],[5,"LAPACKE_ztptri","","",null,null],[5,"LAPACKE_stptrs","","",null,null],[5,"LAPACKE_dtptrs","","",null,null],[5,"LAPACKE_ctptrs","","",null,null],[5,"LAPACKE_ztptrs","","",null,null],[5,"LAPACKE_stpttf","","",null,null],[5,"LAPACKE_dtpttf","","",null,null],[5,"LAPACKE_ctpttf","","",null,null],[5,"LAPACKE_ztpttf","","",null,null],[5,"LAPACKE_stpttr","","",null,null],[5,"LAPACKE_dtpttr","","",null,null],[5,"LAPACKE_ctpttr","","",null,null],[5,"LAPACKE_ztpttr","","",null,null],[5,"LAPACKE_strcon","","",null,null],[5,"LAPACKE_dtrcon","","",null,null],[5,"LAPACKE_ctrcon","","",null,null],[5,"LAPACKE_ztrcon","","",null,null],[5,"LAPACKE_strevc","","",null,null],[5,"LAPACKE_dtrevc","","",null,null],[5,"LAPACKE_ctrevc","","",null,null],[5,"LAPACKE_ztrevc","","",null,null],[5,"LAPACKE_strexc","","",null,null],[5,"LAPACKE_dtrexc","","",null,null],[5,"LAPACKE_ctrexc","","",null,null],[5,"LAPACKE_ztrexc","","",null,null],[5,"LAPACKE_strrfs","","",null,null],[5,"LAPACKE_dtrrfs","","",null,null],[5,"LAPACKE_ctrrfs","","",null,null],[5,"LAPACKE_ztrrfs","","",null,null],[5,"LAPACKE_strsen","","",null,null],[5,"LAPACKE_dtrsen","","",null,null],[5,"LAPACKE_ctrsen","","",null,null],[5,"LAPACKE_ztrsen","","",null,null],[5,"LAPACKE_strsna","","",null,null],[5,"LAPACKE_dtrsna","","",null,null],[5,"LAPACKE_ctrsna","","",null,null],[5,"LAPACKE_ztrsna","","",null,null],[5,"LAPACKE_strsyl","","",null,null],[5,"LAPACKE_dtrsyl","","",null,null],[5,"LAPACKE_ctrsyl","","",null,null],[5,"LAPACKE_ztrsyl","","",null,null],[5,"LAPACKE_strtri","","",null,null],[5,"LAPACKE_dtrtri","","",null,null],[5,"LAPACKE_ctrtri","","",null,null],[5,"LAPACKE_ztrtri","","",null,null],[5,"LAPACKE_strtrs","","",null,null],[5,"LAPACKE_dtrtrs","","",null,null],[5,"LAPACKE_ctrtrs","","",null,null],[5,"LAPACKE_ztrtrs","","",null,null],[5,"LAPACKE_strttf","","",null,null],[5,"LAPACKE_dtrttf","","",null,null],[5,"LAPACKE_ctrttf","","",null,null],[5,"LAPACKE_ztrttf","","",null,null],[5,"LAPACKE_strttp","","",null,null],[5,"LAPACKE_dtrttp","","",null,null],[5,"LAPACKE_ctrttp","","",null,null],[5,"LAPACKE_ztrttp","","",null,null],[5,"LAPACKE_stzrzf","","",null,null],[5,"LAPACKE_dtzrzf","","",null,null],[5,"LAPACKE_ctzrzf","","",null,null],[5,"LAPACKE_ztzrzf","","",null,null],[5,"LAPACKE_cungbr","","",null,null],[5,"LAPACKE_zungbr","","",null,null],[5,"LAPACKE_cunghr","","",null,null],[5,"LAPACKE_zunghr","","",null,null],[5,"LAPACKE_cunglq","","",null,null],[5,"LAPACKE_zunglq","","",null,null],[5,"LAPACKE_cungql","","",null,null],[5,"LAPACKE_zungql","","",null,null],[5,"LAPACKE_cungqr","","",null,null],[5,"LAPACKE_zungqr","","",null,null],[5,"LAPACKE_cungrq","","",null,null],[5,"LAPACKE_zungrq","","",null,null],[5,"LAPACKE_cungtr","","",null,null],[5,"LAPACKE_zungtr","","",null,null],[5,"LAPACKE_cunmbr","","",null,null],[5,"LAPACKE_zunmbr","","",null,null],[5,"LAPACKE_cunmhr","","",null,null],[5,"LAPACKE_zunmhr","","",null,null],[5,"LAPACKE_cunmlq","","",null,null],[5,"LAPACKE_zunmlq","","",null,null],[5,"LAPACKE_cunmql","","",null,null],[5,"LAPACKE_zunmql","","",null,null],[5,"LAPACKE_cunmqr","","",null,null],[5,"LAPACKE_zunmqr","","",null,null],[5,"LAPACKE_cunmrq","","",null,null],[5,"LAPACKE_zunmrq","","",null,null],[5,"LAPACKE_cunmrz","","",null,null],[5,"LAPACKE_zunmrz","","",null,null],[5,"LAPACKE_cunmtr","","",null,null],[5,"LAPACKE_zunmtr","","",null,null],[5,"LAPACKE_cupgtr","","",null,null],[5,"LAPACKE_zupgtr","","",null,null],[5,"LAPACKE_cupmtr","","",null,null],[5,"LAPACKE_zupmtr","","",null,null],[5,"LAPACKE_sbdsdc_work","","",null,null],[5,"LAPACKE_dbdsdc_work","","",null,null],[5,"LAPACKE_sbdsvdx_work","","",null,null],[5,"LAPACKE_dbdsvdx_work","","",null,null],[5,"LAPACKE_sbdsqr_work","","",null,null],[5,"LAPACKE_dbdsqr_work","","",null,null],[5,"LAPACKE_cbdsqr_work","","",null,null],[5,"LAPACKE_zbdsqr_work","","",null,null],[5,"LAPACKE_sdisna_work","","",null,null],[5,"LAPACKE_ddisna_work","","",null,null],[5,"LAPACKE_sgbbrd_work","","",null,null],[5,"LAPACKE_dgbbrd_work","","",null,null],[5,"LAPACKE_cgbbrd_work","","",null,null],[5,"LAPACKE_zgbbrd_work","","",null,null],[5,"LAPACKE_sgbcon_work","","",null,null],[5,"LAPACKE_dgbcon_work","","",null,null],[5,"LAPACKE_cgbcon_work","","",null,null],[5,"LAPACKE_zgbcon_work","","",null,null],[5,"LAPACKE_sgbequ_work","","",null,null],[5,"LAPACKE_dgbequ_work","","",null,null],[5,"LAPACKE_cgbequ_work","","",null,null],[5,"LAPACKE_zgbequ_work","","",null,null],[5,"LAPACKE_sgbequb_work","","",null,null],[5,"LAPACKE_dgbequb_work","","",null,null],[5,"LAPACKE_cgbequb_work","","",null,null],[5,"LAPACKE_zgbequb_work","","",null,null],[5,"LAPACKE_sgbrfs_work","","",null,null],[5,"LAPACKE_dgbrfs_work","","",null,null],[5,"LAPACKE_cgbrfs_work","","",null,null],[5,"LAPACKE_zgbrfs_work","","",null,null],[5,"LAPACKE_sgbrfsx_work","","",null,null],[5,"LAPACKE_dgbrfsx_work","","",null,null],[5,"LAPACKE_cgbrfsx_work","","",null,null],[5,"LAPACKE_zgbrfsx_work","","",null,null],[5,"LAPACKE_sgbsv_work","","",null,null],[5,"LAPACKE_dgbsv_work","","",null,null],[5,"LAPACKE_cgbsv_work","","",null,null],[5,"LAPACKE_zgbsv_work","","",null,null],[5,"LAPACKE_sgbsvx_work","","",null,null],[5,"LAPACKE_dgbsvx_work","","",null,null],[5,"LAPACKE_cgbsvx_work","","",null,null],[5,"LAPACKE_zgbsvx_work","","",null,null],[5,"LAPACKE_sgbsvxx_work","","",null,null],[5,"LAPACKE_dgbsvxx_work","","",null,null],[5,"LAPACKE_cgbsvxx_work","","",null,null],[5,"LAPACKE_zgbsvxx_work","","",null,null],[5,"LAPACKE_sgbtrf_work","","",null,null],[5,"LAPACKE_dgbtrf_work","","",null,null],[5,"LAPACKE_cgbtrf_work","","",null,null],[5,"LAPACKE_zgbtrf_work","","",null,null],[5,"LAPACKE_sgbtrs_work","","",null,null],[5,"LAPACKE_dgbtrs_work","","",null,null],[5,"LAPACKE_cgbtrs_work","","",null,null],[5,"LAPACKE_zgbtrs_work","","",null,null],[5,"LAPACKE_sgebak_work","","",null,null],[5,"LAPACKE_dgebak_work","","",null,null],[5,"LAPACKE_cgebak_work","","",null,null],[5,"LAPACKE_zgebak_work","","",null,null],[5,"LAPACKE_sgebal_work","","",null,null],[5,"LAPACKE_dgebal_work","","",null,null],[5,"LAPACKE_cgebal_work","","",null,null],[5,"LAPACKE_zgebal_work","","",null,null],[5,"LAPACKE_sgebrd_work","","",null,null],[5,"LAPACKE_dgebrd_work","","",null,null],[5,"LAPACKE_cgebrd_work","","",null,null],[5,"LAPACKE_zgebrd_work","","",null,null],[5,"LAPACKE_sgecon_work","","",null,null],[5,"LAPACKE_dgecon_work","","",null,null],[5,"LAPACKE_cgecon_work","","",null,null],[5,"LAPACKE_zgecon_work","","",null,null],[5,"LAPACKE_sgeequ_work","","",null,null],[5,"LAPACKE_dgeequ_work","","",null,null],[5,"LAPACKE_cgeequ_work","","",null,null],[5,"LAPACKE_zgeequ_work","","",null,null],[5,"LAPACKE_sgeequb_work","","",null,null],[5,"LAPACKE_dgeequb_work","","",null,null],[5,"LAPACKE_cgeequb_work","","",null,null],[5,"LAPACKE_zgeequb_work","","",null,null],[5,"LAPACKE_sgees_work","","",null,null],[5,"LAPACKE_dgees_work","","",null,null],[5,"LAPACKE_cgees_work","","",null,null],[5,"LAPACKE_zgees_work","","",null,null],[5,"LAPACKE_sgeesx_work","","",null,null],[5,"LAPACKE_dgeesx_work","","",null,null],[5,"LAPACKE_cgeesx_work","","",null,null],[5,"LAPACKE_zgeesx_work","","",null,null],[5,"LAPACKE_sgeev_work","","",null,null],[5,"LAPACKE_dgeev_work","","",null,null],[5,"LAPACKE_cgeev_work","","",null,null],[5,"LAPACKE_zgeev_work","","",null,null],[5,"LAPACKE_sgeevx_work","","",null,null],[5,"LAPACKE_dgeevx_work","","",null,null],[5,"LAPACKE_cgeevx_work","","",null,null],[5,"LAPACKE_zgeevx_work","","",null,null],[5,"LAPACKE_sgehrd_work","","",null,null],[5,"LAPACKE_dgehrd_work","","",null,null],[5,"LAPACKE_cgehrd_work","","",null,null],[5,"LAPACKE_zgehrd_work","","",null,null],[5,"LAPACKE_sgejsv_work","","",null,null],[5,"LAPACKE_dgejsv_work","","",null,null],[5,"LAPACKE_cgejsv_work","","",null,null],[5,"LAPACKE_zgejsv_work","","",null,null],[5,"LAPACKE_sgelq2_work","","",null,null],[5,"LAPACKE_dgelq2_work","","",null,null],[5,"LAPACKE_cgelq2_work","","",null,null],[5,"LAPACKE_zgelq2_work","","",null,null],[5,"LAPACKE_sgelqf_work","","",null,null],[5,"LAPACKE_dgelqf_work","","",null,null],[5,"LAPACKE_cgelqf_work","","",null,null],[5,"LAPACKE_zgelqf_work","","",null,null],[5,"LAPACKE_sgels_work","","",null,null],[5,"LAPACKE_dgels_work","","",null,null],[5,"LAPACKE_cgels_work","","",null,null],[5,"LAPACKE_zgels_work","","",null,null],[5,"LAPACKE_sgelsd_work","","",null,null],[5,"LAPACKE_dgelsd_work","","",null,null],[5,"LAPACKE_cgelsd_work","","",null,null],[5,"LAPACKE_zgelsd_work","","",null,null],[5,"LAPACKE_sgelss_work","","",null,null],[5,"LAPACKE_dgelss_work","","",null,null],[5,"LAPACKE_cgelss_work","","",null,null],[5,"LAPACKE_zgelss_work","","",null,null],[5,"LAPACKE_sgelsy_work","","",null,null],[5,"LAPACKE_dgelsy_work","","",null,null],[5,"LAPACKE_cgelsy_work","","",null,null],[5,"LAPACKE_zgelsy_work","","",null,null],[5,"LAPACKE_sgeqlf_work","","",null,null],[5,"LAPACKE_dgeqlf_work","","",null,null],[5,"LAPACKE_cgeqlf_work","","",null,null],[5,"LAPACKE_zgeqlf_work","","",null,null],[5,"LAPACKE_sgeqp3_work","","",null,null],[5,"LAPACKE_dgeqp3_work","","",null,null],[5,"LAPACKE_cgeqp3_work","","",null,null],[5,"LAPACKE_zgeqp3_work","","",null,null],[5,"LAPACKE_sgeqpf_work","","",null,null],[5,"LAPACKE_dgeqpf_work","","",null,null],[5,"LAPACKE_cgeqpf_work","","",null,null],[5,"LAPACKE_zgeqpf_work","","",null,null],[5,"LAPACKE_sgeqr2_work","","",null,null],[5,"LAPACKE_dgeqr2_work","","",null,null],[5,"LAPACKE_cgeqr2_work","","",null,null],[5,"LAPACKE_zgeqr2_work","","",null,null],[5,"LAPACKE_sgeqrf_work","","",null,null],[5,"LAPACKE_dgeqrf_work","","",null,null],[5,"LAPACKE_cgeqrf_work","","",null,null],[5,"LAPACKE_zgeqrf_work","","",null,null],[5,"LAPACKE_sgeqrfp_work","","",null,null],[5,"LAPACKE_dgeqrfp_work","","",null,null],[5,"LAPACKE_cgeqrfp_work","","",null,null],[5,"LAPACKE_zgeqrfp_work","","",null,null],[5,"LAPACKE_sgerfs_work","","",null,null],[5,"LAPACKE_dgerfs_work","","",null,null],[5,"LAPACKE_cgerfs_work","","",null,null],[5,"LAPACKE_zgerfs_work","","",null,null],[5,"LAPACKE_sgerfsx_work","","",null,null],[5,"LAPACKE_dgerfsx_work","","",null,null],[5,"LAPACKE_cgerfsx_work","","",null,null],[5,"LAPACKE_zgerfsx_work","","",null,null],[5,"LAPACKE_sgerqf_work","","",null,null],[5,"LAPACKE_dgerqf_work","","",null,null],[5,"LAPACKE_cgerqf_work","","",null,null],[5,"LAPACKE_zgerqf_work","","",null,null],[5,"LAPACKE_sgesdd_work","","",null,null],[5,"LAPACKE_dgesdd_work","","",null,null],[5,"LAPACKE_cgesdd_work","","",null,null],[5,"LAPACKE_zgesdd_work","","",null,null],[5,"LAPACKE_sgesv_work","","",null,null],[5,"LAPACKE_dgesv_work","","",null,null],[5,"LAPACKE_cgesv_work","","",null,null],[5,"LAPACKE_zgesv_work","","",null,null],[5,"LAPACKE_dsgesv_work","","",null,null],[5,"LAPACKE_zcgesv_work","","",null,null],[5,"LAPACKE_sgesvd_work","","",null,null],[5,"LAPACKE_dgesvd_work","","",null,null],[5,"LAPACKE_cgesvd_work","","",null,null],[5,"LAPACKE_zgesvd_work","","",null,null],[5,"LAPACKE_sgesvdx_work","","",null,null],[5,"LAPACKE_dgesvdx_work","","",null,null],[5,"LAPACKE_cgesvdx_work","","",null,null],[5,"LAPACKE_zgesvdx_work","","",null,null],[5,"LAPACKE_sgesvj_work","","",null,null],[5,"LAPACKE_dgesvj_work","","",null,null],[5,"LAPACKE_cgesvj_work","","",null,null],[5,"LAPACKE_zgesvj_work","","",null,null],[5,"LAPACKE_sgesvx_work","","",null,null],[5,"LAPACKE_dgesvx_work","","",null,null],[5,"LAPACKE_cgesvx_work","","",null,null],[5,"LAPACKE_zgesvx_work","","",null,null],[5,"LAPACKE_sgesvxx_work","","",null,null],[5,"LAPACKE_dgesvxx_work","","",null,null],[5,"LAPACKE_cgesvxx_work","","",null,null],[5,"LAPACKE_zgesvxx_work","","",null,null],[5,"LAPACKE_sgetf2_work","","",null,null],[5,"LAPACKE_dgetf2_work","","",null,null],[5,"LAPACKE_cgetf2_work","","",null,null],[5,"LAPACKE_zgetf2_work","","",null,null],[5,"LAPACKE_sgetrf_work","","",null,null],[5,"LAPACKE_dgetrf_work","","",null,null],[5,"LAPACKE_cgetrf_work","","",null,null],[5,"LAPACKE_zgetrf_work","","",null,null],[5,"LAPACKE_sgetrf2_work","","",null,null],[5,"LAPACKE_dgetrf2_work","","",null,null],[5,"LAPACKE_cgetrf2_work","","",null,null],[5,"LAPACKE_zgetrf2_work","","",null,null],[5,"LAPACKE_sgetri_work","","",null,null],[5,"LAPACKE_dgetri_work","","",null,null],[5,"LAPACKE_cgetri_work","","",null,null],[5,"LAPACKE_zgetri_work","","",null,null],[5,"LAPACKE_sgetrs_work","","",null,null],[5,"LAPACKE_dgetrs_work","","",null,null],[5,"LAPACKE_cgetrs_work","","",null,null],[5,"LAPACKE_zgetrs_work","","",null,null],[5,"LAPACKE_sggbak_work","","",null,null],[5,"LAPACKE_dggbak_work","","",null,null],[5,"LAPACKE_cggbak_work","","",null,null],[5,"LAPACKE_zggbak_work","","",null,null],[5,"LAPACKE_sggbal_work","","",null,null],[5,"LAPACKE_dggbal_work","","",null,null],[5,"LAPACKE_cggbal_work","","",null,null],[5,"LAPACKE_zggbal_work","","",null,null],[5,"LAPACKE_sgges_work","","",null,null],[5,"LAPACKE_dgges_work","","",null,null],[5,"LAPACKE_cgges_work","","",null,null],[5,"LAPACKE_zgges_work","","",null,null],[5,"LAPACKE_sgges3_work","","",null,null],[5,"LAPACKE_dgges3_work","","",null,null],[5,"LAPACKE_cgges3_work","","",null,null],[5,"LAPACKE_zgges3_work","","",null,null],[5,"LAPACKE_sggesx_work","","",null,null],[5,"LAPACKE_dggesx_work","","",null,null],[5,"LAPACKE_cggesx_work","","",null,null],[5,"LAPACKE_zggesx_work","","",null,null],[5,"LAPACKE_sggev_work","","",null,null],[5,"LAPACKE_dggev_work","","",null,null],[5,"LAPACKE_cggev_work","","",null,null],[5,"LAPACKE_zggev_work","","",null,null],[5,"LAPACKE_sggev3_work","","",null,null],[5,"LAPACKE_dggev3_work","","",null,null],[5,"LAPACKE_cggev3_work","","",null,null],[5,"LAPACKE_zggev3_work","","",null,null],[5,"LAPACKE_sggevx_work","","",null,null],[5,"LAPACKE_dggevx_work","","",null,null],[5,"LAPACKE_cggevx_work","","",null,null],[5,"LAPACKE_zggevx_work","","",null,null],[5,"LAPACKE_sggglm_work","","",null,null],[5,"LAPACKE_dggglm_work","","",null,null],[5,"LAPACKE_cggglm_work","","",null,null],[5,"LAPACKE_zggglm_work","","",null,null],[5,"LAPACKE_sgghrd_work","","",null,null],[5,"LAPACKE_dgghrd_work","","",null,null],[5,"LAPACKE_cgghrd_work","","",null,null],[5,"LAPACKE_zgghrd_work","","",null,null],[5,"LAPACKE_sgghd3_work","","",null,null],[5,"LAPACKE_dgghd3_work","","",null,null],[5,"LAPACKE_cgghd3_work","","",null,null],[5,"LAPACKE_zgghd3_work","","",null,null],[5,"LAPACKE_sgglse_work","","",null,null],[5,"LAPACKE_dgglse_work","","",null,null],[5,"LAPACKE_cgglse_work","","",null,null],[5,"LAPACKE_zgglse_work","","",null,null],[5,"LAPACKE_sggqrf_work","","",null,null],[5,"LAPACKE_dggqrf_work","","",null,null],[5,"LAPACKE_cggqrf_work","","",null,null],[5,"LAPACKE_zggqrf_work","","",null,null],[5,"LAPACKE_sggrqf_work","","",null,null],[5,"LAPACKE_dggrqf_work","","",null,null],[5,"LAPACKE_cggrqf_work","","",null,null],[5,"LAPACKE_zggrqf_work","","",null,null],[5,"LAPACKE_sggsvd_work","","",null,null],[5,"LAPACKE_dggsvd_work","","",null,null],[5,"LAPACKE_cggsvd_work","","",null,null],[5,"LAPACKE_zggsvd_work","","",null,null],[5,"LAPACKE_sggsvd3_work","","",null,null],[5,"LAPACKE_dggsvd3_work","","",null,null],[5,"LAPACKE_cggsvd3_work","","",null,null],[5,"LAPACKE_zggsvd3_work","","",null,null],[5,"LAPACKE_sggsvp_work","","",null,null],[5,"LAPACKE_dggsvp_work","","",null,null],[5,"LAPACKE_cggsvp_work","","",null,null],[5,"LAPACKE_zggsvp_work","","",null,null],[5,"LAPACKE_sggsvp3_work","","",null,null],[5,"LAPACKE_dggsvp3_work","","",null,null],[5,"LAPACKE_cggsvp3_work","","",null,null],[5,"LAPACKE_zggsvp3_work","","",null,null],[5,"LAPACKE_sgtcon_work","","",null,null],[5,"LAPACKE_dgtcon_work","","",null,null],[5,"LAPACKE_cgtcon_work","","",null,null],[5,"LAPACKE_zgtcon_work","","",null,null],[5,"LAPACKE_sgtrfs_work","","",null,null],[5,"LAPACKE_dgtrfs_work","","",null,null],[5,"LAPACKE_cgtrfs_work","","",null,null],[5,"LAPACKE_zgtrfs_work","","",null,null],[5,"LAPACKE_sgtsv_work","","",null,null],[5,"LAPACKE_dgtsv_work","","",null,null],[5,"LAPACKE_cgtsv_work","","",null,null],[5,"LAPACKE_zgtsv_work","","",null,null],[5,"LAPACKE_sgtsvx_work","","",null,null],[5,"LAPACKE_dgtsvx_work","","",null,null],[5,"LAPACKE_cgtsvx_work","","",null,null],[5,"LAPACKE_zgtsvx_work","","",null,null],[5,"LAPACKE_sgttrf_work","","",null,null],[5,"LAPACKE_dgttrf_work","","",null,null],[5,"LAPACKE_cgttrf_work","","",null,null],[5,"LAPACKE_zgttrf_work","","",null,null],[5,"LAPACKE_sgttrs_work","","",null,null],[5,"LAPACKE_dgttrs_work","","",null,null],[5,"LAPACKE_cgttrs_work","","",null,null],[5,"LAPACKE_zgttrs_work","","",null,null],[5,"LAPACKE_chbev_work","","",null,null],[5,"LAPACKE_zhbev_work","","",null,null],[5,"LAPACKE_chbevd_work","","",null,null],[5,"LAPACKE_zhbevd_work","","",null,null],[5,"LAPACKE_chbevx_work","","",null,null],[5,"LAPACKE_zhbevx_work","","",null,null],[5,"LAPACKE_chbgst_work","","",null,null],[5,"LAPACKE_zhbgst_work","","",null,null],[5,"LAPACKE_chbgv_work","","",null,null],[5,"LAPACKE_zhbgv_work","","",null,null],[5,"LAPACKE_chbgvd_work","","",null,null],[5,"LAPACKE_zhbgvd_work","","",null,null],[5,"LAPACKE_chbgvx_work","","",null,null],[5,"LAPACKE_zhbgvx_work","","",null,null],[5,"LAPACKE_chbtrd_work","","",null,null],[5,"LAPACKE_zhbtrd_work","","",null,null],[5,"LAPACKE_checon_work","","",null,null],[5,"LAPACKE_zhecon_work","","",null,null],[5,"LAPACKE_cheequb_work","","",null,null],[5,"LAPACKE_zheequb_work","","",null,null],[5,"LAPACKE_cheev_work","","",null,null],[5,"LAPACKE_zheev_work","","",null,null],[5,"LAPACKE_cheevd_work","","",null,null],[5,"LAPACKE_zheevd_work","","",null,null],[5,"LAPACKE_cheevr_work","","",null,null],[5,"LAPACKE_zheevr_work","","",null,null],[5,"LAPACKE_cheevx_work","","",null,null],[5,"LAPACKE_zheevx_work","","",null,null],[5,"LAPACKE_chegst_work","","",null,null],[5,"LAPACKE_zhegst_work","","",null,null],[5,"LAPACKE_chegv_work","","",null,null],[5,"LAPACKE_zhegv_work","","",null,null],[5,"LAPACKE_chegvd_work","","",null,null],[5,"LAPACKE_zhegvd_work","","",null,null],[5,"LAPACKE_chegvx_work","","",null,null],[5,"LAPACKE_zhegvx_work","","",null,null],[5,"LAPACKE_cherfs_work","","",null,null],[5,"LAPACKE_zherfs_work","","",null,null],[5,"LAPACKE_cherfsx_work","","",null,null],[5,"LAPACKE_zherfsx_work","","",null,null],[5,"LAPACKE_chesv_work","","",null,null],[5,"LAPACKE_zhesv_work","","",null,null],[5,"LAPACKE_chesvx_work","","",null,null],[5,"LAPACKE_zhesvx_work","","",null,null],[5,"LAPACKE_chesvxx_work","","",null,null],[5,"LAPACKE_zhesvxx_work","","",null,null],[5,"LAPACKE_chetrd_work","","",null,null],[5,"LAPACKE_zhetrd_work","","",null,null],[5,"LAPACKE_chetrf_work","","",null,null],[5,"LAPACKE_zhetrf_work","","",null,null],[5,"LAPACKE_chetri_work","","",null,null],[5,"LAPACKE_zhetri_work","","",null,null],[5,"LAPACKE_chetrs_work","","",null,null],[5,"LAPACKE_zhetrs_work","","",null,null],[5,"LAPACKE_chfrk_work","","",null,null],[5,"LAPACKE_zhfrk_work","","",null,null],[5,"LAPACKE_shgeqz_work","","",null,null],[5,"LAPACKE_dhgeqz_work","","",null,null],[5,"LAPACKE_chgeqz_work","","",null,null],[5,"LAPACKE_zhgeqz_work","","",null,null],[5,"LAPACKE_chpcon_work","","",null,null],[5,"LAPACKE_zhpcon_work","","",null,null],[5,"LAPACKE_chpev_work","","",null,null],[5,"LAPACKE_zhpev_work","","",null,null],[5,"LAPACKE_chpevd_work","","",null,null],[5,"LAPACKE_zhpevd_work","","",null,null],[5,"LAPACKE_chpevx_work","","",null,null],[5,"LAPACKE_zhpevx_work","","",null,null],[5,"LAPACKE_chpgst_work","","",null,null],[5,"LAPACKE_zhpgst_work","","",null,null],[5,"LAPACKE_chpgv_work","","",null,null],[5,"LAPACKE_zhpgv_work","","",null,null],[5,"LAPACKE_chpgvd_work","","",null,null],[5,"LAPACKE_zhpgvd_work","","",null,null],[5,"LAPACKE_chpgvx_work","","",null,null],[5,"LAPACKE_zhpgvx_work","","",null,null],[5,"LAPACKE_chprfs_work","","",null,null],[5,"LAPACKE_zhprfs_work","","",null,null],[5,"LAPACKE_chpsv_work","","",null,null],[5,"LAPACKE_zhpsv_work","","",null,null],[5,"LAPACKE_chpsvx_work","","",null,null],[5,"LAPACKE_zhpsvx_work","","",null,null],[5,"LAPACKE_chptrd_work","","",null,null],[5,"LAPACKE_zhptrd_work","","",null,null],[5,"LAPACKE_chptrf_work","","",null,null],[5,"LAPACKE_zhptrf_work","","",null,null],[5,"LAPACKE_chptri_work","","",null,null],[5,"LAPACKE_zhptri_work","","",null,null],[5,"LAPACKE_chptrs_work","","",null,null],[5,"LAPACKE_zhptrs_work","","",null,null],[5,"LAPACKE_shsein_work","","",null,null],[5,"LAPACKE_dhsein_work","","",null,null],[5,"LAPACKE_chsein_work","","",null,null],[5,"LAPACKE_zhsein_work","","",null,null],[5,"LAPACKE_shseqr_work","","",null,null],[5,"LAPACKE_dhseqr_work","","",null,null],[5,"LAPACKE_chseqr_work","","",null,null],[5,"LAPACKE_zhseqr_work","","",null,null],[5,"LAPACKE_clacgv_work","","",null,null],[5,"LAPACKE_zlacgv_work","","",null,null],[5,"LAPACKE_slacn2_work","","",null,null],[5,"LAPACKE_dlacn2_work","","",null,null],[5,"LAPACKE_clacn2_work","","",null,null],[5,"LAPACKE_zlacn2_work","","",null,null],[5,"LAPACKE_slacpy_work","","",null,null],[5,"LAPACKE_dlacpy_work","","",null,null],[5,"LAPACKE_clacpy_work","","",null,null],[5,"LAPACKE_zlacpy_work","","",null,null],[5,"LAPACKE_clacp2_work","","",null,null],[5,"LAPACKE_zlacp2_work","","",null,null],[5,"LAPACKE_zlag2c_work","","",null,null],[5,"LAPACKE_slag2d_work","","",null,null],[5,"LAPACKE_dlag2s_work","","",null,null],[5,"LAPACKE_clag2z_work","","",null,null],[5,"LAPACKE_slagge_work","","",null,null],[5,"LAPACKE_dlagge_work","","",null,null],[5,"LAPACKE_clagge_work","","",null,null],[5,"LAPACKE_zlagge_work","","",null,null],[5,"LAPACKE_claghe_work","","",null,null],[5,"LAPACKE_zlaghe_work","","",null,null],[5,"LAPACKE_slagsy_work","","",null,null],[5,"LAPACKE_dlagsy_work","","",null,null],[5,"LAPACKE_clagsy_work","","",null,null],[5,"LAPACKE_zlagsy_work","","",null,null],[5,"LAPACKE_slapmr_work","","",null,null],[5,"LAPACKE_dlapmr_work","","",null,null],[5,"LAPACKE_clapmr_work","","",null,null],[5,"LAPACKE_zlapmr_work","","",null,null],[5,"LAPACKE_slapmt_work","","",null,null],[5,"LAPACKE_dlapmt_work","","",null,null],[5,"LAPACKE_clapmt_work","","",null,null],[5,"LAPACKE_zlapmt_work","","",null,null],[5,"LAPACKE_slartgp_work","","",null,null],[5,"LAPACKE_dlartgp_work","","",null,null],[5,"LAPACKE_slartgs_work","","",null,null],[5,"LAPACKE_dlartgs_work","","",null,null],[5,"LAPACKE_slapy2_work","","",null,null],[5,"LAPACKE_dlapy2_work","","",null,null],[5,"LAPACKE_slapy3_work","","",null,null],[5,"LAPACKE_dlapy3_work","","",null,null],[5,"LAPACKE_slamch_work","","",null,null],[5,"LAPACKE_dlamch_work","","",null,null],[5,"LAPACKE_slange_work","","",null,null],[5,"LAPACKE_dlange_work","","",null,null],[5,"LAPACKE_clange_work","","",null,null],[5,"LAPACKE_zlange_work","","",null,null],[5,"LAPACKE_clanhe_work","","",null,null],[5,"LAPACKE_zlanhe_work","","",null,null],[5,"LAPACKE_slansy_work","","",null,null],[5,"LAPACKE_dlansy_work","","",null,null],[5,"LAPACKE_clansy_work","","",null,null],[5,"LAPACKE_zlansy_work","","",null,null],[5,"LAPACKE_slantr_work","","",null,null],[5,"LAPACKE_dlantr_work","","",null,null],[5,"LAPACKE_clantr_work","","",null,null],[5,"LAPACKE_zlantr_work","","",null,null],[5,"LAPACKE_slarfb_work","","",null,null],[5,"LAPACKE_dlarfb_work","","",null,null],[5,"LAPACKE_clarfb_work","","",null,null],[5,"LAPACKE_zlarfb_work","","",null,null],[5,"LAPACKE_slarfg_work","","",null,null],[5,"LAPACKE_dlarfg_work","","",null,null],[5,"LAPACKE_clarfg_work","","",null,null],[5,"LAPACKE_zlarfg_work","","",null,null],[5,"LAPACKE_slarft_work","","",null,null],[5,"LAPACKE_dlarft_work","","",null,null],[5,"LAPACKE_clarft_work","","",null,null],[5,"LAPACKE_zlarft_work","","",null,null],[5,"LAPACKE_slarfx_work","","",null,null],[5,"LAPACKE_dlarfx_work","","",null,null],[5,"LAPACKE_clarfx_work","","",null,null],[5,"LAPACKE_zlarfx_work","","",null,null],[5,"LAPACKE_slarnv_work","","",null,null],[5,"LAPACKE_dlarnv_work","","",null,null],[5,"LAPACKE_clarnv_work","","",null,null],[5,"LAPACKE_zlarnv_work","","",null,null],[5,"LAPACKE_slascl_work","","",null,null],[5,"LAPACKE_dlascl_work","","",null,null],[5,"LAPACKE_clascl_work","","",null,null],[5,"LAPACKE_zlascl_work","","",null,null],[5,"LAPACKE_slaset_work","","",null,null],[5,"LAPACKE_dlaset_work","","",null,null],[5,"LAPACKE_claset_work","","",null,null],[5,"LAPACKE_zlaset_work","","",null,null],[5,"LAPACKE_slasrt_work","","",null,null],[5,"LAPACKE_dlasrt_work","","",null,null],[5,"LAPACKE_slaswp_work","","",null,null],[5,"LAPACKE_dlaswp_work","","",null,null],[5,"LAPACKE_claswp_work","","",null,null],[5,"LAPACKE_zlaswp_work","","",null,null],[5,"LAPACKE_slatms_work","","",null,null],[5,"LAPACKE_dlatms_work","","",null,null],[5,"LAPACKE_clatms_work","","",null,null],[5,"LAPACKE_zlatms_work","","",null,null],[5,"LAPACKE_slauum_work","","",null,null],[5,"LAPACKE_dlauum_work","","",null,null],[5,"LAPACKE_clauum_work","","",null,null],[5,"LAPACKE_zlauum_work","","",null,null],[5,"LAPACKE_sopgtr_work","","",null,null],[5,"LAPACKE_dopgtr_work","","",null,null],[5,"LAPACKE_sopmtr_work","","",null,null],[5,"LAPACKE_dopmtr_work","","",null,null],[5,"LAPACKE_sorgbr_work","","",null,null],[5,"LAPACKE_dorgbr_work","","",null,null],[5,"LAPACKE_sorghr_work","","",null,null],[5,"LAPACKE_dorghr_work","","",null,null],[5,"LAPACKE_sorglq_work","","",null,null],[5,"LAPACKE_dorglq_work","","",null,null],[5,"LAPACKE_sorgql_work","","",null,null],[5,"LAPACKE_dorgql_work","","",null,null],[5,"LAPACKE_sorgqr_work","","",null,null],[5,"LAPACKE_dorgqr_work","","",null,null],[5,"LAPACKE_sorgrq_work","","",null,null],[5,"LAPACKE_dorgrq_work","","",null,null],[5,"LAPACKE_sorgtr_work","","",null,null],[5,"LAPACKE_dorgtr_work","","",null,null],[5,"LAPACKE_sormbr_work","","",null,null],[5,"LAPACKE_dormbr_work","","",null,null],[5,"LAPACKE_sormhr_work","","",null,null],[5,"LAPACKE_dormhr_work","","",null,null],[5,"LAPACKE_sormlq_work","","",null,null],[5,"LAPACKE_dormlq_work","","",null,null],[5,"LAPACKE_sormql_work","","",null,null],[5,"LAPACKE_dormql_work","","",null,null],[5,"LAPACKE_sormqr_work","","",null,null],[5,"LAPACKE_dormqr_work","","",null,null],[5,"LAPACKE_sormrq_work","","",null,null],[5,"LAPACKE_dormrq_work","","",null,null],[5,"LAPACKE_sormrz_work","","",null,null],[5,"LAPACKE_dormrz_work","","",null,null],[5,"LAPACKE_sormtr_work","","",null,null],[5,"LAPACKE_dormtr_work","","",null,null],[5,"LAPACKE_spbcon_work","","",null,null],[5,"LAPACKE_dpbcon_work","","",null,null],[5,"LAPACKE_cpbcon_work","","",null,null],[5,"LAPACKE_zpbcon_work","","",null,null],[5,"LAPACKE_spbequ_work","","",null,null],[5,"LAPACKE_dpbequ_work","","",null,null],[5,"LAPACKE_cpbequ_work","","",null,null],[5,"LAPACKE_zpbequ_work","","",null,null],[5,"LAPACKE_spbrfs_work","","",null,null],[5,"LAPACKE_dpbrfs_work","","",null,null],[5,"LAPACKE_cpbrfs_work","","",null,null],[5,"LAPACKE_zpbrfs_work","","",null,null],[5,"LAPACKE_spbstf_work","","",null,null],[5,"LAPACKE_dpbstf_work","","",null,null],[5,"LAPACKE_cpbstf_work","","",null,null],[5,"LAPACKE_zpbstf_work","","",null,null],[5,"LAPACKE_spbsv_work","","",null,null],[5,"LAPACKE_dpbsv_work","","",null,null],[5,"LAPACKE_cpbsv_work","","",null,null],[5,"LAPACKE_zpbsv_work","","",null,null],[5,"LAPACKE_spbsvx_work","","",null,null],[5,"LAPACKE_dpbsvx_work","","",null,null],[5,"LAPACKE_cpbsvx_work","","",null,null],[5,"LAPACKE_zpbsvx_work","","",null,null],[5,"LAPACKE_spbtrf_work","","",null,null],[5,"LAPACKE_dpbtrf_work","","",null,null],[5,"LAPACKE_cpbtrf_work","","",null,null],[5,"LAPACKE_zpbtrf_work","","",null,null],[5,"LAPACKE_spbtrs_work","","",null,null],[5,"LAPACKE_dpbtrs_work","","",null,null],[5,"LAPACKE_cpbtrs_work","","",null,null],[5,"LAPACKE_zpbtrs_work","","",null,null],[5,"LAPACKE_spftrf_work","","",null,null],[5,"LAPACKE_dpftrf_work","","",null,null],[5,"LAPACKE_cpftrf_work","","",null,null],[5,"LAPACKE_zpftrf_work","","",null,null],[5,"LAPACKE_spftri_work","","",null,null],[5,"LAPACKE_dpftri_work","","",null,null],[5,"LAPACKE_cpftri_work","","",null,null],[5,"LAPACKE_zpftri_work","","",null,null],[5,"LAPACKE_spftrs_work","","",null,null],[5,"LAPACKE_dpftrs_work","","",null,null],[5,"LAPACKE_cpftrs_work","","",null,null],[5,"LAPACKE_zpftrs_work","","",null,null],[5,"LAPACKE_spocon_work","","",null,null],[5,"LAPACKE_dpocon_work","","",null,null],[5,"LAPACKE_cpocon_work","","",null,null],[5,"LAPACKE_zpocon_work","","",null,null],[5,"LAPACKE_spoequ_work","","",null,null],[5,"LAPACKE_dpoequ_work","","",null,null],[5,"LAPACKE_cpoequ_work","","",null,null],[5,"LAPACKE_zpoequ_work","","",null,null],[5,"LAPACKE_spoequb_work","","",null,null],[5,"LAPACKE_dpoequb_work","","",null,null],[5,"LAPACKE_cpoequb_work","","",null,null],[5,"LAPACKE_zpoequb_work","","",null,null],[5,"LAPACKE_sporfs_work","","",null,null],[5,"LAPACKE_dporfs_work","","",null,null],[5,"LAPACKE_cporfs_work","","",null,null],[5,"LAPACKE_zporfs_work","","",null,null],[5,"LAPACKE_sporfsx_work","","",null,null],[5,"LAPACKE_dporfsx_work","","",null,null],[5,"LAPACKE_cporfsx_work","","",null,null],[5,"LAPACKE_zporfsx_work","","",null,null],[5,"LAPACKE_sposv_work","","",null,null],[5,"LAPACKE_dposv_work","","",null,null],[5,"LAPACKE_cposv_work","","",null,null],[5,"LAPACKE_zposv_work","","",null,null],[5,"LAPACKE_dsposv_work","","",null,null],[5,"LAPACKE_zcposv_work","","",null,null],[5,"LAPACKE_sposvx_work","","",null,null],[5,"LAPACKE_dposvx_work","","",null,null],[5,"LAPACKE_cposvx_work","","",null,null],[5,"LAPACKE_zposvx_work","","",null,null],[5,"LAPACKE_sposvxx_work","","",null,null],[5,"LAPACKE_dposvxx_work","","",null,null],[5,"LAPACKE_cposvxx_work","","",null,null],[5,"LAPACKE_zposvxx_work","","",null,null],[5,"LAPACKE_spotrf2_work","","",null,null],[5,"LAPACKE_dpotrf2_work","","",null,null],[5,"LAPACKE_cpotrf2_work","","",null,null],[5,"LAPACKE_zpotrf2_work","","",null,null],[5,"LAPACKE_spotrf_work","","",null,null],[5,"LAPACKE_dpotrf_work","","",null,null],[5,"LAPACKE_cpotrf_work","","",null,null],[5,"LAPACKE_zpotrf_work","","",null,null],[5,"LAPACKE_spotri_work","","",null,null],[5,"LAPACKE_dpotri_work","","",null,null],[5,"LAPACKE_cpotri_work","","",null,null],[5,"LAPACKE_zpotri_work","","",null,null],[5,"LAPACKE_spotrs_work","","",null,null],[5,"LAPACKE_dpotrs_work","","",null,null],[5,"LAPACKE_cpotrs_work","","",null,null],[5,"LAPACKE_zpotrs_work","","",null,null],[5,"LAPACKE_sppcon_work","","",null,null],[5,"LAPACKE_dppcon_work","","",null,null],[5,"LAPACKE_cppcon_work","","",null,null],[5,"LAPACKE_zppcon_work","","",null,null],[5,"LAPACKE_sppequ_work","","",null,null],[5,"LAPACKE_dppequ_work","","",null,null],[5,"LAPACKE_cppequ_work","","",null,null],[5,"LAPACKE_zppequ_work","","",null,null],[5,"LAPACKE_spprfs_work","","",null,null],[5,"LAPACKE_dpprfs_work","","",null,null],[5,"LAPACKE_cpprfs_work","","",null,null],[5,"LAPACKE_zpprfs_work","","",null,null],[5,"LAPACKE_sppsv_work","","",null,null],[5,"LAPACKE_dppsv_work","","",null,null],[5,"LAPACKE_cppsv_work","","",null,null],[5,"LAPACKE_zppsv_work","","",null,null],[5,"LAPACKE_sppsvx_work","","",null,null],[5,"LAPACKE_dppsvx_work","","",null,null],[5,"LAPACKE_cppsvx_work","","",null,null],[5,"LAPACKE_zppsvx_work","","",null,null],[5,"LAPACKE_spptrf_work","","",null,null],[5,"LAPACKE_dpptrf_work","","",null,null],[5,"LAPACKE_cpptrf_work","","",null,null],[5,"LAPACKE_zpptrf_work","","",null,null],[5,"LAPACKE_spptri_work","","",null,null],[5,"LAPACKE_dpptri_work","","",null,null],[5,"LAPACKE_cpptri_work","","",null,null],[5,"LAPACKE_zpptri_work","","",null,null],[5,"LAPACKE_spptrs_work","","",null,null],[5,"LAPACKE_dpptrs_work","","",null,null],[5,"LAPACKE_cpptrs_work","","",null,null],[5,"LAPACKE_zpptrs_work","","",null,null],[5,"LAPACKE_spstrf_work","","",null,null],[5,"LAPACKE_dpstrf_work","","",null,null],[5,"LAPACKE_cpstrf_work","","",null,null],[5,"LAPACKE_zpstrf_work","","",null,null],[5,"LAPACKE_sptcon_work","","",null,null],[5,"LAPACKE_dptcon_work","","",null,null],[5,"LAPACKE_cptcon_work","","",null,null],[5,"LAPACKE_zptcon_work","","",null,null],[5,"LAPACKE_spteqr_work","","",null,null],[5,"LAPACKE_dpteqr_work","","",null,null],[5,"LAPACKE_cpteqr_work","","",null,null],[5,"LAPACKE_zpteqr_work","","",null,null],[5,"LAPACKE_sptrfs_work","","",null,null],[5,"LAPACKE_dptrfs_work","","",null,null],[5,"LAPACKE_cptrfs_work","","",null,null],[5,"LAPACKE_zptrfs_work","","",null,null],[5,"LAPACKE_sptsv_work","","",null,null],[5,"LAPACKE_dptsv_work","","",null,null],[5,"LAPACKE_cptsv_work","","",null,null],[5,"LAPACKE_zptsv_work","","",null,null],[5,"LAPACKE_sptsvx_work","","",null,null],[5,"LAPACKE_dptsvx_work","","",null,null],[5,"LAPACKE_cptsvx_work","","",null,null],[5,"LAPACKE_zptsvx_work","","",null,null],[5,"LAPACKE_spttrf_work","","",null,null],[5,"LAPACKE_dpttrf_work","","",null,null],[5,"LAPACKE_cpttrf_work","","",null,null],[5,"LAPACKE_zpttrf_work","","",null,null],[5,"LAPACKE_spttrs_work","","",null,null],[5,"LAPACKE_dpttrs_work","","",null,null],[5,"LAPACKE_cpttrs_work","","",null,null],[5,"LAPACKE_zpttrs_work","","",null,null],[5,"LAPACKE_ssbev_work","","",null,null],[5,"LAPACKE_dsbev_work","","",null,null],[5,"LAPACKE_ssbevd_work","","",null,null],[5,"LAPACKE_dsbevd_work","","",null,null],[5,"LAPACKE_ssbevx_work","","",null,null],[5,"LAPACKE_dsbevx_work","","",null,null],[5,"LAPACKE_ssbgst_work","","",null,null],[5,"LAPACKE_dsbgst_work","","",null,null],[5,"LAPACKE_ssbgv_work","","",null,null],[5,"LAPACKE_dsbgv_work","","",null,null],[5,"LAPACKE_ssbgvd_work","","",null,null],[5,"LAPACKE_dsbgvd_work","","",null,null],[5,"LAPACKE_ssbgvx_work","","",null,null],[5,"LAPACKE_dsbgvx_work","","",null,null],[5,"LAPACKE_ssbtrd_work","","",null,null],[5,"LAPACKE_dsbtrd_work","","",null,null],[5,"LAPACKE_ssfrk_work","","",null,null],[5,"LAPACKE_dsfrk_work","","",null,null],[5,"LAPACKE_sspcon_work","","",null,null],[5,"LAPACKE_dspcon_work","","",null,null],[5,"LAPACKE_cspcon_work","","",null,null],[5,"LAPACKE_zspcon_work","","",null,null],[5,"LAPACKE_sspev_work","","",null,null],[5,"LAPACKE_dspev_work","","",null,null],[5,"LAPACKE_sspevd_work","","",null,null],[5,"LAPACKE_dspevd_work","","",null,null],[5,"LAPACKE_sspevx_work","","",null,null],[5,"LAPACKE_dspevx_work","","",null,null],[5,"LAPACKE_sspgst_work","","",null,null],[5,"LAPACKE_dspgst_work","","",null,null],[5,"LAPACKE_sspgv_work","","",null,null],[5,"LAPACKE_dspgv_work","","",null,null],[5,"LAPACKE_sspgvd_work","","",null,null],[5,"LAPACKE_dspgvd_work","","",null,null],[5,"LAPACKE_sspgvx_work","","",null,null],[5,"LAPACKE_dspgvx_work","","",null,null],[5,"LAPACKE_ssprfs_work","","",null,null],[5,"LAPACKE_dsprfs_work","","",null,null],[5,"LAPACKE_csprfs_work","","",null,null],[5,"LAPACKE_zsprfs_work","","",null,null],[5,"LAPACKE_sspsv_work","","",null,null],[5,"LAPACKE_dspsv_work","","",null,null],[5,"LAPACKE_cspsv_work","","",null,null],[5,"LAPACKE_zspsv_work","","",null,null],[5,"LAPACKE_sspsvx_work","","",null,null],[5,"LAPACKE_dspsvx_work","","",null,null],[5,"LAPACKE_cspsvx_work","","",null,null],[5,"LAPACKE_zspsvx_work","","",null,null],[5,"LAPACKE_ssptrd_work","","",null,null],[5,"LAPACKE_dsptrd_work","","",null,null],[5,"LAPACKE_ssptrf_work","","",null,null],[5,"LAPACKE_dsptrf_work","","",null,null],[5,"LAPACKE_csptrf_work","","",null,null],[5,"LAPACKE_zsptrf_work","","",null,null],[5,"LAPACKE_ssptri_work","","",null,null],[5,"LAPACKE_dsptri_work","","",null,null],[5,"LAPACKE_csptri_work","","",null,null],[5,"LAPACKE_zsptri_work","","",null,null],[5,"LAPACKE_ssptrs_work","","",null,null],[5,"LAPACKE_dsptrs_work","","",null,null],[5,"LAPACKE_csptrs_work","","",null,null],[5,"LAPACKE_zsptrs_work","","",null,null],[5,"LAPACKE_sstebz_work","","",null,null],[5,"LAPACKE_dstebz_work","","",null,null],[5,"LAPACKE_sstedc_work","","",null,null],[5,"LAPACKE_dstedc_work","","",null,null],[5,"LAPACKE_cstedc_work","","",null,null],[5,"LAPACKE_zstedc_work","","",null,null],[5,"LAPACKE_sstegr_work","","",null,null],[5,"LAPACKE_dstegr_work","","",null,null],[5,"LAPACKE_cstegr_work","","",null,null],[5,"LAPACKE_zstegr_work","","",null,null],[5,"LAPACKE_sstein_work","","",null,null],[5,"LAPACKE_dstein_work","","",null,null],[5,"LAPACKE_cstein_work","","",null,null],[5,"LAPACKE_zstein_work","","",null,null],[5,"LAPACKE_sstemr_work","","",null,null],[5,"LAPACKE_dstemr_work","","",null,null],[5,"LAPACKE_cstemr_work","","",null,null],[5,"LAPACKE_zstemr_work","","",null,null],[5,"LAPACKE_ssteqr_work","","",null,null],[5,"LAPACKE_dsteqr_work","","",null,null],[5,"LAPACKE_csteqr_work","","",null,null],[5,"LAPACKE_zsteqr_work","","",null,null],[5,"LAPACKE_ssterf_work","","",null,null],[5,"LAPACKE_dsterf_work","","",null,null],[5,"LAPACKE_sstev_work","","",null,null],[5,"LAPACKE_dstev_work","","",null,null],[5,"LAPACKE_sstevd_work","","",null,null],[5,"LAPACKE_dstevd_work","","",null,null],[5,"LAPACKE_sstevr_work","","",null,null],[5,"LAPACKE_dstevr_work","","",null,null],[5,"LAPACKE_sstevx_work","","",null,null],[5,"LAPACKE_dstevx_work","","",null,null],[5,"LAPACKE_ssycon_work","","",null,null],[5,"LAPACKE_dsycon_work","","",null,null],[5,"LAPACKE_csycon_work","","",null,null],[5,"LAPACKE_zsycon_work","","",null,null],[5,"LAPACKE_ssyequb_work","","",null,null],[5,"LAPACKE_dsyequb_work","","",null,null],[5,"LAPACKE_csyequb_work","","",null,null],[5,"LAPACKE_zsyequb_work","","",null,null],[5,"LAPACKE_ssyev_work","","",null,null],[5,"LAPACKE_dsyev_work","","",null,null],[5,"LAPACKE_ssyevd_work","","",null,null],[5,"LAPACKE_dsyevd_work","","",null,null],[5,"LAPACKE_ssyevr_work","","",null,null],[5,"LAPACKE_dsyevr_work","","",null,null],[5,"LAPACKE_ssyevx_work","","",null,null],[5,"LAPACKE_dsyevx_work","","",null,null],[5,"LAPACKE_ssygst_work","","",null,null],[5,"LAPACKE_dsygst_work","","",null,null],[5,"LAPACKE_ssygv_work","","",null,null],[5,"LAPACKE_dsygv_work","","",null,null],[5,"LAPACKE_ssygvd_work","","",null,null],[5,"LAPACKE_dsygvd_work","","",null,null],[5,"LAPACKE_ssygvx_work","","",null,null],[5,"LAPACKE_dsygvx_work","","",null,null],[5,"LAPACKE_ssyrfs_work","","",null,null],[5,"LAPACKE_dsyrfs_work","","",null,null],[5,"LAPACKE_csyrfs_work","","",null,null],[5,"LAPACKE_zsyrfs_work","","",null,null],[5,"LAPACKE_ssyrfsx_work","","",null,null],[5,"LAPACKE_dsyrfsx_work","","",null,null],[5,"LAPACKE_csyrfsx_work","","",null,null],[5,"LAPACKE_zsyrfsx_work","","",null,null],[5,"LAPACKE_ssysv_work","","",null,null],[5,"LAPACKE_dsysv_work","","",null,null],[5,"LAPACKE_csysv_work","","",null,null],[5,"LAPACKE_zsysv_work","","",null,null],[5,"LAPACKE_ssysvx_work","","",null,null],[5,"LAPACKE_dsysvx_work","","",null,null],[5,"LAPACKE_csysvx_work","","",null,null],[5,"LAPACKE_zsysvx_work","","",null,null],[5,"LAPACKE_ssysvxx_work","","",null,null],[5,"LAPACKE_dsysvxx_work","","",null,null],[5,"LAPACKE_csysvxx_work","","",null,null],[5,"LAPACKE_zsysvxx_work","","",null,null],[5,"LAPACKE_ssytrd_work","","",null,null],[5,"LAPACKE_dsytrd_work","","",null,null],[5,"LAPACKE_ssytrf_work","","",null,null],[5,"LAPACKE_dsytrf_work","","",null,null],[5,"LAPACKE_csytrf_work","","",null,null],[5,"LAPACKE_zsytrf_work","","",null,null],[5,"LAPACKE_ssytri_work","","",null,null],[5,"LAPACKE_dsytri_work","","",null,null],[5,"LAPACKE_csytri_work","","",null,null],[5,"LAPACKE_zsytri_work","","",null,null],[5,"LAPACKE_ssytrs_work","","",null,null],[5,"LAPACKE_dsytrs_work","","",null,null],[5,"LAPACKE_csytrs_work","","",null,null],[5,"LAPACKE_zsytrs_work","","",null,null],[5,"LAPACKE_stbcon_work","","",null,null],[5,"LAPACKE_dtbcon_work","","",null,null],[5,"LAPACKE_ctbcon_work","","",null,null],[5,"LAPACKE_ztbcon_work","","",null,null],[5,"LAPACKE_stbrfs_work","","",null,null],[5,"LAPACKE_dtbrfs_work","","",null,null],[5,"LAPACKE_ctbrfs_work","","",null,null],[5,"LAPACKE_ztbrfs_work","","",null,null],[5,"LAPACKE_stbtrs_work","","",null,null],[5,"LAPACKE_dtbtrs_work","","",null,null],[5,"LAPACKE_ctbtrs_work","","",null,null],[5,"LAPACKE_ztbtrs_work","","",null,null],[5,"LAPACKE_stfsm_work","","",null,null],[5,"LAPACKE_dtfsm_work","","",null,null],[5,"LAPACKE_ctfsm_work","","",null,null],[5,"LAPACKE_ztfsm_work","","",null,null],[5,"LAPACKE_stftri_work","","",null,null],[5,"LAPACKE_dtftri_work","","",null,null],[5,"LAPACKE_ctftri_work","","",null,null],[5,"LAPACKE_ztftri_work","","",null,null],[5,"LAPACKE_stfttp_work","","",null,null],[5,"LAPACKE_dtfttp_work","","",null,null],[5,"LAPACKE_ctfttp_work","","",null,null],[5,"LAPACKE_ztfttp_work","","",null,null],[5,"LAPACKE_stfttr_work","","",null,null],[5,"LAPACKE_dtfttr_work","","",null,null],[5,"LAPACKE_ctfttr_work","","",null,null],[5,"LAPACKE_ztfttr_work","","",null,null],[5,"LAPACKE_stgevc_work","","",null,null],[5,"LAPACKE_dtgevc_work","","",null,null],[5,"LAPACKE_ctgevc_work","","",null,null],[5,"LAPACKE_ztgevc_work","","",null,null],[5,"LAPACKE_stgexc_work","","",null,null],[5,"LAPACKE_dtgexc_work","","",null,null],[5,"LAPACKE_ctgexc_work","","",null,null],[5,"LAPACKE_ztgexc_work","","",null,null],[5,"LAPACKE_stgsen_work","","",null,null],[5,"LAPACKE_dtgsen_work","","",null,null],[5,"LAPACKE_ctgsen_work","","",null,null],[5,"LAPACKE_ztgsen_work","","",null,null],[5,"LAPACKE_stgsja_work","","",null,null],[5,"LAPACKE_dtgsja_work","","",null,null],[5,"LAPACKE_ctgsja_work","","",null,null],[5,"LAPACKE_ztgsja_work","","",null,null],[5,"LAPACKE_stgsna_work","","",null,null],[5,"LAPACKE_dtgsna_work","","",null,null],[5,"LAPACKE_ctgsna_work","","",null,null],[5,"LAPACKE_ztgsna_work","","",null,null],[5,"LAPACKE_stgsyl_work","","",null,null],[5,"LAPACKE_dtgsyl_work","","",null,null],[5,"LAPACKE_ctgsyl_work","","",null,null],[5,"LAPACKE_ztgsyl_work","","",null,null],[5,"LAPACKE_stpcon_work","","",null,null],[5,"LAPACKE_dtpcon_work","","",null,null],[5,"LAPACKE_ctpcon_work","","",null,null],[5,"LAPACKE_ztpcon_work","","",null,null],[5,"LAPACKE_stprfs_work","","",null,null],[5,"LAPACKE_dtprfs_work","","",null,null],[5,"LAPACKE_ctprfs_work","","",null,null],[5,"LAPACKE_ztprfs_work","","",null,null],[5,"LAPACKE_stptri_work","","",null,null],[5,"LAPACKE_dtptri_work","","",null,null],[5,"LAPACKE_ctptri_work","","",null,null],[5,"LAPACKE_ztptri_work","","",null,null],[5,"LAPACKE_stptrs_work","","",null,null],[5,"LAPACKE_dtptrs_work","","",null,null],[5,"LAPACKE_ctptrs_work","","",null,null],[5,"LAPACKE_ztptrs_work","","",null,null],[5,"LAPACKE_stpttf_work","","",null,null],[5,"LAPACKE_dtpttf_work","","",null,null],[5,"LAPACKE_ctpttf_work","","",null,null],[5,"LAPACKE_ztpttf_work","","",null,null],[5,"LAPACKE_stpttr_work","","",null,null],[5,"LAPACKE_dtpttr_work","","",null,null],[5,"LAPACKE_ctpttr_work","","",null,null],[5,"LAPACKE_ztpttr_work","","",null,null],[5,"LAPACKE_strcon_work","","",null,null],[5,"LAPACKE_dtrcon_work","","",null,null],[5,"LAPACKE_ctrcon_work","","",null,null],[5,"LAPACKE_ztrcon_work","","",null,null],[5,"LAPACKE_strevc_work","","",null,null],[5,"LAPACKE_dtrevc_work","","",null,null],[5,"LAPACKE_ctrevc_work","","",null,null],[5,"LAPACKE_ztrevc_work","","",null,null],[5,"LAPACKE_strexc_work","","",null,null],[5,"LAPACKE_dtrexc_work","","",null,null],[5,"LAPACKE_ctrexc_work","","",null,null],[5,"LAPACKE_ztrexc_work","","",null,null],[5,"LAPACKE_strrfs_work","","",null,null],[5,"LAPACKE_dtrrfs_work","","",null,null],[5,"LAPACKE_ctrrfs_work","","",null,null],[5,"LAPACKE_ztrrfs_work","","",null,null],[5,"LAPACKE_strsen_work","","",null,null],[5,"LAPACKE_dtrsen_work","","",null,null],[5,"LAPACKE_ctrsen_work","","",null,null],[5,"LAPACKE_ztrsen_work","","",null,null],[5,"LAPACKE_strsna_work","","",null,null],[5,"LAPACKE_dtrsna_work","","",null,null],[5,"LAPACKE_ctrsna_work","","",null,null],[5,"LAPACKE_ztrsna_work","","",null,null],[5,"LAPACKE_strsyl_work","","",null,null],[5,"LAPACKE_dtrsyl_work","","",null,null],[5,"LAPACKE_ctrsyl_work","","",null,null],[5,"LAPACKE_ztrsyl_work","","",null,null],[5,"LAPACKE_strtri_work","","",null,null],[5,"LAPACKE_dtrtri_work","","",null,null],[5,"LAPACKE_ctrtri_work","","",null,null],[5,"LAPACKE_ztrtri_work","","",null,null],[5,"LAPACKE_strtrs_work","","",null,null],[5,"LAPACKE_dtrtrs_work","","",null,null],[5,"LAPACKE_ctrtrs_work","","",null,null],[5,"LAPACKE_ztrtrs_work","","",null,null],[5,"LAPACKE_strttf_work","","",null,null],[5,"LAPACKE_dtrttf_work","","",null,null],[5,"LAPACKE_ctrttf_work","","",null,null],[5,"LAPACKE_ztrttf_work","","",null,null],[5,"LAPACKE_strttp_work","","",null,null],[5,"LAPACKE_dtrttp_work","","",null,null],[5,"LAPACKE_ctrttp_work","","",null,null],[5,"LAPACKE_ztrttp_work","","",null,null],[5,"LAPACKE_stzrzf_work","","",null,null],[5,"LAPACKE_dtzrzf_work","","",null,null],[5,"LAPACKE_ctzrzf_work","","",null,null],[5,"LAPACKE_ztzrzf_work","","",null,null],[5,"LAPACKE_cungbr_work","","",null,null],[5,"LAPACKE_zungbr_work","","",null,null],[5,"LAPACKE_cunghr_work","","",null,null],[5,"LAPACKE_zunghr_work","","",null,null],[5,"LAPACKE_cunglq_work","","",null,null],[5,"LAPACKE_zunglq_work","","",null,null],[5,"LAPACKE_cungql_work","","",null,null],[5,"LAPACKE_zungql_work","","",null,null],[5,"LAPACKE_cungqr_work","","",null,null],[5,"LAPACKE_zungqr_work","","",null,null],[5,"LAPACKE_cungrq_work","","",null,null],[5,"LAPACKE_zungrq_work","","",null,null],[5,"LAPACKE_cungtr_work","","",null,null],[5,"LAPACKE_zungtr_work","","",null,null],[5,"LAPACKE_cunmbr_work","","",null,null],[5,"LAPACKE_zunmbr_work","","",null,null],[5,"LAPACKE_cunmhr_work","","",null,null],[5,"LAPACKE_zunmhr_work","","",null,null],[5,"LAPACKE_cunmlq_work","","",null,null],[5,"LAPACKE_zunmlq_work","","",null,null],[5,"LAPACKE_cunmql_work","","",null,null],[5,"LAPACKE_zunmql_work","","",null,null],[5,"LAPACKE_cunmqr_work","","",null,null],[5,"LAPACKE_zunmqr_work","","",null,null],[5,"LAPACKE_cunmrq_work","","",null,null],[5,"LAPACKE_zunmrq_work","","",null,null],[5,"LAPACKE_cunmrz_work","","",null,null],[5,"LAPACKE_zunmrz_work","","",null,null],[5,"LAPACKE_cunmtr_work","","",null,null],[5,"LAPACKE_zunmtr_work","","",null,null],[5,"LAPACKE_cupgtr_work","","",null,null],[5,"LAPACKE_zupgtr_work","","",null,null],[5,"LAPACKE_cupmtr_work","","",null,null],[5,"LAPACKE_zupmtr_work","","",null,null],[5,"LAPACKE_claghe","","",null,null],[5,"LAPACKE_zlaghe","","",null,null],[5,"LAPACKE_slagsy","","",null,null],[5,"LAPACKE_dlagsy","","",null,null],[5,"LAPACKE_clagsy","","",null,null],[5,"LAPACKE_zlagsy","","",null,null],[5,"LAPACKE_slapmr","","",null,null],[5,"LAPACKE_dlapmr","","",null,null],[5,"LAPACKE_clapmr","","",null,null],[5,"LAPACKE_zlapmr","","",null,null],[5,"LAPACKE_slapmt","","",null,null],[5,"LAPACKE_dlapmt","","",null,null],[5,"LAPACKE_clapmt","","",null,null],[5,"LAPACKE_zlapmt","","",null,null],[5,"LAPACKE_slapy2","","",null,null],[5,"LAPACKE_dlapy2","","",null,null],[5,"LAPACKE_slapy3","","",null,null],[5,"LAPACKE_dlapy3","","",null,null],[5,"LAPACKE_slartgp","","",null,null],[5,"LAPACKE_dlartgp","","",null,null],[5,"LAPACKE_slartgs","","",null,null],[5,"LAPACKE_dlartgs","","",null,null],[5,"LAPACKE_cbbcsd","","",null,null],[5,"LAPACKE_cbbcsd_work","","",null,null],[5,"LAPACKE_cheswapr","","",null,null],[5,"LAPACKE_cheswapr_work","","",null,null],[5,"LAPACKE_chetri2","","",null,null],[5,"LAPACKE_chetri2_work","","",null,null],[5,"LAPACKE_chetri2x","","",null,null],[5,"LAPACKE_chetri2x_work","","",null,null],[5,"LAPACKE_chetrs2","","",null,null],[5,"LAPACKE_chetrs2_work","","",null,null],[5,"LAPACKE_csyconv","","",null,null],[5,"LAPACKE_csyconv_work","","",null,null],[5,"LAPACKE_csyswapr","","",null,null],[5,"LAPACKE_csyswapr_work","","",null,null],[5,"LAPACKE_csytri2","","",null,null],[5,"LAPACKE_csytri2_work","","",null,null],[5,"LAPACKE_csytri2x","","",null,null],[5,"LAPACKE_csytri2x_work","","",null,null],[5,"LAPACKE_csytrs2","","",null,null],[5,"LAPACKE_csytrs2_work","","",null,null],[5,"LAPACKE_cunbdb","","",null,null],[5,"LAPACKE_cunbdb_work","","",null,null],[5,"LAPACKE_cuncsd","","",null,null],[5,"LAPACKE_cuncsd_work","","",null,null],[5,"LAPACKE_cuncsd2by1","","",null,null],[5,"LAPACKE_cuncsd2by1_work","","",null,null],[5,"LAPACKE_dbbcsd","","",null,null],[5,"LAPACKE_dbbcsd_work","","",null,null],[5,"LAPACKE_dorbdb","","",null,null],[5,"LAPACKE_dorbdb_work","","",null,null],[5,"LAPACKE_dorcsd","","",null,null],[5,"LAPACKE_dorcsd_work","","",null,null],[5,"LAPACKE_dorcsd2by1","","",null,null],[5,"LAPACKE_dorcsd2by1_work","","",null,null],[5,"LAPACKE_dsyconv","","",null,null],[5,"LAPACKE_dsyconv_work","","",null,null],[5,"LAPACKE_dsyswapr","","",null,null],[5,"LAPACKE_dsyswapr_work","","",null,null],[5,"LAPACKE_dsytri2","","",null,null],[5,"LAPACKE_dsytri2_work","","",null,null],[5,"LAPACKE_dsytri2x","","",null,null],[5,"LAPACKE_dsytri2x_work","","",null,null],[5,"LAPACKE_dsytrs2","","",null,null],[5,"LAPACKE_dsytrs2_work","","",null,null],[5,"LAPACKE_sbbcsd","","",null,null],[5,"LAPACKE_sbbcsd_work","","",null,null],[5,"LAPACKE_sorbdb","","",null,null],[5,"LAPACKE_sorbdb_work","","",null,null],[5,"LAPACKE_sorcsd","","",null,null],[5,"LAPACKE_sorcsd_work","","",null,null],[5,"LAPACKE_sorcsd2by1","","",null,null],[5,"LAPACKE_sorcsd2by1_work","","",null,null],[5,"LAPACKE_ssyconv","","",null,null],[5,"LAPACKE_ssyconv_work","","",null,null],[5,"LAPACKE_ssyswapr","","",null,null],[5,"LAPACKE_ssyswapr_work","","",null,null],[5,"LAPACKE_ssytri2","","",null,null],[5,"LAPACKE_ssytri2_work","","",null,null],[5,"LAPACKE_ssytri2x","","",null,null],[5,"LAPACKE_ssytri2x_work","","",null,null],[5,"LAPACKE_ssytrs2","","",null,null],[5,"LAPACKE_ssytrs2_work","","",null,null],[5,"LAPACKE_zbbcsd","","",null,null],[5,"LAPACKE_zbbcsd_work","","",null,null],[5,"LAPACKE_zheswapr","","",null,null],[5,"LAPACKE_zheswapr_work","","",null,null],[5,"LAPACKE_zhetri2","","",null,null],[5,"LAPACKE_zhetri2_work","","",null,null],[5,"LAPACKE_zhetri2x","","",null,null],[5,"LAPACKE_zhetri2x_work","","",null,null],[5,"LAPACKE_zhetrs2","","",null,null],[5,"LAPACKE_zhetrs2_work","","",null,null],[5,"LAPACKE_zsyconv","","",null,null],[5,"LAPACKE_zsyconv_work","","",null,null],[5,"LAPACKE_zsyswapr","","",null,null],[5,"LAPACKE_zsyswapr_work","","",null,null],[5,"LAPACKE_zsytri2","","",null,null],[5,"LAPACKE_zsytri2_work","","",null,null],[5,"LAPACKE_zsytri2x","","",null,null],[5,"LAPACKE_zsytri2x_work","","",null,null],[5,"LAPACKE_zsytrs2","","",null,null],[5,"LAPACKE_zsytrs2_work","","",null,null],[5,"LAPACKE_zunbdb","","",null,null],[5,"LAPACKE_zunbdb_work","","",null,null],[5,"LAPACKE_zuncsd","","",null,null],[5,"LAPACKE_zuncsd_work","","",null,null],[5,"LAPACKE_zuncsd2by1","","",null,null],[5,"LAPACKE_zuncsd2by1_work","","",null,null],[5,"LAPACKE_sgemqrt","","",null,null],[5,"LAPACKE_dgemqrt","","",null,null],[5,"LAPACKE_cgemqrt","","",null,null],[5,"LAPACKE_zgemqrt","","",null,null],[5,"LAPACKE_sgeqrt","","",null,null],[5,"LAPACKE_dgeqrt","","",null,null],[5,"LAPACKE_cgeqrt","","",null,null],[5,"LAPACKE_zgeqrt","","",null,null],[5,"LAPACKE_sgeqrt2","","",null,null],[5,"LAPACKE_dgeqrt2","","",null,null],[5,"LAPACKE_cgeqrt2","","",null,null],[5,"LAPACKE_zgeqrt2","","",null,null],[5,"LAPACKE_sgeqrt3","","",null,null],[5,"LAPACKE_dgeqrt3","","",null,null],[5,"LAPACKE_cgeqrt3","","",null,null],[5,"LAPACKE_zgeqrt3","","",null,null],[5,"LAPACKE_stpmqrt","","",null,null],[5,"LAPACKE_dtpmqrt","","",null,null],[5,"LAPACKE_ctpmqrt","","",null,null],[5,"LAPACKE_ztpmqrt","","",null,null],[5,"LAPACKE_stpqrt","","",null,null],[5,"LAPACKE_dtpqrt","","",null,null],[5,"LAPACKE_ctpqrt","","",null,null],[5,"LAPACKE_ztpqrt","","",null,null],[5,"LAPACKE_stpqrt2","","",null,null],[5,"LAPACKE_dtpqrt2","","",null,null],[5,"LAPACKE_ctpqrt2","","",null,null],[5,"LAPACKE_ztpqrt2","","",null,null],[5,"LAPACKE_stprfb","","",null,null],[5,"LAPACKE_dtprfb","","",null,null],[5,"LAPACKE_ctprfb","","",null,null],[5,"LAPACKE_ztprfb","","",null,null],[5,"LAPACKE_sgemqrt_work","","",null,null],[5,"LAPACKE_dgemqrt_work","","",null,null],[5,"LAPACKE_cgemqrt_work","","",null,null],[5,"LAPACKE_zgemqrt_work","","",null,null],[5,"LAPACKE_sgeqrt_work","","",null,null],[5,"LAPACKE_dgeqrt_work","","",null,null],[5,"LAPACKE_cgeqrt_work","","",null,null],[5,"LAPACKE_zgeqrt_work","","",null,null],[5,"LAPACKE_sgeqrt2_work","","",null,null],[5,"LAPACKE_dgeqrt2_work","","",null,null],[5,"LAPACKE_cgeqrt2_work","","",null,null],[5,"LAPACKE_zgeqrt2_work","","",null,null],[5,"LAPACKE_sgeqrt3_work","","",null,null],[5,"LAPACKE_dgeqrt3_work","","",null,null],[5,"LAPACKE_cgeqrt3_work","","",null,null],[5,"LAPACKE_zgeqrt3_work","","",null,null],[5,"LAPACKE_stpmqrt_work","","",null,null],[5,"LAPACKE_dtpmqrt_work","","",null,null],[5,"LAPACKE_ctpmqrt_work","","",null,null],[5,"LAPACKE_ztpmqrt_work","","",null,null],[5,"LAPACKE_stpqrt_work","","",null,null],[5,"LAPACKE_dtpqrt_work","","",null,null],[5,"LAPACKE_ctpqrt_work","","",null,null],[5,"LAPACKE_ztpqrt_work","","",null,null],[5,"LAPACKE_stpqrt2_work","","",null,null],[5,"LAPACKE_dtpqrt2_work","","",null,null],[5,"LAPACKE_ctpqrt2_work","","",null,null],[5,"LAPACKE_ztpqrt2_work","","",null,null],[5,"LAPACKE_stprfb_work","","",null,null],[5,"LAPACKE_dtprfb_work","","",null,null],[5,"LAPACKE_ctprfb_work","","",null,null],[5,"LAPACKE_ztprfb_work","","",null,null],[5,"LAPACKE_ssysv_rook","","",null,null],[5,"LAPACKE_dsysv_rook","","",null,null],[5,"LAPACKE_csysv_rook","","",null,null],[5,"LAPACKE_zsysv_rook","","",null,null],[5,"LAPACKE_ssytrf_rook","","",null,null],[5,"LAPACKE_dsytrf_rook","","",null,null],[5,"LAPACKE_csytrf_rook","","",null,null],[5,"LAPACKE_zsytrf_rook","","",null,null],[5,"LAPACKE_ssytrs_rook","","",null,null],[5,"LAPACKE_dsytrs_rook","","",null,null],[5,"LAPACKE_csytrs_rook","","",null,null],[5,"LAPACKE_zsytrs_rook","","",null,null],[5,"LAPACKE_chetrf_rook","","",null,null],[5,"LAPACKE_zhetrf_rook","","",null,null],[5,"LAPACKE_chetrs_rook","","",null,null],[5,"LAPACKE_zhetrs_rook","","",null,null],[5,"LAPACKE_csyr","","",null,null],[5,"LAPACKE_zsyr","","",null,null],[5,"LAPACKE_ssysv_rook_work","","",null,null],[5,"LAPACKE_dsysv_rook_work","","",null,null],[5,"LAPACKE_csysv_rook_work","","",null,null],[5,"LAPACKE_zsysv_rook_work","","",null,null],[5,"LAPACKE_ssytrf_rook_work","","",null,null],[5,"LAPACKE_dsytrf_rook_work","","",null,null],[5,"LAPACKE_csytrf_rook_work","","",null,null],[5,"LAPACKE_zsytrf_rook_work","","",null,null],[5,"LAPACKE_ssytrs_rook_work","","",null,null],[5,"LAPACKE_dsytrs_rook_work","","",null,null],[5,"LAPACKE_csytrs_rook_work","","",null,null],[5,"LAPACKE_zsytrs_rook_work","","",null,null],[5,"LAPACKE_chetrf_rook_work","","",null,null],[5,"LAPACKE_zhetrf_rook_work","","",null,null],[5,"LAPACKE_chetrs_rook_work","","",null,null],[5,"LAPACKE_zhetrs_rook_work","","",null,null],[5,"LAPACKE_csyr_work","","",null,null],[5,"LAPACKE_zsyr_work","","",null,null],[5,"LAPACKE_ilaver","","",null,null],[6,"c_double_complex","","A complex number with 64-bit parts.",null,null],[6,"c_float_complex","","A complex number with 32-bit parts.",null,null],[6,"lapack_complex_double","","",null,null],[6,"lapack_complex_float","","",null,null],[6,"lapack_int","","",null,null],[6,"lapack_logical","","",null,null],[6,"LAPACK_S_SELECT2","","",null,null],[6,"LAPACK_S_SELECT3","","",null,null],[6,"LAPACK_D_SELECT2","","",null,null],[6,"LAPACK_D_SELECT3","","",null,null],[6,"LAPACK_C_SELECT1","","",null,null],[6,"LAPACK_C_SELECT2","","",null,null],[6,"LAPACK_Z_SELECT1","","",null,null],[6,"LAPACK_Z_SELECT2","","",null,null],[17,"LAPACK_ROW_MAJOR","","",null,null],[17,"LAPACK_COL_MAJOR","","",null,null],[17,"LAPACK_WORK_MEMORY_ERROR","","",null,null],[17,"LAPACK_TRANSPOSE_MEMORY_ERROR","","",null,null]],"paths":[]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"dirent","","",null,null],[12,"d_ino","","",35,null],[12,"d_off","","",35,null],[12,"d_reclen","","",35,null],[12,"d_type","","",35,null],[12,"d_name","","",35,null],[3,"dirent64","","",null,null],[12,"d_ino","","",36,null],[12,"d_off","","",36,null],[12,"d_reclen","","",36,null],[12,"d_type","","",36,null],[12,"d_name","","",36,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",37,null],[12,"rlim_max","","",37,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",38,null],[12,"gl_pathv","","",38,null],[12,"gl_offs","","",38,null],[12,"gl_flags","","",38,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",39,null],[12,"ifa_name","","",39,null],[12,"ifa_flags","","",39,null],[12,"ifa_addr","","",39,null],[12,"ifa_netmask","","",39,null],[12,"ifa_ifu","","",39,null],[12,"ifa_data","","",39,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",40,null],[12,"pw_passwd","","",40,null],[12,"pw_uid","","",40,null],[12,"pw_gid","","",40,null],[12,"pw_gecos","","",40,null],[12,"pw_dir","","",40,null],[12,"pw_shell","","",40,null],[3,"spwd","","",null,null],[12,"sp_namp","","",41,null],[12,"sp_pwdp","","",41,null],[12,"sp_lstchg","","",41,null],[12,"sp_min","","",41,null],[12,"sp_max","","",41,null],[12,"sp_warn","","",41,null],[12,"sp_inact","","",41,null],[12,"sp_expire","","",41,null],[12,"sp_flag","","",41,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",42,null],[12,"f_frsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_favail","","",42,null],[12,"f_fsid","","",42,null],[12,"f_flag","","",42,null],[12,"f_namemax","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",66,null],[12,"p_offset","","",66,null],[12,"p_vaddr","","",66,null],[12,"p_paddr","","",66,null],[12,"p_filesz","","",66,null],[12,"p_memsz","","",66,null],[12,"p_flags","","",66,null],[12,"p_align","","",66,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",67,null],[12,"p_flags","","",67,null],[12,"p_offset","","",67,null],[12,"p_vaddr","","",67,null],[12,"p_paddr","","",67,null],[12,"p_filesz","","",67,null],[12,"p_memsz","","",67,null],[12,"p_align","","",67,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",68,null],[12,"aio_lio_opcode","","",68,null],[12,"aio_reqprio","","",68,null],[12,"aio_buf","","",68,null],[12,"aio_nbytes","","",68,null],[12,"aio_sigevent","","",68,null],[12,"aio_offset","","",68,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",69,null],[12,"e_exit","","",69,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",70,null],[12,"tv_usec","","",70,null],[3,"utmpx","","",null,null],[12,"ut_type","","",71,null],[12,"ut_pid","","",71,null],[12,"ut_line","","",71,null],[12,"ut_id","","",71,null],[12,"ut_user","","",71,null],[12,"ut_host","","",71,null],[12,"ut_exit","","",71,null],[12,"ut_session","","",71,null],[12,"ut_tv","","",71,null],[12,"ut_addr_v6","","",71,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",72,null],[12,"sa_mask","","",72,null],[12,"sa_flags","","",72,null],[12,"sa_restorer","","",72,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",73,null],[12,"ss_flags","","",73,null],[12,"ss_size","","",73,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",74,null],[12,"si_errno","","",74,null],[12,"si_code","","",74,null],[12,"_pad","","",74,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",75,null],[12,"gl_pathv","","",75,null],[12,"gl_offs","","",75,null],[12,"gl_flags","","",75,null],[3,"ucred","","",null,null],[12,"pid","","",76,null],[12,"uid","","",76,null],[12,"gid","","",76,null],[3,"statfs","","",null,null],[12,"f_type","","",77,null],[12,"f_bsize","","",77,null],[12,"f_blocks","","",77,null],[12,"f_bfree","","",77,null],[12,"f_bavail","","",77,null],[12,"f_files","","",77,null],[12,"f_ffree","","",77,null],[12,"f_fsid","","",77,null],[12,"f_namelen","","",77,null],[12,"f_frsize","","",77,null],[3,"msghdr","","",null,null],[12,"msg_name","","",78,null],[12,"msg_namelen","","",78,null],[12,"msg_iov","","",78,null],[12,"msg_iovlen","","",78,null],[12,"msg_control","","",78,null],[12,"msg_controllen","","",78,null],[12,"msg_flags","","",78,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",79,null],[12,"cmsg_level","","",79,null],[12,"cmsg_type","","",79,null],[3,"termios","","",null,null],[12,"c_iflag","","",80,null],[12,"c_oflag","","",80,null],[12,"c_cflag","","",80,null],[12,"c_lflag","","",80,null],[12,"c_line","","",80,null],[12,"c_cc","","",80,null],[12,"c_ispeed","","",80,null],[12,"c_ospeed","","",80,null],[3,"flock","","",null,null],[12,"l_type","","",81,null],[12,"l_whence","","",81,null],[12,"l_start","","",81,null],[12,"l_len","","",81,null],[12,"l_pid","","",81,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",82,null],[12,"loads","","",82,null],[12,"totalram","","",82,null],[12,"freeram","","",82,null],[12,"sharedram","","",82,null],[12,"bufferram","","",82,null],[12,"totalswap","","",82,null],[12,"freeswap","","",82,null],[12,"procs","","",82,null],[12,"pad","","",82,null],[12,"totalhigh","","",82,null],[12,"freehigh","","",82,null],[12,"mem_unit","","",82,null],[12,"_f","","",82,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",83,null],[12,"msg_stime","","",83,null],[12,"msg_rtime","","",83,null],[12,"msg_ctime","","",83,null],[12,"msg_qnum","","",83,null],[12,"msg_qbytes","","",83,null],[12,"msg_lspid","","",83,null],[12,"msg_lrpid","","",83,null],[3,"stat","","",null,null],[12,"st_dev","","",84,null],[12,"st_ino","","",84,null],[12,"st_nlink","","",84,null],[12,"st_mode","","",84,null],[12,"st_uid","","",84,null],[12,"st_gid","","",84,null],[12,"st_rdev","","",84,null],[12,"st_size","","",84,null],[12,"st_blksize","","",84,null],[12,"st_blocks","","",84,null],[12,"st_atime","","",84,null],[12,"st_atime_nsec","","",84,null],[12,"st_mtime","","",84,null],[12,"st_mtime_nsec","","",84,null],[12,"st_ctime","","",84,null],[12,"st_ctime_nsec","","",84,null],[3,"stat64","","",null,null],[12,"st_dev","","",85,null],[12,"st_ino","","",85,null],[12,"st_nlink","","",85,null],[12,"st_mode","","",85,null],[12,"st_uid","","",85,null],[12,"st_gid","","",85,null],[12,"st_rdev","","",85,null],[12,"st_size","","",85,null],[12,"st_blksize","","",85,null],[12,"st_blocks","","",85,null],[12,"st_atime","","",85,null],[12,"st_atime_nsec","","",85,null],[12,"st_mtime","","",85,null],[12,"st_mtime_nsec","","",85,null],[12,"st_ctime","","",85,null],[12,"st_ctime_nsec","","",85,null],[3,"statfs64","","",null,null],[12,"f_type","","",86,null],[12,"f_bsize","","",86,null],[12,"f_blocks","","",86,null],[12,"f_bfree","","",86,null],[12,"f_bavail","","",86,null],[12,"f_files","","",86,null],[12,"f_ffree","","",86,null],[12,"f_fsid","","",86,null],[12,"f_namelen","","",86,null],[12,"f_frsize","","",86,null],[12,"f_flags","","",86,null],[12,"f_spare","","",86,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",87,null],[12,"f_frsize","","",87,null],[12,"f_blocks","","",87,null],[12,"f_bfree","","",87,null],[12,"f_bavail","","",87,null],[12,"f_files","","",87,null],[12,"f_ffree","","",87,null],[12,"f_favail","","",87,null],[12,"f_fsid","","",87,null],[12,"f_flag","","",87,null],[12,"f_namemax","","",87,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",88,null],[12,"exponent","","",88,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",89,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",90,null],[12,"swd","","",90,null],[12,"ftw","","",90,null],[12,"fop","","",90,null],[12,"rip","","",90,null],[12,"rdp","","",90,null],[12,"mxcsr","","",90,null],[12,"mxcr_mask","","",90,null],[12,"_st","","",90,null],[12,"_xmm","","",90,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",91,null],[12,"swd","","",91,null],[12,"ftw","","",91,null],[12,"fop","","",91,null],[12,"rip","","",91,null],[12,"rdp","","",91,null],[12,"mxcsr","","",91,null],[12,"mxcr_mask","","",91,null],[12,"st_space","","",91,null],[12,"xmm_space","","",91,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",92,null],[12,"r14","","",92,null],[12,"r13","","",92,null],[12,"r12","","",92,null],[12,"rbp","","",92,null],[12,"rbx","","",92,null],[12,"r11","","",92,null],[12,"r10","","",92,null],[12,"r9","","",92,null],[12,"r8","","",92,null],[12,"rax","","",92,null],[12,"rcx","","",92,null],[12,"rdx","","",92,null],[12,"rsi","","",92,null],[12,"rdi","","",92,null],[12,"orig_rax","","",92,null],[12,"rip","","",92,null],[12,"cs","","",92,null],[12,"eflags","","",92,null],[12,"rsp","","",92,null],[12,"ss","","",92,null],[12,"fs_base","","",92,null],[12,"gs_base","","",92,null],[12,"ds","","",92,null],[12,"es","","",92,null],[12,"fs","","",92,null],[12,"gs","","",92,null],[3,"user","","",null,null],[12,"regs","","",93,null],[12,"u_fpvalid","","",93,null],[12,"i387","","",93,null],[12,"u_tsize","","",93,null],[12,"u_dsize","","",93,null],[12,"u_ssize","","",93,null],[12,"start_code","","",93,null],[12,"start_stack","","",93,null],[12,"signal","","",93,null],[12,"u_ar0","","",93,null],[12,"u_fpstate","","",93,null],[12,"magic","","",93,null],[12,"u_comm","","",93,null],[12,"u_debugreg","","",93,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",94,null],[12,"fpregs","","",94,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",95,null],[12,"uc_link","","",95,null],[12,"uc_stack","","",95,null],[12,"uc_mcontext","","",95,null],[12,"uc_sigmask","","",95,null],[3,"ipc_perm","","",null,null],[12,"__key","","",96,null],[12,"uid","","",96,null],[12,"gid","","",96,null],[12,"cuid","","",96,null],[12,"cgid","","",96,null],[12,"mode","","",96,null],[12,"__seq","","",96,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",97,null],[12,"shm_segsz","","",97,null],[12,"shm_atime","","",97,null],[12,"shm_dtime","","",97,null],[12,"shm_ctime","","",97,null],[12,"shm_cpid","","",97,null],[12,"shm_lpid","","",97,null],[12,"shm_nattch","","",97,null],[3,"termios2","","",null,null],[12,"c_iflag","","",98,null],[12,"c_oflag","","",98,null],[12,"c_cflag","","",98,null],[12,"c_lflag","","",98,null],[12,"c_line","","",98,null],[12,"c_cc","","",98,null],[12,"c_ispeed","","",98,null],[12,"c_ospeed","","",98,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"statfs64"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"statvfs64"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"termios2"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"itimerspec"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"dl_phdr_info"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"elf32_phdr"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"elf64_phdr"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["libz_sys"] = {"doc":"","items":[[3,"gz_header","libz_sys","",null,null],[12,"text","","",0,null],[12,"time","","",0,null],[12,"xflags","","",0,null],[12,"os","","",0,null],[12,"extra","","",0,null],[12,"extra_len","","",0,null],[12,"extra_max","","",0,null],[12,"name","","",0,null],[12,"name_max","","",0,null],[12,"comment","","",0,null],[12,"comm_max","","",0,null],[12,"hcrc","","",0,null],[12,"done","","",0,null],[3,"z_stream","","",null,null],[12,"next_in","","",1,null],[12,"avail_in","","",1,null],[12,"total_in","","",1,null],[12,"next_out","","",1,null],[12,"avail_out","","",1,null],[12,"total_out","","",1,null],[12,"msg","","",1,null],[12,"state","","",1,null],[12,"zalloc","","",1,null],[12,"zfree","","",1,null],[12,"opaque","","",1,null],[12,"data_type","","",1,null],[12,"adler","","",1,null],[12,"reserved","","",1,null],[4,"gzFile_s","","",null,null],[4,"internal_state","","",null,null],[5,"adler32","","",null,null],[5,"adler32_combine","","",null,null],[5,"compress","","",null,null],[5,"compress2","","",null,null],[5,"compressBound","","",null,null],[5,"crc32","","",null,null],[5,"crc32_combine","","",null,null],[5,"deflate","","",null,null],[5,"deflateBound","","",null,null],[5,"deflateCopy","","",null,null],[5,"deflateEnd","","",null,null],[5,"deflateInit_","","",null,null],[5,"deflateInit2_","","",null,null],[5,"deflateParams","","",null,null],[5,"deflatePrime","","",null,null],[5,"deflateReset","","",null,null],[5,"deflateSetDictionary","","",null,null],[5,"deflateSetHeader","","",null,null],[5,"deflateTune","","",null,null],[5,"gzdirect","","",null,null],[5,"gzdopen","","",null,null],[5,"gzclearerr","","",null,null],[5,"gzclose","","",null,null],[5,"gzeof","","",null,null],[5,"gzerror","","",null,null],[5,"gzflush","","",null,null],[5,"gzgetc","","",null,null],[5,"gzgets","","",null,null],[5,"gzopen","","",null,null],[5,"gzputc","","",null,null],[5,"gzputs","","",null,null],[5,"gzread","","",null,null],[5,"gzrewind","","",null,null],[5,"gzseek","","",null,null],[5,"gzsetparams","","",null,null],[5,"gztell","","",null,null],[5,"gzungetc","","",null,null],[5,"gzwrite","","",null,null],[5,"inflate","","",null,null],[5,"inflateBack","","",null,null],[5,"inflateBackEnd","","",null,null],[5,"inflateBackInit_","","",null,null],[5,"inflateCopy","","",null,null],[5,"inflateEnd","","",null,null],[5,"inflateGetHeader","","",null,null],[5,"inflateInit_","","",null,null],[5,"inflateInit2_","","",null,null],[5,"inflateMark","","",null,null],[5,"inflatePrime","","",null,null],[5,"inflateReset","","",null,null],[5,"inflateReset2","","",null,null],[5,"inflateSetDictionary","","",null,null],[5,"inflateSync","","",null,null],[5,"uncompress","","",null,null],[5,"zlibCompileFlags","","",null,null],[5,"zlibVersion","","",null,null],[6,"alloc_func","","",null,null],[6,"Bytef","","",null,null],[6,"free_func","","",null,null],[6,"gzFile","","",null,null],[6,"in_func","","",null,null],[6,"out_func","","",null,null],[6,"uInt","","",null,null],[6,"uLong","","",null,null],[6,"uLongf","","",null,null],[6,"voidp","","",null,null],[6,"voidpc","","",null,null],[6,"voidpf","","",null,null],[6,"z_off_t","","",null,null],[6,"gz_headerp","","",null,null],[6,"z_streamp","","",null,null],[17,"Z_NO_FLUSH","","",null,null],[17,"Z_PARTIAL_FLUSH","","",null,null],[17,"Z_SYNC_FLUSH","","",null,null],[17,"Z_FULL_FLUSH","","",null,null],[17,"Z_FINISH","","",null,null],[17,"Z_BLOCK","","",null,null],[17,"Z_TREES","","",null,null],[17,"Z_OK","","",null,null],[17,"Z_STREAM_END","","",null,null],[17,"Z_NEED_DICT","","",null,null],[17,"Z_ERRNO","","",null,null],[17,"Z_STREAM_ERROR","","",null,null],[17,"Z_DATA_ERROR","","",null,null],[17,"Z_MEM_ERROR","","",null,null],[17,"Z_BUF_ERROR","","",null,null],[17,"Z_VERSION_ERROR","","",null,null],[17,"Z_NO_COMPRESSION","","",null,null],[17,"Z_BEST_SPEED","","",null,null],[17,"Z_BEST_COMPRESSION","","",null,null],[17,"Z_DEFAULT_COMPRESSION","","",null,null],[17,"Z_FILTERED","","",null,null],[17,"Z_HUFFMAN_ONLY","","",null,null],[17,"Z_RLE","","",null,null],[17,"Z_FIXED","","",null,null],[17,"Z_DEFAULT_STRATEGY","","",null,null],[17,"Z_BINARY","","",null,null],[17,"Z_TEXT","","",null,null],[17,"Z_ASCII","","",null,null],[17,"Z_UNKNOWN","","",null,null],[17,"Z_DEFLATED","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"gz_header"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"z_stream"}}]],"paths":[[3,"gz_header"],[3,"z_stream"]]};
searchIndex["linked_hash_map"] = {"doc":"A `HashMap` wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",null,null],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`'s entries, with immutable references to the values.",null,null],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`'s entries, with mutable references to the values.",null,null],[3,"IntoIter","","A consuming insertion-order iterator over a `LinkedHashMap`'s entries.",null,null],[3,"Entries","","An insertion-order iterator over a `LinkedHashMap`'s entries represented as an `OccupiedEntry`.",null,null],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`'s keys.",null,null],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`'s values.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a `LinkedHashMap`.",null,null],[3,"VacantEntry","","A view into a single empty location in a `LinkedHashMap`.",null,null],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry.",0,null],[13,"Vacant","","A vacant Entry.",0,null],[11,"new","","Creates a linked hash map.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_hasher","","Creates an empty linked hash map with the given initial hash builder.",1,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial capacity and hash builder.",1,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"entries","","Returns an iterator visiting all entries in insertion order. Iterator element type is `OccupiedEntry<K, V, S>`. Allows for removal as well as replacing the entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",1,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"contains_key","","Checks if the map contains the given key.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns the value corresponding to the key in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_refresh","","Returns the value corresponding to the key in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove","","Removes and returns the value corresponding to the key from the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"pop_front","","Removes the first entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front","","Gets the first entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_back","","Removes the last entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Gets the last entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","Returns the number of key-value pairs in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the map is currently empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hasher","","Returns a reference to the map's hasher.",1,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"clear","","Clears the map of all key-value pairs.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a V)`",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a mut V)` # Examples ``` use linked_hash_map::LinkedHashMap;",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["occupiedentry"],"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"key","","Returns the entry key",0,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the entry key",8,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"get","","Gets a reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the entry key",9,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}]],"paths":[[4,"Entry"],[3,"LinkedHashMap"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["lutario"] = {"doc":"Lutario is an implementation of IM-SRG(2) and QDPT3.","items":[[0,"ang_mom","lutario","Angular momentum coupling.",null,null],[3,"Coupled2HalfSpinsBlock","lutario::ang_mom","",null,null],[12,"z00","","`j=0 m=0`",0,null],[12,"z10","","`j=1 m=0`",0,null],[3,"Uncoupled2HalfSpinsBlock","","",null,null],[12,"mpmp","","↓↑ | ↓↑",1,null],[12,"mppm","","↓↑ | ↑↓",1,null],[12,"pmmp","","↑↓ | ↓↑",1,null],[12,"pmpm","","↑↓ | ↑↓",1,null],[3,"Coupled2HalfSpins","","",null,null],[12,"z00","","`j=0 m=0`",2,null],[12,"m11","","`j=1 m=−1`",2,null],[12,"z10","","`j=1 m=0`",2,null],[12,"p11","","`j=1 m=+1`",2,null],[3,"Uncoupled2HalfSpins","","",null,null],[12,"mm","","↓↓",3,null],[12,"mp","","↓↑",3,null],[12,"pm","","↑↓",3,null],[12,"pp","","↑↑",3,null],[3,"Wigner3jmCtx","","",null,null],[12,"0","","",4,null],[3,"Wigner6jCtx","","",null,null],[12,"0","","",5,null],[5,"reflect_16th","","Reflection about the 22.5° axis.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"coupled2halfspinsblock"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"uncoupled2halfspinsblock"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"coupled2halfspinsblock"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"coupled2halfspins"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"uncoupled2halfspins"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"uncoupled2halfspins"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"coupled2halfspins"}],"output":{"name":"self"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"wigner3jmctx"}}],[11,"cg","","",4,{"inputs":[{"name":"self"},{"name":"clebschgordan"}],"output":{"name":"f64"}}],[11,"get","","",4,{"inputs":[{"name":"self"},{"name":"wigner3jm"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"wigner6jctx"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"wigner6jctx"}}],[11,"get","","",5,{"inputs":[{"name":"self"},{"name":"wigner6j"}],"output":{"name":"f64"}}],[0,"basis","lutario","Basis manipulation.",null,null],[3,"CACHE","lutario::basis","Global cache for storing basis information.",null,null],[3,"Hashed","","",null,null],[12,"inner","","",6,null],[12,"hash","","",6,null],[3,"HashChartInsertResult","","",null,null],[12,"inserted","","Whether the insert was successful",7,null],[12,"index","","Index of the inserted item",7,null],[3,"HashChart","","A chart is a bijection between a zero-based interval (i.e. indices) and an arbitrary set of objects of type `T`.  `HashChart` is an implementation of this idea using `HashMap`.",null,null],[12,"encoder","","",8,null],[12,"decoder","","",8,null],[3,"BasisLayout","","A basis layout has only enough information to understand the structure of a matrix along one axis, but not to interpret its elements.",null,null],[12,"num_parts","","",9,null],[12,"part_offsets","","`part_offsets[l * num_parts + x - 1] == ∑[x' < x] num_states_l_x(l, x') where l < nl && x > 0 && x < num_parts`",9,null],[12,"chan_offsets","","`chan_offsets[l] == ∑[l' < l] num_states_l(l') where l ≤ nl`",9,null],[12,"state_chans","","`states[p] == l where p ≤ np`",9,null],[3,"BasisChart","","A basis chart contains information needed to interpret an axis of a block-diagonal matrix.  The type is parametrized by:",null,null],[12,"chan_chart","","",10,null],[12,"part_chart","","",10,null],[12,"aux_encoder","","`(l, μ) → u`",10,null],[12,"aux_decoder","","`(p ≡ chan_offset(l) + u) → μ`",10,null],[12,"orb_from_ix","","`p → i`",10,null],[12,"orb_to_ix","","`i → p`",10,null],[12,"layout","","",10,null],[3,"MatLayout","","",null,null],[12,"block_offsets","","",11,null],[12,"block_strides","","",11,null],[12,"left","","",11,null],[12,"right","","",11,null],[3,"MatChart","","",null,null],[12,"layout","","",12,null],[12,"left","","",12,null],[12,"right","","",12,null],[3,"Orb","","Orbital ID `i`, in channelized order.  Not to be confused with orbital index.",null,null],[12,"0","","",13,null],[3,"OrbIx","","Orbital index `p`, in the original basis order.  Not to be confused with orbital ID.",null,null],[12,"0","","",14,null],[3,"ChanState","","Channelized state index.",null,null],[12,"l","","Channel index",15,null],[12,"u","","Auxiliary index",15,null],[3,"PackedOptChanState","","",null,null],[12,"0","","",16,null],[3,"PartState","","",null,null],[12,"x","","",17,null],[12,"p","","",17,null],[3,"Fence","","Iterator over `Option<impl Increment>`.",null,null],[12,"0","","",18,null],[4,"Occ","","Occupancy of an orbital (single-particle state).",null,null],[13,"I","","Occupied (\"hole\") orbital",19,null],[13,"A","","Unoccupied (\"particle\") orbital",19,null],[4,"Occ20","","Occupancy of antisymmetrized two-particle states.",null,null],[13,"II","","",20,null],[13,"AI","","",20,null],[13,"AA","","",20,null],[5,"siphash128","","",null,null],[0,"occ","","Convenient aliases for occupancies.",null,null],[17,"ALL1","lutario::basis::occ","",null,null],[17,"ALL2","","",null,null],[17,"II","","",null,null],[17,"AI","","",null,null],[17,"IA","","",null,null],[17,"AA","","",null,null],[6,"State2","lutario::basis","",null,null],[8,"IntoUsize","","",null,null],[10,"into_usize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"FromUsize","","",null,null],[10,"from_usize","","",22,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[8,"Increment","","Associates data types with sequences.",null,null],[10,"increment","","Given the current item, return the next item in the associated sequence.",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"cache"}}],[11,"initialize","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"hashed"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",6,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"hashchartinsertresult"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"hashchart"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",8,{"inputs":[{"name":"u"}],"output":{"name":"self"}}],[11,"into_iter","","",8,null],[11,"encode","","",8,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"len","","",8,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"decode","","",8,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"reorder_by_key","","Reorder the elements in the HashChart via some total ordering, changing the association between elements and indices.  The callback receives the permutation that maps from old indices to new.",8,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"insert","","",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"hashchartinsertresult"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"basislayout"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"basislayout"}}],[11,"num_states","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_chans","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_parts","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_auxs","","",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"chan_dim","","",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"part_dim","","",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"channelize","","",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"chanstate"}}],[11,"dechannelize","","",9,{"inputs":[{"name":"self"},{"name":"chanstate"}],"output":{"name":"u32"}}],[11,"chan_offset","","",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"chan_offsets","","",9,null],[11,"part_offset","","",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"part_offsets","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"matref"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"basischart"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"new_with","","Create a `BasisChart` with the given states, using the provided charts as a starting point.  The charts will be augmented if necessary.",10,{"inputs":[{"name":"i"},{"generics":["u32"],"name":"hashchart"},{"generics":["u32"],"name":"hashchart"}],"output":{"name":"self"}}],[11,"layout","","",10,{"inputs":[{"name":"self"}],"output":{"name":"basislayout"}}],[11,"decode_chan","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"decode_part","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"decode_aux","","",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"encode_chan","","",10,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"generics":["u32"],"name":"option"}}],[11,"encode_part","","",10,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"generics":["u32"],"name":"option"}}],[11,"encode_aux","","",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u"}],"output":{"generics":["u32"],"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"matlayout"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",11,{"inputs":[{"name":"basislayout"},{"name":"basislayout"}],"output":{"name":"self"}}],[11,"len","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_dim","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"offset","","",11,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"offset","","",12,{"inputs":[{"name":"self"},{"name":"l"},{"name":"u1"},{"name":"u2"}],"output":{"name":"usize"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"orb"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"orb"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"orb"}],"output":{"name":"bool"}}],[11,"hash","","",13,null],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"orb"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"orb"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"orb"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"orb"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"orb"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"orb"}],"output":{"name":"ordering"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"orbix"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"orbix"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"orbix"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"orbix"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"orbix"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"orbix"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"orbix"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"orbix"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"orbix"}],"output":{"name":"ordering"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"chanstate"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"chanstate"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"chanstate"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"chanstate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"self"},{"name":"chanstate"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"self"},{"name":"chanstate"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"self"},{"name":"chanstate"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"self"},{"name":"chanstate"}],"output":{"name":"bool"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"chanstate"}],"output":{"name":"ordering"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"packedoptchanstate"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",16,{"inputs":[{"generics":["chanstate"],"name":"option"}],"output":{"name":"self"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"partstate"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"partstate"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"partstate"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"partstate"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"partstate"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"partstate"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"partstate"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"partstate"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"partstate"}],"output":{"name":"ordering"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"map_p","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"partstate"}}],[11,"count_occ","","",17,{"inputs":[{"name":"iterator"}],"output":{"name":"i32"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"fence"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"name":"bool"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"name":"ordering"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"occ"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"occ"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"occ"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",19,{"inputs":[{"name":"self"},{"name":"occ"}],"output":{"name":"ordering"}}],[11,"from","","",19,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"increment","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"chart","","",19,{"inputs":[],"output":{"generics":["u32"],"name":"hashchart"}}],[11,"chart2","","",19,{"inputs":[],"output":{"generics":["u32"],"name":"hashchart"}}],[11,"from_usize","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"occ2_from_usize","","",19,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"occ2_to_usize","","",19,null],[11,"next_occ2","","",19,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"occ20"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"occ20"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"occ20"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",20,{"inputs":[{"name":"self"},{"name":"occ20"}],"output":{"name":"ordering"}}],[11,"increment","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"chart","","",20,{"inputs":[],"output":{"generics":["u32"],"name":"hashchart"}}],[11,"from_usize","","",20,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[0,"block","lutario","Block-diagonal matrices and similar things.",null,null],[3,"Block","lutario::block","A block of a block-diagonal matrix",null,null],[12,"chan","","Channel index of this block",25,null],[12,"data","","",25,null],[3,"Bd","","A block-diagonal matrix is a vector of matrix blocks.",null,null],[12,"0","","",26,null],[11,"ref_add","","",25,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"len","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_zero","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"scale","","",25,null],[11,"at_block_mat","","",25,null],[11,"at_block_mat","","",25,null],[11,"at_block_mat","","",25,null],[11,"set_block_mat","","",25,null],[11,"add_block_mat","","",25,null],[11,"set_block_mat","","",25,null],[11,"add_block_mat","","",25,null],[11,"set_block_mat","","",25,null],[11,"add_block_mat","","",25,null],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bd"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"bd"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"bd"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"bd"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"partial_cmp","","",26,{"inputs":[{"name":"self"},{"name":"bd"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"self"},{"name":"bd"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"self"},{"name":"bd"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"self"},{"name":"bd"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"self"},{"name":"bd"}],"output":{"name":"bool"}}],[11,"cmp","","",26,{"inputs":[{"name":"self"},{"name":"bd"}],"output":{"name":"ordering"}}],[11,"extent_mat_as_tri","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone_mat_to_tri_slice","","Pack the lower triangles of the matrix blocks into the given array and then return the remaining part of the array.",26,null],[11,"clone_mat_from_tri_slice","","",26,null],[11,"ref_add","","",26,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"len","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_zero","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"scale","","",26,null],[11,"at_block_mat","","",26,null],[11,"at_block_mat","","",26,null],[11,"at_block_mat","","",26,null],[11,"set_block_mat","","",26,null],[11,"add_block_mat","","",26,null],[11,"set_block_mat","","",26,null],[11,"add_block_mat","","",26,null],[11,"set_block_mat","","",26,null],[11,"add_block_mat","","",26,null],[0,"block_mat","lutario","Packed block-diagonal matrices.",null,null],[3,"RawBlockMatRef","lutario::block_mat","A block-diagonal matrix with unspecified lifetime and unspecified type.",null,null],[3,"BlockMatRef","","A block-diagonal matrix.",null,null],[3,"BlockMatMut","","A mutable block-diagonal matrix.",null,null],[5,"block_mat_extent","","",null,null],[5,"block_gemm","","",null,{"inputs":[{"name":"transpose"},{"name":"transpose"},{"name":"t"},{"name":"blockmatref"},{"name":"blockmatref"},{"name":"t"},{"name":"blockmatmut"}],"output":null}],[5,"block_heevr","","",null,null],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"rawblockmatref"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Unsafe preconditions:",27,null],[11,"as_ptr","","Unsafe preconditions: `T` must be the correct type.",27,null],[11,"mut_ptr","","Unsafe preconditions: `T` must be the correct type.",27,null],[11,"num_blocks","","Unsafety: No attempt is made to constrain the lifetime.",27,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_offsets","","Unsafety: No attempt is made to constrain the lifetime.",27,null],[11,"block_strides","","Unsafety: No attempt is made to constrain the lifetime.",27,null],[11,"block_num_rows","","Unsafety: No attempt is made to constrain the lifetime.",27,null],[11,"block_num_cols","","Unsafety: No attempt is made to constrain the lifetime.",27,null],[11,"shape_at","","",27,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"validmatshape"}}],[11,"offset_at","","",27,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",28,null],[11,"from_raw","","",28,{"inputs":[{"name":"rawblockmatref"}],"output":{"name":"self"}}],[11,"as_ptr","","",28,null],[11,"num_blocks","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_offsets","","",28,null],[11,"block_strides","","",28,null],[11,"block_num_rows","","",28,null],[11,"block_num_cols","","",28,null],[11,"get","","",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["matref"],"name":"option"}}],[11,"index","","",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matref"}}],[11,"get_unchecked","","",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matref"}}],[11,"slice","","",28,null],[11,"len","","",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"at_block_mat","","",28,null],[11,"from_raw","","",29,{"inputs":[{"name":"rawblockmatref"}],"output":{"name":"self"}}],[11,"as_ptr","","",29,null],[11,"into_ref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"blockmatref"}}],[11,"as_ref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"blockmatref"}}],[11,"as_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"blockmatmut"}}],[11,"get","","",29,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["matmut"],"name":"option"}}],[11,"get_unchecked","","",29,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"matmut"}}],[11,"len","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"at_block_mat","","",29,null],[11,"set_block_mat","","",29,null],[11,"add_block_mat","","",29,null],[0,"block_tri_mat","lutario","Packed block-diagonal lower-triangular matrices.",null,null],[3,"BlockTriMatShape","lutario::block_tri_mat","ugly: there's a lot of hidden invariants here that we aren't being explicit about",null,null],[3,"BlockTriMatRef","","A block-diagonal matrix.",null,null],[3,"BlockTriMatMut","","A mutable block-diagonal matrix.",null,null],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"blocktrimatshape"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","invariants:",30,null],[11,"num_blocks","","Unsafety: No attempt is made to constrain the lifetime.",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"block_offsets","","",30,null],[11,"block_dims","","",30,null],[11,"offset_unchecked","","",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"dim_unchecked","","",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"trimatdim"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_raw","","",31,null],[11,"as_ptr","","",31,null],[11,"shape","","",31,{"inputs":[{"name":"self"}],"output":{"name":"blocktrimatshape"}}],[11,"get","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["trimatref"],"name":"option"}}],[11,"get_unchecked","","",31,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"trimatref"}}],[11,"from_raw","","",32,null],[11,"as_ptr","","",32,null],[11,"shape","","",32,{"inputs":[{"name":"self"}],"output":{"name":"blocktrimatshape"}}],[11,"into_ref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"blocktrimatref"}}],[11,"as_ref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"blocktrimatref"}}],[11,"as_mut","","",32,{"inputs":[{"name":"self"}],"output":{"name":"blocktrimatmut"}}],[11,"get","","",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["trimatmut"],"name":"option"}}],[11,"get_unchecked","","",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"trimatmut"}}],[0,"btree_cache","lutario","Insert-only B-tree map",null,null],[3,"BTreeCache","lutario::btree_cache","Works like a `BTreeMap`, but elements can never be removed.  Therefore, stable references (i.e. `StableDeref`) to its elements remain valid as long as the cache is not destroyed.",null,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"self"}}],[11,"get_or_insert_with","","",33,null],[0,"cache","lutario","Insert-only caching of arbitrary data",null,null],[3,"CacheEntry","lutario::cache","Implementation detail for `Cache`.",null,null],[12,"key","","",34,null],[12,"value","","",34,null],[3,"Cache","","An associative container where entries can never be removed.  Therefore, references to its entries remain valid as long as the cache is not destroyed.  Arbitrary types are allowed.",null,null],[8,"CacheKey","","",null,null],[16,"Value","","",35,null],[10,"get","","",35,null],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"cacheentry"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"cacheentry"}],"output":{"name":"bool"}}],[11,"hash","","",34,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",34,{"inputs":[{"name":"self"},{"name":"cacheentry"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",34,{"inputs":[{"name":"self"},{"name":"cacheentry"}],"output":{"name":"ordering"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"self"}}],[11,"get","","",36,null],[0,"cache2","lutario","Reference-counted caching of arbitrary data",null,null],[3,"Cached","lutario::cache2","A cached value.",null,null],[3,"Cache","","An associative array that weakly owns its elements and can store entries of arbitrary type.",null,null],[8,"Key","","",null,null],[16,"Value","","",37,null],[10,"get","","",37,null],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"cached"}],"output":{"name":"bool"}}],[11,"hash","","",38,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",38,{"inputs":[{"name":"self"},{"name":"cached"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",38,{"inputs":[{"name":"self"},{"name":"cached"}],"output":{"name":"ordering"}}],[11,"deref","","",38,null],[11,"try_unwrap","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"cache"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",39,{"inputs":[],"output":{"name":"self"}}],[11,"len","","Returns the number of active elements.",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Retrieve the value with the given key or, if it's not yet cached, compute the value.",39,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"cached"}}],[0,"half","lutario","Half-integers for angular momentum quantities.",null,null],[3,"Half","lutario::half","Type that logically behaves like half-integers, but what is actually stored is twice its logical value.",null,null],[12,"0","","",40,null],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"half"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"half"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"half"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"partial_cmp","","",40,{"inputs":[{"name":"self"},{"name":"half"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",40,{"inputs":[{"name":"self"},{"name":"half"}],"output":{"name":"bool"}}],[11,"le","","",40,{"inputs":[{"name":"self"},{"name":"half"}],"output":{"name":"bool"}}],[11,"gt","","",40,{"inputs":[{"name":"self"},{"name":"half"}],"output":{"name":"bool"}}],[11,"ge","","",40,{"inputs":[{"name":"self"},{"name":"half"}],"output":{"name":"bool"}}],[11,"cmp","","",40,{"inputs":[{"name":"self"},{"name":"half"}],"output":{"name":"ordering"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",40,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"twice","","Unwrap to twice its logical value.",40,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"double","","",40,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"abs","","",40,{"inputs":[{"name":"self"}],"output":{"name":"half"}}],[11,"in_multiplet_of","","",40,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"try_get","","Get the value if it's half-even.  Otherwise, returns `Err(self)`.",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"unwrap","","Equivalent to `try_get().unwrap()`.",40,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"abs_diff","","",40,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"half"}}],[11,"tri_range","","Obtain the range of values that satisfy the triangular condition, i.e. the range from `|self − other|` to `self + other` (inclusive).",40,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"tri_range_2","","",40,null],[11,"multiplet","","",40,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"add","","",40,null],[11,"sub","","",40,null],[11,"neg","","",40,null],[11,"zero","","",40,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mul","","",40,null],[11,"one","","",40,{"inputs":[],"output":{"name":"self"}}],[11,"to_i64","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"phase","","Returns the phase `(-1)^j`.",40,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"weight","","Returns `(2 j + 1)^(exponent / 2)`.",40,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"f64"}}],[11,"quad_range","","Obtain the range of values that satisfy the quadrangular condition.",40,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"rangeinclusive"}}],[0,"hf","lutario","Hartree–Fock method and normal ordering",null,null],[3,"Conf","lutario::hf","Configuration for a Hartree–Fock run",null,null],[12,"init_mix_factor","","",41,null],[12,"mix_modifier","","",41,null],[12,"toler","","",41,null],[12,"heevr_abstol","","",41,null],[3,"Run","","A Hartree–Fock run with ad hoc linear mixing",null,null],[12,"conf","","",42,null],[12,"h1","","",42,null],[12,"h2","","",42,null],[12,"energies","","",42,null],[12,"dcoeff","","",42,null],[12,"qcoeff","","",42,null],[12,"fock","","",42,null],[12,"fock_old","","",42,null],[12,"energy_sum","","",42,null],[12,"energy_change","","",42,null],[12,"mix_factor","","",42,null],[12,"first","","",42,null],[5,"block_mat_axpby","","`y ← α x + β y`",null,null],[5,"block_heevr","","Solve the eigenvalue problem for a Hermitian block-diagonal matrix.",null,null],[5,"weighted_sum","","Compute the J-weighted sum of orbital energies.",null,{"inputs":[{"name":"diagopj10"}],"output":{"name":"f64"}}],[5,"qcoeff","","Compute the combined coefficient matrix.",null,{"inputs":[{"name":"opj100"},{"name":"opj100"}],"output":null}],[5,"fock2","","Compute the Fock operator.",null,{"inputs":[{"name":"opj200"},{"name":"opj100"},{"name":"opj100"}],"output":null}],[5,"transform_h1","","Perform the HF transformation on a one-body operator.",null,{"inputs":[{"name":"opj100"},{"name":"opj100"},{"name":"opj100"}],"output":null}],[5,"transform_h2","","Perform the HF transformation on a two-body operator.",null,{"inputs":[{"name":"opj200"},{"name":"opj100"},{"name":"opj200"}],"output":null}],[5,"hf_energy","","Calculate the Hartree–Fock energy from transformed operators",null,{"inputs":[{"name":"opj100"},{"name":"opj200"}],"output":{"name":"f64"}}],[5,"normord","","Normal order an operator `h` and store the results in `r`.",null,{"inputs":[{"name":"mopj012"},{"name":"mopj012"}],"output":null}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"conf"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"make_run","","",41,{"inputs":[{"name":"self"},{"name":"opj100"},{"name":"opj200"}],"output":{"name":"run"}}],[11,"adjust_mix_factor","","",41,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"step","","",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"do_run","","Iterates until the convergence criterion has been met.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"imsrg","lutario","Implementation of IM-SRG(2)",null,null],[3,"Conf","lutario::imsrg","Configuration for an IM-SRG(2) run",null,null],[12,"toler","","",43,null],[12,"flow_step","","",43,null],[12,"max_flow","","",43,null],[12,"solver_conf","","",43,null],[3,"Run","","The state of an IM-SRG(2) run",null,null],[12,"conf","","You can modify `conf` while the run is ongoing, but changing `conf.solver_conf` has no effect.",44,null],[12,"scheme","","",44,null],[12,"w6j_ctx","","",44,null],[12,"solver","","",44,null],[12,"hamil","","",44,null],[12,"flow","","",44,null],[4,"DenomType","","",null,null],[13,"MoellerPlesset","","",45,null],[13,"EpsteinNesbet","","",45,null],[4,"Error","","Error type for `Run`.",null,null],[13,"MaxFlowReached","","",46,null],[13,"Solver","","",46,null],[5,"c011","","Term 011",null,{"inputs":[{"name":"f64"},{"name":"opj100"},{"name":"opj100"},{"name":"f64"}],"output":null}],[5,"c022","","Term 022",null,{"inputs":[{"name":"f64"},{"name":"opj200"},{"name":"opj200"},{"name":"f64"}],"output":null}],[5,"c111","","Term 111",null,{"inputs":[{"name":"f64"},{"name":"opj100"},{"name":"opj100"},{"name":"opj100"}],"output":null}],[5,"c112","","Term 112",null,{"inputs":[{"name":"f64"},{"name":"opj100"},{"name":"opj200"},{"name":"opj100"}],"output":null}],[5,"c121","","Term 121",null,{"inputs":[{"name":"f64"},{"name":"opj200"},{"name":"opj100"},{"name":"opj100"}],"output":null}],[5,"c1220","","Term 1220",null,{"inputs":[{"name":"f64"},{"name":"opj200"},{"name":"opj200"},{"name":"opj100"}],"output":null}],[5,"c1221","","Term 1221",null,{"inputs":[{"name":"f64"},{"name":"opj200"},{"name":"opj200"},{"name":"opj100"}],"output":null}],[5,"c212","","Term 212",null,{"inputs":[{"name":"f64"},{"name":"opj100"},{"name":"opj200"},{"name":"opj200"}],"output":null}],[5,"c221","","Term 221",null,{"inputs":[{"name":"f64"},{"name":"opj200"},{"name":"opj100"},{"name":"opj200"}],"output":null}],[5,"c2222_base","","Generic 2220/2222-type term",null,{"inputs":[{"name":"occ"},{"name":"f64"},{"name":"opj200"},{"name":"opj200"},{"name":"opj200"}],"output":null}],[5,"c2220","","Term 2220",null,{"inputs":[{"name":"f64"},{"name":"opj200"},{"name":"opj200"},{"name":"opj200"}],"output":null}],[5,"c2222","","Term 2222",null,{"inputs":[{"name":"f64"},{"name":"opj200"},{"name":"opj200"},{"name":"opj200"}],"output":null}],[5,"c2221","","Term 2221 (particle-hole term)",null,{"inputs":[{"name":"wigner6jctx"},{"name":"f64"},{"name":"opj200"},{"name":"opj200"},{"name":"opj200"}],"output":null}],[5,"linked","","Linked product of two many-body operators",null,{"inputs":[{"name":"wigner6jctx"},{"name":"f64"},{"name":"mopj012"},{"name":"mopj012"},{"name":"mopj012"}],"output":null}],[5,"commut","","Commutator of two many-body operators",null,{"inputs":[{"name":"wigner6jctx"},{"name":"f64"},{"name":"mopj012"},{"name":"mopj012"},{"name":"mopj012"}],"output":null}],[5,"monopole_elem","","Compute the monopole matrix element.",null,{"inputs":[{"name":"opj200"},{"name":"statej10"},{"name":"statej10"}],"output":{"name":"f64"}}],[5,"white_gen","","Calculate the White generator, multiply by `alpha`, and then add it to `eta`.",null,{"inputs":[{"name":"denomtype"},{"name":"f64"},{"name":"mopj012"},{"name":"mopj012"}],"output":null}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"denomtype"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"denomtype"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"conf"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"self"}}],[11,"make_run","","",43,{"inputs":[{"name":"self"},{"name":"mopj012"}],"output":{"name":"run"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"conf","","",44,{"inputs":[{"name":"self"}],"output":{"name":"conf"}}],[11,"conf_mut","","",44,{"inputs":[{"name":"self"}],"output":{"name":"conf"}}],[11,"energy","","",44,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"flow","","Retrieve the current flow parameter",44,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"hamil","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"mopj012"}}],[11,"step","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"do_run","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[0,"inf_matter","lutario","Infinite matter, both electronic and nuclear",null,null],[3,"IsoKinetic","lutario::inf_matter","Kinetic energy of two species of particles, distinguished by isospin.",null,null],[12,"up","","",47,null],[12,"down","","",47,null],[3,"Kinetic","","Kinetic energy of a single species of particles.",null,null],[12,"coeff","","Units: [energy]",48,null],[3,"Coulomb","","",null,null],[12,"coeff","","Units: [energy]",49,null],[5,"unit_wavenumber","","Returns the smallest positive wavenumber in a box.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"isokinetic"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"nucleon_mev","","Kinetic energy of nucleons in MeV.  Box length must be in fm.",47,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"diag_op1_elem","","",47,{"inputs":[{"name":"self"},{"name":"harmspiniso"}],"output":{"name":"f64"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"kinetic"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"neutron_mev","","Kinetic energy of neutrons in MeV.  Box length must be in fm.",48,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"proton_mev","","Kinetic energy of protons in MeV.  Box length must be in fm.",48,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"natural","","Kinetic energy of particles in natural units.",48,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"self"}}],[11,"diag_op1_elem","","",48,{"inputs":[{"name":"self"},{"name":"harmspin"}],"output":{"name":"f64"}}],[11,"make_op","","",48,{"inputs":[{"name":"self"},{"name":"jatlas"}],"output":{"generics":["f64"],"name":"opj100"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"coulomb"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"natural","","Coulomb interaction in natural units.",49,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"self"}}],[11,"op2_prod_elem","","",49,null],[11,"op2_elem","","",49,null],[0,"io","lutario","Input and output utility.",null,null],[3,"MapleTableParser","lutario::io","Parse numbers from a white-space separated text file. Comments delimited by `(* … *)` are ignored.",null,null],[3,"BinArrayParser","","",null,null],[4,"Compression","","Supported compression formats for input files",null,null],[13,"None","","",50,null],[13,"Gz","","gzip (DEFLATE)",50,null],[13,"Xz","","xz (LZMA)",50,null],[5,"invalid_data","","Helper function for creating `io::Error` with `io::ErrorKind::InvalidData`.",null,{"inputs":[{"name":"e"}],"output":{"name":"error"}}],[5,"fill_buf_with_retry","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"copy_while","","Copy data from a source to a sink while the predicate remains true.",null,{"inputs":[{"name":"r"},{"name":"p"},{"name":"w"}],"output":{"generics":["usize"],"name":"result"}}],[5,"split_extension","","Works just like Python's `os.path.splitext`.  Note that the returned extension includes the dot.  If there is no extension, returns an empty string as the extension.  Only works on UTF-8 strings due to limitations of the `std::path::Path` API.",null,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[5,"guess_compression","","Guess the compression based on the file extension. If the extension does not end in \"z\", then no compression is assumed.",null,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[5,"decode_compressed","","Open a compressed file and decode based on the file extension. If the extension does not end in \"z\", the file is read as-is.",null,{"inputs":[{"name":"f"},{"name":"compression"}],"output":{"generics":["read"],"name":"box"}}],[0,"parser","","Utility for parsing byte strings.",null,null],[3,"Buffer","lutario::io::parser","[internal] A fixed-size string buffer",null,null],[3,"Chain","","[internal] A chain of string buffers",null,null],[3,"SharedChain","","[internal] A reference-counted chain",null,null],[3,"Alloc","","[internal] Allocator for `Parser`",null,null],[3,"State","","The saved state of a parser.  This can later be used to restore the parser to its original state.",null,null],[3,"Parser","","Adds infinite lookahead to a `Read` stream and the ability to save and restore parsing state arbitrarily.",null,null],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"buffer"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"buffer"}}],[11,"deref","","",51,null],[11,"with_capacity","","",51,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"read_from","","",51,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"sharedchain"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",53,{"inputs":[],"output":{"name":"sharedchain"}}],[11,"drop","","",53,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",53,{"inputs":[{"generics":["refcell"],"name":"rc"},{"name":"alloc"}],"output":{"name":"self"}}],[11,"replace_buf","","",53,{"inputs":[{"name":"self"},{"name":"buffer"}],"output":{"generics":["buffer"],"name":"option"}}],[11,"get_or_allocate_next","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["sharedchain"],"name":"option"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"alloc"}}],[11,"new","","",54,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"allocate","","",54,{"inputs":[{"name":"self"}],"output":{"name":"sharedchain"}}],[11,"recycle","","",54,{"inputs":[{"name":"self"},{"generics":["refcell"],"name":"rc"}],"output":null}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",56,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"with_capacity","","The `buf_cap` sets the capacity of a single buffer chunk.  This doesn't affect the size of the lookahead (it's always infinite), as multiple chunks are permitted; this only affects the efficiency.",56,{"inputs":[{"name":"r"},{"name":"usize"}],"output":{"name":"self"}}],[11,"save","","Save the parser state for later.  While the state object lives, it will store all the bytes between the saved point and the current parser point in memory, so it's important to dispose of the state when it's no longer needed.",56,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"restore","","Restore the parser state.",56,{"inputs":[{"name":"self"},{"name":"state"}],"output":null}],[11,"refill","","",56,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"match_pred","","",56,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["option"],"name":"result"}}],[11,"match_bytes","","",56,null],[11,"munch_whitespace","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"munch_space","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"get_token","","Get the next non-whitespace token.  This may return an empty string.",56,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["string"],"name":"result"}}],[11,"get_line","","Get the next line, including the line terminator.  Returns the empty string at EOF.",56,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["string"],"name":"result"}}],[11,"next_line","","",56,{"inputs":[{"name":"self"},{"name":"string"},{"name":"usize"}],"output":{"generics":["string"],"name":"result"}}],[8,"ReadBinFrom","lutario::io","",null,null],[10,"read_bin_from","","",57,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"compression"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"new","","",58,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"status","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"match_f64","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"next","","",58,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"status","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"new","","",59,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",59,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"isqrt","lutario","Integer square root",null,null],[5,"isqrt_i64","lutario::isqrt","Calculate the integer square root `⌊√n⌋`.",null,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[5,"isqrt_u64","","Calculate the integer square root `⌊√n⌋`.",null,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[0,"j_scheme","lutario","Implementation of the J-scheme abstraction.",null,null],[3,"JChan","lutario::j_scheme","",null,null],[12,"j","","Angular momentum magnitude",60,null],[12,"k","","Linear part of the channel.  If `K = u32` then this is usually some system-dependent integer of unknown interpretation.",60,null],[3,"JPartedOrb","","",null,null],[12,"lu","","",61,null],[12,"j","","",61,null],[12,"x","","",61,null],[3,"JAtlas","","",null,null],[12,"linchan1_chart","","`k1 ↔ κ1`",62,null],[12,"linchan2_chart","","`k2 ↔ κ2`",62,null],[12,"aux_encoder","","`(l1, μ1) → u1`",62,null],[12,"aux_decoder","","`i1 → μ1`",62,null],[12,"scheme","","",62,null],[3,"BasisSchemeJ10","","",null,null],[12,"layout","","",63,null],[12,"chan_chart","","",63,null],[12,"orb_from_ix","","`p → i`",63,null],[12,"orb_to_ix","","`i → p`",63,null],[12,"j_set","","set of all `j` values (may include false positives)",63,null],[3,"BasisSchemeJ20","","",null,null],[12,"layout","","",64,null],[12,"chan_chart","","",64,null],[12,"aux_encoder","","`(j12, i1, i2) → (l12, u12)`",64,null],[12,"aux_decoder","","`i12 → (i1, i2)`",64,null],[12,"jj_k12_pp","","`(j1, j2) → k12 → [(p1, p2)]`",64,null],[3,"BasisSchemeJ21","","",null,null],[12,"layout","","",65,null],[12,"chan_chart","","",65,null],[12,"aux_encoder","","`(j12, p1, p2) → (l12, u12)`",65,null],[12,"aux_decoder","","`p12 → (p1, p2)`",65,null],[3,"JjjjBlockInfo","","",null,null],[12,"naaaa","","",66,null],[12,"j12_range","","",66,null],[12,"j14_range","","",66,null],[12,"imap_200","","",66,null],[12,"imap_211","","",66,null],[3,"PandyaScheme","","",null,null],[12,"block_infos","","",67,null],[3,"StateMask10","","",null,null],[12,"x_mask","","`occ1 -> needed`",68,null],[3,"StateMask20","","",null,null],[12,"x_mask","","`occ12 -> needed`",69,null],[12,"xx_mask","","`(occ1 + occ2 * 2) -> needed`",69,null],[3,"StateMask21","","",null,null],[12,"x_mask","","`(occ1 + occ2 * 2) -> needed`",70,null],[3,"StatesJ10","","",null,null],[12,"l_range","","",71,null],[12,"states","","",71,null],[3,"CostatesJ10","","",null,null],[12,"scheme","","",72,null],[12,"u_range","","",72,null],[12,"x","","",72,null],[12,"l","","",72,null],[12,"mask","","",72,null],[3,"StatesJ20","","",null,null],[12,"l_range","","",73,null],[12,"states","","",73,null],[3,"CostatesJ20","","",null,null],[12,"scheme","","",74,null],[12,"state","","",74,null],[12,"u_range","","",74,null],[12,"x","","",74,null],[12,"l","","",74,null],[12,"mask","","",74,null],[3,"CostatesJ21","","",null,null],[12,"scheme","","",75,null],[12,"u_range","","",75,null],[12,"x","","",75,null],[12,"l","","",75,null],[12,"mask","","",75,null],[3,"StateJ10","","",null,null],[12,"scheme","","",76,null],[12,"s1","","",76,null],[3,"StateJ20","","",null,null],[12,"scheme","","",77,null],[12,"lu12","","",77,null],[12,"j12","","",77,null],[12,"s1","","",77,null],[12,"s2","","",77,null],[12,"permut","","",77,null],[12,"num_permut","","Number of states related by antisymmetry",77,null],[12,"get_factor","","",77,null],[12,"set_factor","","`set_factor == 1.0 / get_factor`",77,null],[12,"add_factor","","`add_factor == 1.0 / (get_factor * num_permut)`",77,null],[3,"StateJ21","","",null,null],[12,"scheme","","",78,null],[12,"lu12","","",78,null],[12,"j12","","",78,null],[12,"s1","","",78,null],[12,"s2","","",78,null],[3,"JScheme","","",null,null],[12,"basis_10","","",79,null],[12,"basis_20","","",79,null],[12,"basis_21","","",79,null],[12,"pandya","","",79,null],[3,"BasisJ10","","",null,null],[3,"BasisJ20","","",null,null],[3,"BasisJ21","","",null,null],[5,"new_mop_j012","","",null,{"inputs":[{"name":"arc"}],"output":{"name":"mopj012"}}],[5,"set_zero_mop_j012","","",null,{"inputs":[{"name":"mopj012"}],"output":null}],[5,"rand_mop_j012","","",null,{"inputs":[{"name":"arc"},{"name":"rng"}],"output":{"generics":["f64"],"name":"mopj012"}}],[5,"read_mop_j012_txt","","Read M-scheme matrix elements of a (0, 1, 2)-body operator from a text file, where states are encoded as orbital indices.",null,{"inputs":[{"name":"arc"},{"name":"bufread"}],"output":{"generics":["mopj012"],"name":"result"}}],[5,"extent_mop_j012_as_tri","","",null,{"inputs":[{"name":"mopj012"}],"output":{"name":"usize"}}],[5,"clone_mop_j012_to_tri_slice","","",null,null],[5,"clone_mop_j012_from_tri_slice","","",null,null],[5,"check_eq_op_j100","","",null,{"inputs":[{"name":"toler"},{"name":"opj100"},{"name":"opj100"}],"output":{"generics":["string"],"name":"result"}}],[5,"check_eq_op_j200","","",null,{"inputs":[{"name":"toler"},{"name":"opj200"},{"name":"opj200"}],"output":{"generics":["string"],"name":"result"}}],[5,"check_eq_op_j211","","",null,{"inputs":[{"name":"toler"},{"name":"opj211"},{"name":"opj211"}],"output":{"generics":["string"],"name":"result"}}],[5,"check_eq_mop_j012","","",null,{"inputs":[{"name":"toler"},{"name":"mopj012"},{"name":"mopj012"}],"output":{"generics":["string"],"name":"result"}}],[5,"calc_jjjj_naaaa","","",null,null],[5,"foreach_jjjjk12_block","","",null,null],[5,"foreach_jjjjk12_elem","","",null,null],[5,"op200_to_op211","","Pandya transformation.",null,{"inputs":[{"name":"wigner6jctx"},{"name":"f64"},{"name":"opj200"},{"name":"opj211"}],"output":null}],[5,"op211_to_op200","","Inverse Pandya transformation.",null,{"inputs":[{"name":"wigner6jctx"},{"name":"f64"},{"name":"opj211"},{"name":"opj200"}],"output":null}],[6,"JOrbBasis","","",null,null],[6,"DiagOpJ10","","A diagonal standard-coupled one-body matrix",null,null],[6,"OpJ100","","A standard-coupled one-body matrix",null,null],[6,"OpJ200","","A standard-coupled two-body matrix",null,null],[6,"OpJ211","","A Pandya-coupled two-body matrix",null,null],[6,"OpBlockJ200","","Block of a standard-coupled two-body matrix",null,null],[6,"MopJ012","","A standard-coupled (0, 1, 2)-body matrix",null,null],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"jchan"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"jchan"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"jchan"}],"output":{"name":"bool"}}],[11,"hash","","",60,null],[11,"from","","",60,{"inputs":[{"name":"k"}],"output":{"name":"self"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"jpartedorb"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"jweight","","",61,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"f64"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","","",62,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"new","","",62,{"inputs":[{"name":"jorbbasis"}],"output":{"name":"self"}}],[11,"decode","","",62,{"inputs":[{"name":"self"},{"name":"statej10"}],"output":{"generics":["chanstate"],"name":"option"}}],[11,"encode","","",62,{"inputs":[{"name":"self"},{"name":"chanstate"}],"output":{"generics":["statej10"],"name":"option"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"basisschemej10"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",63,null],[11,"layout","","",63,{"inputs":[{"name":"self"}],"output":{"name":"basislayout"}}],[11,"num_chans","","",63,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"auxs","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"occ"},{"name":"occ"}],"output":{"generics":["u32"],"name":"range"}}],[11,"aux_range","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"occ"}],"output":{"generics":["u32"],"name":"range"}}],[11,"part_offset","","",63,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"occ","","",63,{"inputs":[{"name":"self"},{"name":"chanstate"}],"output":{"name":"occ"}}],[11,"j_chan","","",63,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"jchan"}}],[11,"decode","","",63,{"inputs":[{"name":"self"},{"name":"chanstate"}],"output":{"name":"orb"}}],[11,"encode","","",63,{"inputs":[{"name":"self"},{"name":"orb"}],"output":{"name":"chanstate"}}],[11,"orb_from_ix","","Panics if the argument is invalid.",63,{"inputs":[{"name":"self"},{"name":"orbix"}],"output":{"name":"orb"}}],[11,"orb_to_ix","","Panics if the argument is invalid.",63,{"inputs":[{"name":"self"},{"name":"orb"}],"output":{"name":"orbix"}}],[11,"jjjj_blocks","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"basisschemej20"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",64,{"inputs":[{"name":"basisschemej10"},{"name":"hashchart"},{"name":"hashchart"}],"output":{"name":"self"}}],[11,"layout","","",64,{"inputs":[{"name":"self"}],"output":{"name":"basislayout"}}],[11,"num_chans","","",64,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"auxs","","",64,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"occ20"},{"name":"occ20"}],"output":{"generics":["u32"],"name":"range"}}],[11,"aux_range","","",64,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"occ20"}],"output":{"generics":["u32"],"name":"range"}}],[11,"j_chan","","",64,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"jchan"}}],[11,"decode","","",64,null],[11,"encode","","",64,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"half"},{"name":"orb"},{"name":"orb"}],"output":{"generics":["chanstate"],"name":"option"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"basisschemej21"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",65,{"inputs":[{"name":"basisschemej10"},{"name":"hashchart"},{"name":"hashchart"}],"output":{"name":"self"}}],[11,"num_chans","","",65,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"auxs","","",65,null],[11,"aux_range","","",65,null],[11,"j_chan","","",65,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"jchan"}}],[11,"decode","","",65,null],[11,"encode","","",65,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"half"},{"name":"orb"},{"name":"orb"}],"output":{"generics":["chanstate"],"name":"option"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"jjjjblockinfo"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"pandyascheme"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",67,{"inputs":[{"name":"arc"}],"output":{"name":"self"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"statemask10"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",68,null],[11,"test_occ","","",68,{"inputs":[{"name":"self"},{"name":"occ"}],"output":{"name":"bool"}}],[11,"next_occ","","",68,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"generics":["occ"],"name":"option"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"statemask20"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",69,null],[11,"test_occ20","","",69,{"inputs":[{"name":"self"},{"name":"occ20"}],"output":{"name":"bool"}}],[11,"test_occ","","",69,null],[11,"next_occ20","","",69,{"inputs":[{"name":"self"},{"name":"fence"}],"output":{"generics":["occ20"],"name":"option"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"statemask21"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",70,null],[11,"test_occ","","",70,null],[11,"next_occ","","",70,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"statesj10"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",71,{"inputs":[{"name":"jscheme"},{"name":"statemask10"}],"output":{"name":"self"}}],[11,"next","","",71,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"costatesj10"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",72,{"inputs":[{"name":"jscheme"},{"name":"u32"},{"name":"statemask10"}],"output":{"name":"self"}}],[11,"scheme","","",72,{"inputs":[{"name":"self"}],"output":{"name":"jscheme"}}],[11,"mask","","",72,{"inputs":[{"name":"self"}],"output":{"name":"statemask10"}}],[11,"next","","",72,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"statesj20"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",73,{"inputs":[{"name":"jscheme"},{"name":"statemask20"}],"output":{"name":"self"}}],[11,"next","","",73,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"costatesj20"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",74,{"inputs":[{"name":"jscheme"},{"name":"u32"},{"name":"statemask20"}],"output":{"name":"self"}}],[11,"scheme","","",74,{"inputs":[{"name":"self"}],"output":{"name":"jscheme"}}],[11,"mask","","",74,{"inputs":[{"name":"self"}],"output":{"name":"statemask20"}}],[11,"next","","",74,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"costatesj21"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",75,{"inputs":[{"name":"jscheme"},{"name":"u32"},{"name":"statemask21"}],"output":{"name":"self"}}],[11,"scheme","","",75,{"inputs":[{"name":"self"}],"output":{"name":"jscheme"}}],[11,"mask","","",75,{"inputs":[{"name":"self"}],"output":{"name":"statemask21"}}],[11,"next","","",75,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"statej10"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",76,null],[11,"j","","",76,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"half"}}],[11,"lu","","",76,{"inputs":[{"name":"self"}],"output":{"name":"chanstate"}}],[11,"costates_10","","",76,null],[11,"combine_with_10","","",76,{"inputs":[{"name":"self"},{"name":"self"},{"generics":["i32"],"name":"half"}],"output":{"generics":["statej20"],"name":"option"}}],[11,"combine_with_10_to_21","","",76,{"inputs":[{"name":"self"},{"name":"self"},{"generics":["i32"],"name":"half"}],"output":{"generics":["statej21"],"name":"option"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"statej20"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_permut","","",77,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",77,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"j","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"half"}}],[11,"lu","","",77,{"inputs":[{"name":"self"}],"output":{"name":"chanstate"}}],[11,"jweight","","",77,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"f64"}}],[11,"costates_20","","",77,null],[11,"split_to_10_10","","",77,null],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"statej21"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"j","","",78,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"half"}}],[11,"lu","","",78,{"inputs":[{"name":"self"}],"output":{"name":"chanstate"}}],[11,"jweight","","",78,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"f64"}}],[11,"costates_21","","",78,null],[11,"split_to_10_10","","",78,null],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",79,{"inputs":[{"name":"basisschemej10"},{"name":"basisschemej20"},{"name":"basisschemej21"}],"output":{"name":"arc"}}],[11,"pandya","","",79,{"inputs":[{"name":"self"}],"output":{"generics":["pandyascheme"],"name":"arc"}}],[11,"parted_orb","","",79,{"inputs":[{"name":"self"},{"name":"chanstate"}],"output":{"name":"jpartedorb"}}],[11,"state_10","","",79,{"inputs":[{"name":"self"},{"name":"chanstate"}],"output":{"name":"statej10"}}],[11,"state_20","","",79,{"inputs":[{"name":"self"},{"name":"chanstate"}],"output":{"name":"statej20"}}],[11,"raw_state_20","","",79,{"inputs":[{"name":"self"},{"name":"chanstate"},{"name":"orb"},{"name":"orb"}],"output":{"name":"statej20"}}],[11,"raw_state_20_ord","","Note: s1 and s2 must be in natural order.  Otherwise, the caller is responsible for adjust the permut.",79,{"inputs":[{"name":"self"},{"name":"chanstate"},{"name":"orb"},{"name":"orb"}],"output":{"name":"statej20"}}],[11,"state_21","","",79,{"inputs":[{"name":"self"},{"name":"chanstate"}],"output":{"name":"statej21"}}],[11,"raw_state_21","","",79,{"inputs":[{"name":"self"},{"name":"chanstate"},{"name":"orb"},{"name":"orb"}],"output":{"name":"statej21"}}],[11,"states_10","","",79,null],[11,"states_20","","",79,null],[11,"costates_10","","",79,null],[11,"costates_20","","",79,null],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"basisj10"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",80,{"inputs":[],"output":{"name":"basisj10"}}],[11,"layout","","",80,null],[11,"reify_state","","",76,null],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"basisj20"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",81,{"inputs":[],"output":{"name":"basisj20"}}],[11,"layout","","",81,null],[11,"reify_state","","",77,null],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"basisj21"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",82,{"inputs":[],"output":{"name":"basisj21"}}],[11,"layout","","",82,null],[11,"reify_state","","",78,null],[0,"linalg","lutario","Linear algebra things",null,null],[4,"Part","lutario::linalg","",null,null],[13,"Upper","","",83,null],[13,"Lower","","",83,null],[4,"Transpose","","",null,null],[13,"None","","",84,null],[13,"Ordinary","","",84,null],[13,"Conjugate","","",84,null],[3,"AdjSym","","",null,null],[4,"EigenvalueRange","","Desired range of eigenvalues.",null,null],[13,"All","","",85,null],[13,"Values","","Half-open range of desired eigenvalues.",85,null],[13,"Indices","","1-indexed indices of the desired eigenvalues in ascending order.",85,null],[5,"part_to_u8","","",null,{"inputs":[{"name":"part"}],"output":{"name":"u8"}}],[5,"gemm","","A thin wrapper over `Gemm::gemm` that panics if the buffers are too small or if the sizes don't match.  We omit `Layout` because it can be trivially emulated by exchanging `a` and `b`.",null,{"inputs":[{"name":"transpose"},{"name":"transpose"},{"name":"t"},{"name":"matref"},{"name":"matref"},{"name":"t"},{"name":"matmut"}],"output":null}],[5,"heevr","","If `left` is true, calculate left eigenvectors stored as rows; otherwise, calculate right eigenvectors stored as columns.",null,null],[5,"heevr_n","","If `left` is true, calculate left eigenvalues; otherwise, calculate right eigenvalues",null,null],[5,"mat_axpby","","`y ← α × x + β × y`",null,{"inputs":[{"name":"t"},{"name":"matref"},{"name":"t"},{"name":"matmut"}],"output":null}],[0,"lamch","","Defines and re-exports some floating-point constants following the LAPACK convention.  Basically, this module contains anything you would otherwise obtain using `lamch`.",null,null],[0,"f32","lutario::linalg::lamch","",null,null],[17,"BASE","lutario::linalg::lamch::f32","The radix or base of the internal representation of `f32`.",null,null],[17,"T","","Number of significant digits in base 2.",null,null],[17,"PREC","","Difference between `1.0` and the next largest representable number.",null,null],[17,"RMIN","","Smallest positive normal `f32` value.",null,null],[17,"RMAX","","Largest finite `f32` value.",null,null],[17,"EMIN","","One greater than the minimum possible normal power of 2 exponent.",null,null],[17,"EMAX","","Maximum possible power of 2 exponent.",null,null],[17,"EPS","","Relative machine epsilon according to the LAPACK convention. Equal to half of `std::*::EPSILON`.",null,null],[17,"RND","","Whether proper rounding (`true`) or chopping (`false`) occurs in addition.",null,null],[17,"SFMIN","","Safe minimum such that `1.0 / SFMIN` does not overflow.",null,null],[0,"f64","lutario::linalg::lamch","",null,null],[17,"BASE","lutario::linalg::lamch::f64","The radix or base of the internal representation of `f64`.",null,null],[17,"T","","Number of significant digits in base 2.",null,null],[17,"PREC","","Difference between `1.0` and the next largest representable number.",null,null],[17,"RMIN","","Smallest positive normal `f64` value.",null,null],[17,"RMAX","","Largest finite `f64` value.",null,null],[17,"EMIN","","One greater than the minimum possible normal power of 2 exponent.",null,null],[17,"EMAX","","Maximum possible power of 2 exponent.",null,null],[17,"EPS","","Relative machine epsilon according to the LAPACK convention. Equal to half of `std::*::EPSILON`.",null,null],[17,"RND","","Whether proper rounding (`true`) or chopping (`false`) occurs in addition.",null,null],[17,"SFMIN","","Safe minimum such that `1.0 / SFMIN` does not overflow.",null,null],[17,"HERMITIAN","lutario::linalg","",null,null],[17,"ANTIHERMITIAN","","",null,null],[17,"SYMMETRIC","","",null,null],[17,"ANTISYMMETRIC","","",null,null],[8,"Conj","","",null,null],[10,"conj","","",86,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"NormSqr","","",null,null],[16,"Real","","",87,null],[10,"norm_sqr","","",87,null],[8,"Gemm","","",null,null],[10,"gemm","","",88,null],[8,"Heevr","","",null,null],[10,"heevr","","",89,null],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"adjsym"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",90,{"inputs":[],"output":{"name":"adjsym"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"adjsym"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"adjsym"}],"output":{"name":"bool"}}],[11,"apply","","",90,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"eigenvaluerange"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",85,{"inputs":[],"output":{"name":"self"}}],[11,"to_raw","","",85,null],[0,"mat","lutario","BLAS-compatible matrix data types.",null,null],[3,"MatShape","lutario::mat","The indexing convention is row-major.",null,null],[12,"stride","","The separation between rows.  Must be at least `num_cols`.",91,null],[12,"num_rows","","The slow index.",91,null],[12,"num_cols","","The fast index.",91,null],[3,"ValidMatShape","","",null,null],[3,"MatRef","","",null,null],[3,"MatMut","","",null,null],[3,"MatRows","","",null,null],[3,"MatRowsMut","","",null,null],[3,"Mat","","",null,null],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"matshape"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",91,{"inputs":[],"output":{"name":"matshape"}}],[11,"is_valid","","",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"packed","","",91,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"validate","","",91,{"inputs":[{"name":"self"}],"output":{"generics":["validmatshape"],"name":"result"}}],[11,"assert_valid","","",91,{"inputs":[{"name":"self"}],"output":{"name":"validmatshape"}}],[11,"contains","","",91,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"validmatshape"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",92,{"inputs":[],"output":{"name":"validmatshape"}}],[11,"deref","","",92,null],[11,"extent","","",92,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"raw_index","","",92,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"offset_unchecked","","",92,{"inputs":[{"name":"self"},{"name":"p"},{"name":"usize"},{"name":"usize"}],"output":{"name":"p"}}],[11,"row_width","","",92,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","",92,null],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",93,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"matref"}],"output":{"name":"bool"}}],[11,"index","","",93,null],[11,"new","","Split `*slice` into two parts: the first part becomes the matrix, while the second part is stored back in `slice`.  If the slice is too short, `None` is returned.",93,null],[11,"from_raw","","",93,null],[11,"shape","","",93,{"inputs":[{"name":"self"}],"output":{"name":"validmatshape"}}],[11,"num_rows","","",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"num_cols","","",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"dims","","",93,null],[11,"stride","","",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"extent","","",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ptr","","",93,null],[11,"index","","",93,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get","","",93,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_unchecked","","",93,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"offset_unchecked","","",93,null],[11,"rows","","",93,{"inputs":[{"name":"self"}],"output":{"name":"matrows"}}],[11,"row","","",93,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"row_unchecked","","",93,null],[11,"to_slice","","Unsafe because the slice includes padding elements as well.",93,null],[11,"slice","","",93,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"},{"generics":["usize"],"name":"range"}],"output":{"name":"self"}}],[11,"split_at_row","","",93,null],[11,"split_at_col","","",93,null],[11,"extent_as_tri","","",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone_to_tri_slice","","Clone the lower triangle of the matrix into the given array and then return the remaining part of the array.",93,null],[11,"len","","",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",94,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"matmut"}],"output":{"name":"bool"}}],[11,"index","","",94,null],[11,"index_mut","","",94,null],[11,"new","","Split `*slice` into two parts: the first part becomes the matrix, while the second part is stored back in `slice`.  If the slice is too short, `None` is returned.",94,null],[11,"from_raw","","",94,null],[11,"shape","","",94,{"inputs":[{"name":"self"}],"output":{"name":"validmatshape"}}],[11,"num_rows","","",94,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"num_cols","","",94,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"dims","","",94,null],[11,"stride","","",94,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_ref","","",94,{"inputs":[{"name":"self"}],"output":{"name":"matref"}}],[11,"as_ref","","",94,{"inputs":[{"name":"self"}],"output":{"name":"matref"}}],[11,"as_mut","","",94,{"inputs":[{"name":"self"}],"output":{"name":"matmut"}}],[11,"as_ptr","","",94,null],[11,"index","","",94,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get","","",94,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_unchecked","","",94,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"offset_unchecked","","",94,null],[11,"rows","","",94,{"inputs":[{"name":"self"}],"output":{"name":"matrowsmut"}}],[11,"row","","",94,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"row_unchecked","","",94,null],[11,"to_slice","","Unsafe because the slice includes padding elements as well.",94,null],[11,"slice","","",94,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"range"},{"generics":["usize"],"name":"range"}],"output":{"name":"self"}}],[11,"split_at_row","","",94,null],[11,"split_at_col","","",94,null],[11,"fill","","",94,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"clone_from_ref","","",94,{"inputs":[{"name":"self"},{"name":"matref"}],"output":null}],[11,"clone_from_tri_slice","","",94,null],[11,"clone_from_trs_mat","","",94,{"inputs":[{"name":"self"},{"name":"trsmat"}],"output":null}],[11,"len","","",94,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_zero","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"scale","","",94,null],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"matrows"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next_back","","",95,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",96,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",97,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"drop","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",97,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"mat"}],"output":{"name":"bool"}}],[11,"index","","",97,null],[11,"index_mut","","",97,null],[11,"from","","",97,{"inputs":[{"generics":["vec"],"name":"vec"}],"output":{"name":"self"}}],[11,"replicate","","",97,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"t"}],"output":{"name":"self"}}],[11,"zero","","",97,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_vec","","Panics if the vector is too short.",97,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_vec_unchecked","","",97,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_raw","","",97,null],[11,"shape","","",97,{"inputs":[{"name":"self"}],"output":{"name":"validmatshape"}}],[11,"extent","","",97,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ptr","","",97,null],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"matref"}}],[11,"as_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"matmut"}}],[11,"as_slice","","",97,null],[11,"as_slice_mut","","",97,null],[11,"into_boxed_slice","","",97,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"into_vec","","",97,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_transpose","","",97,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ref_add","","",97,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"len","","",97,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_zero","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"scale","","",97,null],[0,"minnesota","lutario","Minnesota interaction of nucleons",null,null],[3,"Gaussian","lutario::minnesota","A Gaussian potential:",null,null],[12,"v0","","",98,null],[12,"kappa","","",98,null],[3,"Minnesota","","Parameters for the Minnesota interaction.",null,null],[12,"r","","",99,null],[12,"t","","",99,null],[12,"s","","",99,null],[3,"MinnesotaBox","","Minnesota interaction in the 3D plane-wave basis.",null,null],[12,"minnesota","","",100,null],[12,"box_len","","",100,null],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"gaussian"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"elem","","Calculate the essential part of the matrix element with momentum transfer `q` in the 3D plane-wave basis.  Specifically, it calculates:",98,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"minnesota"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"minnesotabox"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",100,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"nucleon_prod_elem","","",100,{"inputs":[{"name":"self"},{"name":"harmspiniso"},{"name":"harmspiniso"},{"name":"harmspiniso"},{"name":"harmspiniso"}],"output":{"name":"f64"}}],[11,"neutron_elem","","",100,{"inputs":[{"name":"self"},{"name":"harmspin"},{"name":"harmspin"},{"name":"harmspin"},{"name":"harmspin"}],"output":{"name":"f64"}}],[11,"make_op_neutron","","",100,{"inputs":[{"name":"self"},{"name":"jatlas"}],"output":{"generics":["f64"],"name":"opj200"}}],[0,"nuclei","lutario","Nuclei systems.",null,null],[3,"ORB_ANG_CHART","lutario::nuclei","",null,null],[3,"OrbAng","","Orbital angular momentum magnitude (l)",null,null],[12,"0","","",101,null],[3,"Nj","","Principal quantum number and total angular momentum magnitude",null,null],[12,"n","","",102,null],[12,"j","","",102,null],[3,"Nlj","","Principal quantum number, orbital angular momentum magnitude, and total angular momentum magnitude",null,null],[12,"n","","Principal quantum number (n)",103,null],[12,"l","","Orbital angular momentum magnitude (l)",103,null],[12,"j","","Total angular momentum magnitude (j)",103,null],[3,"Npj","","Principal quantum number, parity, and total angular momentum magnitude",null,null],[12,"n","","Principal quantum number (n)",104,null],[12,"p","","Parity (π)",104,null],[12,"j","","Total angular momentum magnitude (j)",104,null],[3,"Npjw","","Principal quantum number, parity, total angular momentum magnitude, and isospin projection.",null,null],[12,"n","","Principal quantum number (n)",105,null],[12,"p","","Parity (π)",105,null],[12,"j","","Total angular momentum magnitude (j)",105,null],[12,"w","","Isospin projection (w)",105,null],[3,"Npjmw","","Principal quantum number, parity, total angular momentum magnitude, total angular momentum projection, and isospin projection.",null,null],[12,"n","","Principal quantum number (n)",106,null],[12,"p","","Parity (π)",106,null],[12,"j","","Total angular momentum magnitude (j)",106,null],[12,"m","","Total angular momentum projection (m)",106,null],[12,"w","","Isospin projection (w)",106,null],[3,"Pj","","Parity and total angular momentum magnitude",null,null],[12,"p","","",107,null],[12,"j","","",107,null],[3,"Pjtw","","Parity, total angular momentum magnitude, isospin magnitude, and isospin projection.",null,null],[12,"p","","",108,null],[12,"j","","",108,null],[12,"t","","",108,null],[12,"w","","",108,null],[3,"Pmw","","Parity, total angular momentum projection, and isospin projection",null,null],[12,"p","","",109,null],[12,"m","","",109,null],[12,"w","","",109,null],[3,"Pw","","Parity and isospin projection",null,null],[12,"p","","",110,null],[12,"w","","",110,null],[3,"JtwNpjKey","","",null,null],[12,"j12","","",111,null],[12,"t12","","",111,null],[12,"w12","","",111,null],[12,"npj1","","",111,null],[12,"npj2","","",111,null],[12,"npj3","","",111,null],[12,"npj4","","",111,null],[3,"JNpjwKey","","",null,null],[12,"j12","","",112,null],[12,"npjw1","","",112,null],[12,"npjw2","","",112,null],[12,"npjw3","","",112,null],[12,"npjw4","","",112,null],[3,"Ho3dIter","","Iterator for 3D harmonic oscillator states in (e, l, j)-order.",null,null],[12,"0","","",113,null],[3,"Ho3dTrunc","","Truncation scheme for a 3D harmonic oscillator basis",null,null],[12,"e_max","","Maximum shell index",114,null],[12,"n_max","","Maximum principal quantum number",114,null],[12,"l_max","","Maximum orbital angular momentum magnitude",114,null],[3,"Ho3dModTrunc","","Modified 3D harmonic oscillator basis truncation",null,null],[12,"trunc","","",115,null],[12,"incl","","",115,null],[12,"excl","","",115,null],[3,"Nucleons","","",null,null],[12,"all","","",116,null],[12,"occ","","",116,null],[3,"SimpleNucleus","","",null,null],[12,"e_max","","Maximum index of all available shells.",117,null],[12,"e_fermi_n","","Maximum index of filled neutron shell.",117,null],[12,"e_fermi_p","","Maximum index of filled proton shell.",117,null],[12,"orbs","","Additional occupied orbitals included or excluded, specified using spectroscopic notation (see `FromStr` implementation for `Npjw`) with a prefix `+` indicating inclusion and `-` indicating exclusion.",117,null],[3,"Nucleus","","",null,null],[12,"neutrons","","",118,null],[12,"protons","","",118,null],[5,"kinetic_ho3d_mat_elem","","Calculate the kinetic energy matrix element in a 3D harmonic oscillator basis:",null,{"inputs":[{"name":"npj"},{"name":"npj"}],"output":{"name":"f64"}}],[5,"make_ke_op_j","","",null,{"inputs":[{"name":"jatlas"},{"name":"f64"}],"output":{"generics":["f64"],"name":"opj100"}}],[5,"make_ke_op_m","","",null,{"inputs":[{"name":"jatlas"},{"name":"f64"}],"output":{"generics":["f64"],"name":"opj100"}}],[5,"make_ho3d_op_j","","",null,{"inputs":[{"name":"jatlas"},{"name":"f64"}],"output":{"generics":["f64"],"name":"opj100"}}],[5,"make_ho3d_op_m","","",null,{"inputs":[{"name":"jatlas"},{"name":"f64"}],"output":{"generics":["f64"],"name":"opj100"}}],[5,"make_v_op_j","","Load two-body matrix elements from the given hash table.  Note that this function only uses canonicalized keys.",null,{"inputs":[{"name":"jatlas"},{"name":"fnvhashmap"}],"output":{"generics":["f64"],"name":"opj200"}}],[5,"op1_j_to_m","","",null,{"inputs":[{"name":"jatlas"},{"name":"jatlas"},{"name":"opj100"}],"output":{"generics":["f64"],"name":"opj100"}}],[5,"op2_j_to_m","","",null,{"inputs":[{"name":"jatlas"},{"name":"jatlas"},{"name":"opj200"}],"output":{"generics":["f64"],"name":"opj200"}}],[0,"darmstadt","","Darmstadt ME2J matrix element format.",null,null],[3,"Me2j","lutario::nuclei::darmstadt","",null,null],[12,"npjs","","",119,null],[12,"e12_max","","",119,null],[3,"Me2jGuessLoader","","ME2J loader that tries to guess parameters based on filename unless explicitly overridden.",null,null],[12,"path","","",120,null],[12,"compression","","",120,null],[12,"binary","","",120,null],[12,"trunc","","",120,null],[12,"e12_max","","",120,null],[12,"omega","","",120,null],[3,"Me2jLoader","","",null,null],[12,"path","","",121,null],[12,"compression","","",121,null],[12,"binary","","",121,null],[12,"trunc","","",121,null],[12,"e12_max","","",121,null],[12,"omega","","",121,null],[5,"load_me2j_j","","",null,null],[5,"load_me2j_jt","","",null,null],[17,"TPP_FACTOR","","This factor is used to adjust ME2J matrix elements for the pairwise dot product of momentum (`tpp` elements).",null,null],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"me2j"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"foreach_isospin_block","","",119,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"foreach_elem","","",119,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"me2jguessloader"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",120,{"inputs":[],"output":{"name":"self"}}],[11,"guess","","",120,{"inputs":[{"name":"self"}],"output":{"generics":["me2jloader"],"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"me2jloader"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"load","","",121,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[0,"vrenorm","lutario::nuclei","VRenormalize matrix element format used in CENS MBPT.",null,null],[3,"VintLoader","lutario::nuclei::vrenorm","",null,null],[12,"path","","",122,null],[12,"sp","","",122,null],[5,"load_sp_table","","",null,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[5,"load_vint_table","","",null,null],[5,"load_sp_table_bin","","",null,{"inputs":[{"name":"read"}],"output":{"generics":["vec"],"name":"result"}}],[5,"load_vint_table_bin","","",null,null],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"vintloader"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"load","","",122,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref","lutario::nuclei","",123,{"inputs":[{"name":"self"}],"output":{"name":"hashchart"}}],[11,"initialize","","",123,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"orbang"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"orbang"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"orbang"}],"output":{"name":"bool"}}],[11,"hash","","",101,null],[11,"partial_cmp","","",101,{"inputs":[{"name":"self"},{"name":"orbang"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",101,{"inputs":[{"name":"self"},{"name":"orbang"}],"output":{"name":"bool"}}],[11,"le","","",101,{"inputs":[{"name":"self"},{"name":"orbang"}],"output":{"name":"bool"}}],[11,"gt","","",101,{"inputs":[{"name":"self"},{"name":"orbang"}],"output":{"name":"bool"}}],[11,"ge","","",101,{"inputs":[{"name":"self"},{"name":"orbang"}],"output":{"name":"bool"}}],[11,"cmp","","",101,{"inputs":[{"name":"self"},{"name":"orbang"}],"output":{"name":"ordering"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",101,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"nj"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"nj"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"nj"}],"output":{"name":"bool"}}],[11,"hash","","",102,null],[11,"partial_cmp","","",102,{"inputs":[{"name":"self"},{"name":"nj"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",102,{"inputs":[{"name":"self"},{"name":"nj"}],"output":{"name":"bool"}}],[11,"le","","",102,{"inputs":[{"name":"self"},{"name":"nj"}],"output":{"name":"bool"}}],[11,"gt","","",102,{"inputs":[{"name":"self"},{"name":"nj"}],"output":{"name":"bool"}}],[11,"ge","","",102,{"inputs":[{"name":"self"},{"name":"nj"}],"output":{"name":"bool"}}],[11,"cmp","","",102,{"inputs":[{"name":"self"},{"name":"nj"}],"output":{"name":"ordering"}}],[11,"from","","",102,{"inputs":[{"name":"npjmw"}],"output":{"name":"self"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"nlj"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"nlj"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"nlj"}],"output":{"name":"bool"}}],[11,"hash","","",103,null],[11,"partial_cmp","","",103,{"inputs":[{"name":"self"},{"name":"nlj"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",103,{"inputs":[{"name":"self"},{"name":"nlj"}],"output":{"name":"bool"}}],[11,"le","","",103,{"inputs":[{"name":"self"},{"name":"nlj"}],"output":{"name":"bool"}}],[11,"gt","","",103,{"inputs":[{"name":"self"},{"name":"nlj"}],"output":{"name":"bool"}}],[11,"ge","","",103,{"inputs":[{"name":"self"},{"name":"nlj"}],"output":{"name":"bool"}}],[11,"cmp","","",103,{"inputs":[{"name":"self"},{"name":"nlj"}],"output":{"name":"ordering"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",103,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",103,{"inputs":[{"name":"npj"}],"output":{"name":"self"}}],[11,"from","","",103,{"inputs":[{"name":"npjw"}],"output":{"name":"self"}}],[11,"shell","","Shell index (e)",103,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"osc_energy","","Returns harmonic oscillator energy in natural units.",103,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"npj"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"npj"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"npj"}],"output":{"name":"bool"}}],[11,"hash","","",104,null],[11,"partial_cmp","","",104,{"inputs":[{"name":"self"},{"name":"npj"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",104,{"inputs":[{"name":"self"},{"name":"npj"}],"output":{"name":"bool"}}],[11,"le","","",104,{"inputs":[{"name":"self"},{"name":"npj"}],"output":{"name":"bool"}}],[11,"gt","","",104,{"inputs":[{"name":"self"},{"name":"npj"}],"output":{"name":"bool"}}],[11,"ge","","",104,{"inputs":[{"name":"self"},{"name":"npj"}],"output":{"name":"bool"}}],[11,"cmp","","",104,{"inputs":[{"name":"self"},{"name":"npj"}],"output":{"name":"ordering"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",104,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",104,{"inputs":[{"name":"nlj"}],"output":{"name":"self"}}],[11,"from","","",104,{"inputs":[{"name":"npjw"}],"output":{"name":"self"}}],[11,"from","","",104,{"inputs":[{"name":"npjmw"}],"output":{"name":"self"}}],[11,"shell","","Shell index (e)",104,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"osc_energy","","Returns harmonic oscillator energy in natural units.",104,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"and_w","","",104,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"half"}],"output":{"name":"npjw"}}],[11,"to_j_chan_state","","",104,{"inputs":[{"name":"self"}],"output":{"generics":["jchan","i32"],"name":"chanstate"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"npjw"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"npjw"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"npjw"}],"output":{"name":"bool"}}],[11,"hash","","",105,null],[11,"partial_cmp","","",105,{"inputs":[{"name":"self"},{"name":"npjw"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",105,{"inputs":[{"name":"self"},{"name":"npjw"}],"output":{"name":"bool"}}],[11,"le","","",105,{"inputs":[{"name":"self"},{"name":"npjw"}],"output":{"name":"bool"}}],[11,"gt","","",105,{"inputs":[{"name":"self"},{"name":"npjw"}],"output":{"name":"bool"}}],[11,"ge","","",105,{"inputs":[{"name":"self"},{"name":"npjw"}],"output":{"name":"bool"}}],[11,"cmp","","",105,{"inputs":[{"name":"self"},{"name":"npjw"}],"output":{"name":"ordering"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",105,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from","","",105,{"inputs":[{"generics":["jchan","i32"],"name":"chanstate"}],"output":{"name":"self"}}],[11,"from","","",105,{"inputs":[{"name":"npjmw"}],"output":{"name":"self"}}],[11,"shell","","Shell index.",105,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"osc_energy","","Returns harmonic oscillator energy in natural units.",105,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"and_m","","",105,{"inputs":[{"name":"self"},{"generics":["i32"],"name":"half"}],"output":{"name":"npjmw"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"npjmw"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"npjmw"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"npjmw"}],"output":{"name":"bool"}}],[11,"hash","","",106,null],[11,"partial_cmp","","",106,{"inputs":[{"name":"self"},{"name":"npjmw"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",106,{"inputs":[{"name":"self"},{"name":"npjmw"}],"output":{"name":"bool"}}],[11,"le","","",106,{"inputs":[{"name":"self"},{"name":"npjmw"}],"output":{"name":"bool"}}],[11,"gt","","",106,{"inputs":[{"name":"self"},{"name":"npjmw"}],"output":{"name":"bool"}}],[11,"ge","","",106,{"inputs":[{"name":"self"},{"name":"npjmw"}],"output":{"name":"bool"}}],[11,"cmp","","",106,{"inputs":[{"name":"self"},{"name":"npjmw"}],"output":{"name":"ordering"}}],[11,"from","","",106,{"inputs":[{"generics":["jchan","nj"],"name":"chanstate"}],"output":{"name":"self"}}],[11,"shell","","Shell index.",106,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"pj"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"pjtw"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"pjtw"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"pjtw"}],"output":{"name":"bool"}}],[11,"hash","","",108,null],[11,"partial_cmp","","",108,{"inputs":[{"name":"self"},{"name":"pjtw"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",108,{"inputs":[{"name":"self"},{"name":"pjtw"}],"output":{"name":"bool"}}],[11,"le","","",108,{"inputs":[{"name":"self"},{"name":"pjtw"}],"output":{"name":"bool"}}],[11,"gt","","",108,{"inputs":[{"name":"self"},{"name":"pjtw"}],"output":{"name":"bool"}}],[11,"ge","","",108,{"inputs":[{"name":"self"},{"name":"pjtw"}],"output":{"name":"bool"}}],[11,"cmp","","",108,{"inputs":[{"name":"self"},{"name":"pjtw"}],"output":{"name":"ordering"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"pmw"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"pmw"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"pmw"}],"output":{"name":"bool"}}],[11,"hash","","",109,null],[11,"partial_cmp","","",109,{"inputs":[{"name":"self"},{"name":"pmw"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",109,{"inputs":[{"name":"self"},{"name":"pmw"}],"output":{"name":"bool"}}],[11,"le","","",109,{"inputs":[{"name":"self"},{"name":"pmw"}],"output":{"name":"bool"}}],[11,"gt","","",109,{"inputs":[{"name":"self"},{"name":"pmw"}],"output":{"name":"bool"}}],[11,"ge","","",109,{"inputs":[{"name":"self"},{"name":"pmw"}],"output":{"name":"bool"}}],[11,"cmp","","",109,{"inputs":[{"name":"self"},{"name":"pmw"}],"output":{"name":"ordering"}}],[11,"from","","",109,{"inputs":[{"name":"npjmw"}],"output":{"name":"self"}}],[11,"from","lutario::basis","",15,{"inputs":[{"name":"npjmw"}],"output":{"name":"self"}}],[11,"add","lutario::nuclei","",109,null],[11,"sub","","",109,null],[11,"zero","","",109,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"pw"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"pw"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"pw"}],"output":{"name":"bool"}}],[11,"hash","","",110,null],[11,"partial_cmp","","",110,{"inputs":[{"name":"self"},{"name":"pw"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",110,{"inputs":[{"name":"self"},{"name":"pw"}],"output":{"name":"bool"}}],[11,"le","","",110,{"inputs":[{"name":"self"},{"name":"pw"}],"output":{"name":"bool"}}],[11,"gt","","",110,{"inputs":[{"name":"self"},{"name":"pw"}],"output":{"name":"bool"}}],[11,"ge","","",110,{"inputs":[{"name":"self"},{"name":"pw"}],"output":{"name":"bool"}}],[11,"cmp","","",110,{"inputs":[{"name":"self"},{"name":"pw"}],"output":{"name":"ordering"}}],[11,"from","","",110,{"inputs":[{"name":"npjw"}],"output":{"name":"self"}}],[11,"from","lutario::j_scheme","",60,{"inputs":[{"name":"npjw"}],"output":{"name":"self"}}],[11,"from","lutario::basis","",15,{"inputs":[{"name":"npjw"}],"output":{"name":"self"}}],[11,"add","lutario::nuclei","",110,null],[11,"sub","","",110,null],[11,"zero","","",110,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"jtwnpjkey"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"jtwnpjkey"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"jtwnpjkey"}],"output":{"name":"bool"}}],[11,"hash","","",111,null],[11,"canonicalize","","",111,null],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"jnpjwkey"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"jnpjwkey"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"jnpjwkey"}],"output":{"name":"bool"}}],[11,"hash","","",112,null],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"canonicalize","","",112,null],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"ho3diter"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",113,{"inputs":[],"output":{"name":"self"}}],[11,"next","","",113,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"ho3dtrunc"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",114,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","",114,{"inputs":[{"name":"self"},{"name":"nlj"}],"output":{"name":"bool"}}],[11,"states","","Obtain a sequence of (n, π, j) quantum numbers in (e, l, j)-order.",114,{"inputs":[{"name":"self"}],"output":{"generics":["npj"],"name":"vec"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"ho3dmodtrunc"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",115,{"inputs":[],"output":{"name":"ho3dmodtrunc"}}],[11,"from","","",115,{"inputs":[{"name":"ho3dtrunc"}],"output":{"name":"self"}}],[11,"e_max","","",115,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"contains","","",115,{"inputs":[{"name":"self"},{"name":"nlj"}],"output":{"name":"bool"}}],[11,"states","","Obtain a sequence of (n, π, j) quantum numbers in (e, l, j)-order.",115,{"inputs":[{"name":"self"}],"output":{"generics":["npj"],"name":"vec"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"nucleons"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"e_max","","",116,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"states","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["npj"],"name":"vec"}}],[11,"part_states","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["partstate"],"name":"vec"}}],[11,"orbs","","",116,{"inputs":[{"name":"self"}],"output":{"generics":["parity","i32"],"name":"jorbbasis"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"simplenucleus"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_nucleus","","",117,{"inputs":[{"name":"self"}],"output":{"generics":["nucleus","box"],"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"nucleus"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"e_max","","",118,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"states","","",118,{"inputs":[{"name":"self"}],"output":{"generics":["npjw"],"name":"vec"}}],[11,"part_states","","",118,{"inputs":[{"name":"self"}],"output":{"generics":["partstate"],"name":"vec"}}],[11,"basis","","",118,{"inputs":[{"name":"self"}],"output":{"generics":["pw","i32"],"name":"jorbbasis"}}],[11,"m_basis","","",118,{"inputs":[{"name":"self"}],"output":{"generics":["pmw","nj"],"name":"jorbbasis"}}],[0,"op","lutario","Quantum operators",null,null],[3,"ReifiedState","lutario::op","",null,null],[12,"chan","","",124,null],[12,"aux","","",124,null],[12,"get_factor","","",124,null],[12,"set_factor","","",124,null],[12,"add_factor","","",124,null],[3,"Op","","",null,null],[12,"scheme","","",125,null],[12,"left_basis","","",125,null],[12,"right_basis","","",125,null],[12,"data","","",125,null],[8,"ChartedBasis","","",null,null],[16,"Scheme","","",126,null],[10,"layout","","",126,null],[8,"ReifyState","","",null,null],[16,"Basis","","",127,null],[16,"Scheme","","",127,null],[10,"reify_state","","",127,null],[8,"Vector","","",null,null],[16,"Elem","","",128,null],[10,"len","","",128,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"VectorMut","","",null,null],[10,"set_zero","","",129,{"inputs":[{"name":"self"}],"output":null}],[10,"scale","","",129,null],[8,"IndexBlockMatRef","","",null,null],[10,"at_block_mat","","",130,null],[8,"IndexBlockMatMut","","",null,null],[10,"set_block_mat","","",131,null],[10,"add_block_mat","","",131,null],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"reifiedstate"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"op"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","","",125,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"ref_add","","",125,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",125,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"new_block","","",125,{"inputs":[{"name":"s"},{"name":"u32"}],"output":{"name":"self"}}],[11,"new_vec","","Create a diagonal operator.",125,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"sum_vec","","",125,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"at","","",125,null],[11,"set","","",125,null],[11,"add","","",125,null],[11,"len","","",125,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_zero","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"scale","","",125,null],[0,"parity","lutario","Parity data type.",null,null],[4,"Parity","lutario::parity","",null,null],[13,"Even","","",132,null],[13,"Odd","","",132,null],[5,"sort2","","",null,null],[5,"sort3","","",null,null],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"parity"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"parity"}],"output":{"name":"bool"}}],[11,"hash","","",132,null],[11,"partial_cmp","","",132,{"inputs":[{"name":"self"},{"name":"parity"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",132,{"inputs":[{"name":"self"},{"name":"parity"}],"output":{"name":"ordering"}}],[11,"of","","",132,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"sign_i32","","",132,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"sign_f64","","",132,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"sign_char","","",132,{"inputs":[{"name":"self"}],"output":{"name":"char"}}],[11,"add","","",132,null],[11,"sub","","",132,null],[11,"zero","","",132,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"plane_wave_basis","lutario","3D plane-wave basis.",null,null],[3,"HarmTable","lutario::plane_wave_basis","",null,null],[12,"table","","",133,null],[3,"HarmSpinIso","","",null,null],[12,"n","","",134,null],[12,"s","","",134,null],[12,"t","","",134,null],[3,"HarmSpin","","",null,null],[12,"n","","",135,null],[12,"s","","",135,null],[5,"is_sum_of_3_squares","","Test if this integer can be expressed as a sum of three squares using Legendre’s three-square theorem.",null,{"inputs":[{"name":"i64"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"harmtable"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"num_shells_to_nsqmax","","Calculate the smallest `nsqmax` required to have at least `num_shells`.",133,{"inputs":[{"name":"i64"}],"output":{"name":"i64"}}],[11,"with_nsqmax","","Construct a table with all harmonics satisfying `|n|² ≤ nsqmax`.",133,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"with_num_shells","","",133,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"nsqmax","","",133,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_shells","","",133,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_states_to","","",133,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"parted_ns_orbs","","",133,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["partstate"],"name":"vec"}}],[11,"from","","",135,{"inputs":[{"generics":["jchan"],"name":"chanstate"}],"output":{"name":"self"}}],[11,"from","lutario::basis","",15,{"inputs":[{"name":"harmspin"}],"output":{"name":"self"}}],[11,"clone","lutario::plane_wave_basis","",134,{"inputs":[{"name":"self"}],"output":{"name":"harmspiniso"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"harmspiniso"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"harmspiniso"}],"output":{"name":"bool"}}],[11,"hash","","",134,null],[11,"partial_cmp","","",134,{"inputs":[{"name":"self"},{"name":"harmspiniso"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",134,{"inputs":[{"name":"self"},{"name":"harmspiniso"}],"output":{"name":"bool"}}],[11,"le","","",134,{"inputs":[{"name":"self"},{"name":"harmspiniso"}],"output":{"name":"bool"}}],[11,"gt","","",134,{"inputs":[{"name":"self"},{"name":"harmspiniso"}],"output":{"name":"bool"}}],[11,"ge","","",134,{"inputs":[{"name":"self"},{"name":"harmspiniso"}],"output":{"name":"bool"}}],[11,"cmp","","",134,{"inputs":[{"name":"self"},{"name":"harmspiniso"}],"output":{"name":"ordering"}}],[11,"to_harm_spin","","",134,{"inputs":[{"name":"self"}],"output":{"name":"harmspin"}}],[11,"add","","",134,null],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"harmspin"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"harmspin"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"self"},{"name":"harmspin"}],"output":{"name":"bool"}}],[11,"hash","","",135,null],[11,"partial_cmp","","",135,{"inputs":[{"name":"self"},{"name":"harmspin"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",135,{"inputs":[{"name":"self"},{"name":"harmspin"}],"output":{"name":"bool"}}],[11,"le","","",135,{"inputs":[{"name":"self"},{"name":"harmspin"}],"output":{"name":"bool"}}],[11,"gt","","",135,{"inputs":[{"name":"self"},{"name":"harmspin"}],"output":{"name":"bool"}}],[11,"ge","","",135,{"inputs":[{"name":"self"},{"name":"harmspin"}],"output":{"name":"bool"}}],[11,"cmp","","",135,{"inputs":[{"name":"self"},{"name":"harmspin"}],"output":{"name":"ordering"}}],[11,"and_iso","","",135,{"inputs":[{"name":"self"},{"generics":["i8"],"name":"half"}],"output":{"name":"harmspiniso"}}],[11,"add","","",135,null],[11,"sub","","",135,null],[0,"phys_consts","lutario","Physical constants.",null,null],[17,"HBAR_C_MEVFM","lutario::phys_consts","ħ c /(MeV fm)",null,null],[17,"M_NEUTRON_MEVPC2","","Mass of neutron /(MeV c⁻²)",null,null],[17,"M_PROTON_MEVPC2","","Mass of proton /(MeV c⁻²)",null,null],[0,"qdpt","lutario","Quasidegenerate perturbation theory.",null,null],[5,"mp2","lutario::qdpt","Second-order Møller–Plesset (nondegenerate) perturbation theory.",null,{"inputs":[{"name":"opj100"},{"name":"opj200"}],"output":{"name":"f64"}}],[5,"qdpt_term_a","","QDPT type A term (2nd order)",null,null],[5,"qdpt_term_b","","QDPT type B term (3rd order)",null,null],[5,"qdpt_term_c","","QDPT type C term (3rd order)",null,null],[5,"qdpt_term_d","","QDPT type D term (3rd order)",null,null],[5,"qdpt_term","","Obtain a specific QDPT term.",null,{"inputs":[{"name":"u32"},{"name":"opj100"},{"name":"opj200"},{"generics":["opj211"],"name":"option"},{"name":"statej10"},{"name":"statej10"}],"output":{"name":"f64"}}],[5,"qdpt2_terms","","Sum of all terms at second order.",null,{"inputs":[{"name":"opj100"},{"name":"opj200"},{"name":"statej10"},{"name":"statej10"}],"output":{"name":"f64"}}],[5,"qdpt3_terms","","Sum of all terms at third order.",null,{"inputs":[{"name":"opj100"},{"name":"opj200"},{"name":"opj211"},{"name":"statej10"},{"name":"statej10"}],"output":{"name":"f64"}}],[0,"qdots","lutario","Quantum dots.",null,null],[3,"Ls","lutario::qdots","",null,null],[12,"l","","",136,null],[12,"s","","",136,null],[3,"Nls","","Principal quantum number, orbital angular momentum projection, and spin projection.",null,null],[12,"n","","Principal quantum number (n)",137,null],[12,"l","","Orbital angular momentum projection (ml)",137,null],[12,"s","","Spin projection (ms)",137,null],[3,"Qdot","","",null,null],[12,"num_shells","","",138,null],[12,"num_filled","","",138,null],[3,"Nl2Pair","","",null,null],[12,"n1","","",139,null],[12,"l1","","",139,null],[12,"n2","","",139,null],[12,"l2","","",139,null],[12,"n3","","",139,null],[12,"l3","","",139,null],[12,"n4","","",139,null],[12,"l4","","",139,null],[5,"make_ho2d_op","","",null,{"inputs":[{"name":"jatlas"},{"name":"f64"}],"output":{"generics":["f64"],"name":"opj100"}}],[5,"make_v_op","","",null,{"inputs":[{"name":"jatlas"},{"name":"fnvhashmap"},{"name":"f64"}],"output":{"generics":["f64"],"name":"opj200"}}],[5,"read_clh2_bin","","",null,{"inputs":[{"name":"read"}],"output":{"generics":["fnvhashmap"],"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"ls"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"ls"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"self"},{"name":"ls"}],"output":{"name":"bool"}}],[11,"hash","","",136,null],[11,"partial_cmp","","",136,{"inputs":[{"name":"self"},{"name":"ls"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",136,{"inputs":[{"name":"self"},{"name":"ls"}],"output":{"name":"bool"}}],[11,"le","","",136,{"inputs":[{"name":"self"},{"name":"ls"}],"output":{"name":"bool"}}],[11,"gt","","",136,{"inputs":[{"name":"self"},{"name":"ls"}],"output":{"name":"bool"}}],[11,"ge","","",136,{"inputs":[{"name":"self"},{"name":"ls"}],"output":{"name":"bool"}}],[11,"cmp","","",136,{"inputs":[{"name":"self"},{"name":"ls"}],"output":{"name":"ordering"}}],[11,"add","","",136,null],[11,"sub","","",136,null],[11,"zero","","",136,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",136,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"nls"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"nls"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"self"},{"name":"nls"}],"output":{"name":"bool"}}],[11,"hash","","",137,null],[11,"partial_cmp","","",137,{"inputs":[{"name":"self"},{"name":"nls"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",137,{"inputs":[{"name":"self"},{"name":"nls"}],"output":{"name":"bool"}}],[11,"le","","",137,{"inputs":[{"name":"self"},{"name":"nls"}],"output":{"name":"bool"}}],[11,"gt","","",137,{"inputs":[{"name":"self"},{"name":"nls"}],"output":{"name":"bool"}}],[11,"ge","","",137,{"inputs":[{"name":"self"},{"name":"nls"}],"output":{"name":"bool"}}],[11,"cmp","","",137,{"inputs":[{"name":"self"},{"name":"nls"}],"output":{"name":"ordering"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",137,{"inputs":[{"generics":["jchan","i32"],"name":"chanstate"}],"output":{"name":"self"}}],[11,"from","lutario::basis","",15,{"inputs":[{"name":"nls"}],"output":{"name":"self"}}],[11,"shell","lutario::qdots","Shell index.",137,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"osc_energy","","Returns harmonic oscillator energy in natural units.",137,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"qdot"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"states","","",138,{"inputs":[{"name":"self"}],"output":{"generics":["nls"],"name":"vec"}}],[11,"basis","","",138,{"inputs":[{"name":"self"}],"output":{"generics":["ls","i32"],"name":"jorbbasis"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"nl2pair"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"nl2pair"}],"output":{"name":"bool"}}],[11,"ne","","",139,{"inputs":[{"name":"self"},{"name":"nl2pair"}],"output":{"name":"bool"}}],[11,"hash","","",139,null],[11,"partial_cmp","","",139,{"inputs":[{"name":"self"},{"name":"nl2pair"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",139,{"inputs":[{"name":"self"},{"name":"nl2pair"}],"output":{"name":"bool"}}],[11,"le","","",139,{"inputs":[{"name":"self"},{"name":"nl2pair"}],"output":{"name":"bool"}}],[11,"gt","","",139,{"inputs":[{"name":"self"},{"name":"nl2pair"}],"output":{"name":"bool"}}],[11,"ge","","",139,{"inputs":[{"name":"self"},{"name":"nl2pair"}],"output":{"name":"bool"}}],[11,"cmp","","",139,{"inputs":[{"name":"self"},{"name":"nl2pair"}],"output":{"name":"ordering"}}],[11,"canonicalize","","",139,null],[0,"sg_ode","lutario","Shampine-Gordon ODE solver.",null,null],[3,"Conf","lutario::sg_ode","Can be constructed using `Conf::default()` or directly.",null,null],[12,"toler","","",140,null],[12,"strict","","Normally, the integrator may overshoot the target for interpolation purposes.  To prevent this, set `strict` to `true`.",140,null],[12,"maxnum","","",140,null],[3,"Solver","","Can be constructed using `conf.make_solver()`.",null,null],[4,"Error","","",null,null],[13,"ToleranceTooLow","","Integration did not reach target because the error tolerances were too small to be feasible.  The tolerances have been re-adjusted to be more reasonable.  The user may re-attempt.",141,null],[13,"TooManySteps","","Integration did not reach target because too many (> maxnum) steps were taken.",141,null],[13,"TooStiff","","Integration did not reach target because the equations appear to be stiff.",141,null],[13,"InvalidArgument","","",141,null],[13,"Unknown","","",141,null],[0,"ffi","","",null,null],[4,"SgOde","lutario::sg_ode::ffi","",null,null],[5,"sg_ode_try_new","","",null,null],[5,"sg_ode_del","","",null,null],[5,"sg_ode_de","","",null,null],[6,"SgDerivFn","","",null,null],[11,"clone","lutario::sg_ode","",141,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",141,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",141,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"conf"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",140,{"inputs":[],"output":{"name":"self"}}],[11,"make_solver","","",140,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"generics":["solver"],"name":"option"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",142,{"inputs":[{"name":"self"}],"output":null}],[11,"conf","","",142,{"inputs":[{"name":"self"}],"output":{"name":"conf"}}],[11,"step","","",142,null],[0,"tri_mat","lutario","Row-major, lower-triangular matrices (`i ≥ j`).",null,null],[3,"TriMatDim","lutario::tri_mat","Dimensions of a non-strict lower triangular matrix, equal to the number of rows or columns.",null,null],[3,"StrictTriMatDim","","Dimensions of a strict lower triangular matrix, equal to the number of rows or columns.",null,null],[3,"TriMatRef","","",null,null],[3,"TriMatMut","","",null,null],[3,"TriMatRows","","",null,null],[3,"TriMatRowsMut","","",null,null],[3,"TriMat","","",null,null],[3,"TrsMat","","Matrices that possess symmetry under transposition, represented as triangular matrices.",null,null],[12,"mat","","",143,null],[12,"trs","","",143,null],[0,"trs","","",null,null],[3,"He","lutario::tri_mat::trs","Marks an Hermitian matrix.",null,null],[3,"Ah","","Marks an antihermitian matrix.",null,null],[3,"Sy","","Marks a symmetric matrix.",null,null],[3,"As","","Marks an antisymmetric matrix.",null,null],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"he"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",144,{"inputs":[],"output":{"name":"he"}}],[11,"trs","","",144,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"ah"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",145,{"inputs":[],"output":{"name":"ah"}}],[11,"trs","","",145,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"sy"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",146,{"inputs":[],"output":{"name":"sy"}}],[11,"trs","","",146,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"as"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",147,{"inputs":[],"output":{"name":"as"}}],[11,"trs","","",147,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[8,"Trs","lutario::tri_mat","Transpose symmetry.",null,null],[10,"trs","","",148,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"trimatdim"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",149,{"inputs":[],"output":{"name":"trimatdim"}}],[11,"eq","","",149,{"inputs":[{"name":"self"},{"name":"trimatdim"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"self"},{"name":"trimatdim"}],"output":{"name":"bool"}}],[11,"hash","","",149,null],[11,"deref","","",149,null],[11,"is_valid","","",149,{"inputs":[{"name":"usize"}],"output":{"name":"bool"}}],[11,"from_raw","","",149,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new","","",149,{"inputs":[{"name":"usize"}],"output":{"generics":["usize"],"name":"result"}}],[11,"extent","","",149,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains","","",149,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"raw_index","","",149,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"offset_unchecked","","",149,{"inputs":[{"name":"self"},{"name":"p"},{"name":"usize"},{"name":"usize"}],"output":{"name":"p"}}],[11,"row_width","","",149,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"upcast_slice","","",149,null],[11,"downcast_slice","","",149,null],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"stricttrimatdim"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",150,{"inputs":[],"output":{"name":"stricttrimatdim"}}],[11,"eq","","",150,{"inputs":[{"name":"self"},{"name":"stricttrimatdim"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"self"},{"name":"stricttrimatdim"}],"output":{"name":"bool"}}],[11,"hash","","",150,null],[11,"deref","","",150,null],[11,"is_valid","","",150,{"inputs":[{"name":"usize"}],"output":{"name":"bool"}}],[11,"from_raw","","",150,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new","","",150,{"inputs":[{"name":"usize"}],"output":{"generics":["usize"],"name":"result"}}],[11,"extent","","",150,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains","","",150,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"raw_index","","",150,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"row_width","","",150,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",151,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"trimatref"}],"output":{"name":"bool"}}],[11,"index","","",151,null],[11,"len","","",151,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Split `*slice` into two parts: the first part becomes the matrix, while the second part is stored back in `slice`.  If the slice is too short, `None` is returned.",151,null],[11,"from_raw","","",151,null],[11,"shape","","",151,{"inputs":[{"name":"self"}],"output":{"name":"trimatdim"}}],[11,"as_ptr","","",151,null],[11,"index","","",151,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get","","",151,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_unchecked","","",151,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"offset_unchecked","","",151,null],[11,"rows","","",151,{"inputs":[{"name":"self"}],"output":{"name":"trimatrows"}}],[11,"row","","",151,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"row_unchecked","","",151,null],[11,"to_slice","","",151,null],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",152,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"trimatmut"}],"output":{"name":"bool"}}],[11,"index","","",152,null],[11,"index_mut","","",152,null],[11,"len","","",152,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_zero","","",152,{"inputs":[{"name":"self"}],"output":null}],[11,"scale","","",152,null],[11,"new","","Split `*slice` into two parts: the first part becomes the matrix, while the second part is stored back in `slice`.  If the slice is too short, `None` is returned.",152,null],[11,"from_raw","","",152,null],[11,"shape","","",152,{"inputs":[{"name":"self"}],"output":{"name":"trimatdim"}}],[11,"into_ref","","",152,{"inputs":[{"name":"self"}],"output":{"name":"trimatref"}}],[11,"as_ref","","",152,{"inputs":[{"name":"self"}],"output":{"name":"trimatref"}}],[11,"as_mut","","",152,{"inputs":[{"name":"self"}],"output":{"name":"trimatmut"}}],[11,"as_ptr","","",152,null],[11,"index","","",152,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"get","","",152,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_unchecked","","",152,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"offset_unchecked","","",152,null],[11,"rows","","",152,{"inputs":[{"name":"self"}],"output":{"name":"trimatrowsmut"}}],[11,"row","","",152,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"row_unchecked","","",152,null],[11,"to_slice","","",152,null],[11,"fill","","",152,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"clone_from_ref","","",152,{"inputs":[{"name":"self"},{"name":"trimatref"}],"output":null}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"trimatrows"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",153,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",153,null],[11,"next_back","","",153,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",153,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",154,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",154,null],[11,"next_back","","",154,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",154,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",155,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"drop","","",155,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",155,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",155,{"inputs":[{"name":"self"},{"name":"trimat"}],"output":{"name":"bool"}}],[11,"replicate","","",155,{"inputs":[{"name":"usize"},{"name":"t"}],"output":{"name":"self"}}],[11,"zero","","",155,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_vec","","Panics if the vector is too short.",155,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_vec_unchecked","","",155,{"inputs":[{"name":"vec"},{"name":"trimatdim"}],"output":{"name":"self"}}],[11,"from_raw","","",155,null],[11,"shape","","",155,{"inputs":[{"name":"self"}],"output":{"name":"trimatdim"}}],[11,"extent","","",155,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_ptr","","",155,null],[11,"as_ref","","",155,{"inputs":[{"name":"self"}],"output":{"name":"trimatref"}}],[11,"as_mut","","",155,{"inputs":[{"name":"self"}],"output":{"name":"trimatmut"}}],[11,"as_slice","","",155,null],[11,"as_slice_mut","","",155,null],[11,"into_boxed_slice","","",155,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"into_vec","","",155,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"len","","",155,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_zero","","",155,{"inputs":[{"name":"self"}],"output":null}],[11,"scale","","",155,null],[11,"len","","",143,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_zero","","",143,{"inputs":[{"name":"self"}],"output":null}],[11,"scale","","",143,null],[11,"get","","",143,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"set","","",143,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"t"}],"output":{"name":"result"}}],[11,"add","","",143,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone_from_mat","","",143,{"inputs":[{"name":"self"},{"name":"matref"}],"output":null}],[0,"utils","lutario","Everything else and the kitchen sink",null,null],[3,"DebugWith","lutario::utils","Helper struct for writing `Debug` implementations.",null,null],[12,"0","","",156,null],[3,"UnsafeSync","","",null,null],[3,"RangeInclusive","","Temporary definition until `std::ops::RangeInclusive` is stabilized.",null,null],[12,"start","","",157,null],[12,"end","","",157,null],[3,"RangeSet","","An ordered sequence of numbers `[ start + k × step | 0 ≤ k < len ]`",null,null],[12,"start","","",158,null],[12,"step","","",158,null],[12,"len","","",158,null],[3,"Toler","","",null,null],[12,"relerr","","",159,null],[12,"abserr","","",159,null],[3,"Zigzag","","Zigzag integer encoding, which maps signed integers to unsigned integers.",null,null],[12,"0","","",160,null],[5,"max_range","","Maximum possible `Range`, which necessarily excludes the maximum value.",null,{"inputs":[],"output":{"name":"range"}}],[5,"cast_range","","",null,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[5,"euclid_div","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"euclid_mod","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"intersect_range_inclusive","","",null,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[5,"swap","","",null,null],[5,"swap_if","","",null,null],[5,"with_tuple2_ref","","",null,{"inputs":[{"name":"a"},{"name":"b"},{"name":"f"}],"output":{"name":"r"}}],[5,"cast","","Shorthand for casting numbers.  Panics if out of range.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"try_cast","","",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[5,"take_and_get","","",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[5,"chop_slice","","",null,null],[5,"chop_slice_mut","","",null,null],[5,"default_hash_map","","Works just like `HashMap::default()` but avoids unnecessary bounds on `K`.",null,{"inputs":[],"output":{"name":"hashmap"}}],[5,"pretty_bytes","","",null,null],[5,"gcd","","",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[5,"encode_number","","",null,{"inputs":[{"name":"usize"},{"name":"hashchart"}],"output":{"name":"vec"}}],[5,"decode_number","","",null,{"inputs":[{"name":"iterator"},{"name":"hashchart"}],"output":{"generics":["usize","str"],"name":"result"}}],[5,"abort_on_unwind","","Prevent unwinding in foreign code (which is undefined behavior).",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[0,"slice","","",null,null],[5,"from_ref","lutario::utils::slice","",null,null],[5,"from_ref_mut","","",null,null],[8,"Erased","lutario::utils","No-op trait: no constraints; satisfied by all types.",null,null],[8,"Offset","","",null,null],[10,"offset","","",161,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"self"}}],[8,"RefAdd","","A more sanely defined addition trait to avoid throwing the compiler into an infinite loop.",null,null],[10,"ref_add","","",162,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Key","","",null,null],[16,"Map","","",163,null],[8,"Map","","",null,null],[16,"Value","","",164,null],[10,"get","","",164,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[8,"MapMut","","",null,null],[10,"new","","",165,{"inputs":[],"output":{"name":"self"}}],[10,"insert","","",165,null],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"unsafesync"}}],[11,"fmt","","",166,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",166,null],[11,"deref_mut","","",166,null],[11,"new","","",166,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_inner","","",166,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"self"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"hash","","",157,null],[11,"len","","",157,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"next","","",157,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",157,null],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"rangeset"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",158,{"inputs":[{"name":"self"},{"name":"rangeset"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"self"},{"name":"rangeset"}],"output":{"name":"bool"}}],[11,"default","","",158,{"inputs":[],"output":{"name":"self"}}],[11,"len","","",158,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","",158,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i32"],"name":"option"}}],[11,"unchecked_get","","",158,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"i32"}}],[11,"first","","",158,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"last","","",158,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"contains","","",158,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"position","","",158,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["usize"],"name":"option"}}],[11,"unchecked_position","","",158,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"usize"}}],[11,"ceil","","",158,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["i32"],"name":"option"}}],[11,"floor","","",158,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["i32"],"name":"option"}}],[11,"insert","","Expand the range so as to include the given integer.",158,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"into_iter","","",158,null],[11,"clone","","",159,{"inputs":[{"name":"self"}],"output":{"name":"toler"}}],[11,"fmt","","",159,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",159,{"inputs":[{"name":"self"},{"name":"toler"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"self"},{"name":"toler"}],"output":{"name":"bool"}}],[11,"default","","",159,{"inputs":[],"output":{"name":"self"}}],[11,"check","","",159,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"is_eq","","",159,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"clone","","",160,{"inputs":[{"name":"self"}],"output":{"name":"zigzag"}}],[11,"fmt","","",160,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",160,{"inputs":[{"name":"self"},{"name":"zigzag"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"self"},{"name":"zigzag"}],"output":{"name":"bool"}}],[11,"hash","","",160,null],[11,"partial_cmp","","",160,{"inputs":[{"name":"self"},{"name":"zigzag"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",160,{"inputs":[{"name":"self"},{"name":"zigzag"}],"output":{"name":"bool"}}],[11,"le","","",160,{"inputs":[{"name":"self"},{"name":"zigzag"}],"output":{"name":"bool"}}],[11,"gt","","",160,{"inputs":[{"name":"self"},{"name":"zigzag"}],"output":{"name":"bool"}}],[11,"ge","","",160,{"inputs":[{"name":"self"},{"name":"zigzag"}],"output":{"name":"bool"}}],[11,"cmp","","",160,{"inputs":[{"name":"self"},{"name":"zigzag"}],"output":{"name":"ordering"}}],[11,"from","","",160,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[0,"vecn","lutario","A tiny module for tiny fixed-length vectors.",null,null],[3,"Vec3","lutario::vecn","",null,null],[12,"0","","",167,null],[3,"Vec3I8","","Specialization for 3D vectors of `i8` to avoid overflow problems.",null,null],[12,"0","","",168,null],[11,"clone","","",167,{"inputs":[{"name":"self"}],"output":{"name":"vec3"}}],[11,"fmt","","",167,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",167,{"inputs":[],"output":{"name":"vec3"}}],[11,"eq","","",167,{"inputs":[{"name":"self"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"self"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"hash","","",167,null],[11,"partial_cmp","","",167,{"inputs":[{"name":"self"},{"name":"vec3"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",167,{"inputs":[{"name":"self"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"le","","",167,{"inputs":[{"name":"self"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"gt","","",167,{"inputs":[{"name":"self"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"ge","","",167,{"inputs":[{"name":"self"},{"name":"vec3"}],"output":{"name":"bool"}}],[11,"cmp","","",167,{"inputs":[{"name":"self"},{"name":"vec3"}],"output":{"name":"ordering"}}],[11,"new","","",167,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"map","","",167,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"vec3"}}],[11,"index","","",167,null],[11,"index_mut","","",167,null],[11,"dot","","",167,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"t"}}],[11,"norm_sq","","",167,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"add","","",167,null],[11,"sub","","",167,null],[11,"clone","","",168,{"inputs":[{"name":"self"}],"output":{"name":"vec3i8"}}],[11,"fmt","","",168,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",168,{"inputs":[],"output":{"name":"vec3i8"}}],[11,"eq","","",168,{"inputs":[{"name":"self"},{"name":"vec3i8"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"self"},{"name":"vec3i8"}],"output":{"name":"bool"}}],[11,"hash","","",168,null],[11,"partial_cmp","","",168,{"inputs":[{"name":"self"},{"name":"vec3i8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",168,{"inputs":[{"name":"self"},{"name":"vec3i8"}],"output":{"name":"bool"}}],[11,"le","","",168,{"inputs":[{"name":"self"},{"name":"vec3i8"}],"output":{"name":"bool"}}],[11,"gt","","",168,{"inputs":[{"name":"self"},{"name":"vec3i8"}],"output":{"name":"bool"}}],[11,"ge","","",168,{"inputs":[{"name":"self"},{"name":"vec3i8"}],"output":{"name":"bool"}}],[11,"cmp","","",168,{"inputs":[{"name":"self"},{"name":"vec3i8"}],"output":{"name":"ordering"}}],[11,"add","","",168,null],[11,"sub","","",168,null],[11,"new","","",168,{"inputs":[{"name":"i64"},{"name":"i64"},{"name":"i64"}],"output":{"name":"self"}}],[11,"norm_sq","","",168,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[0,"vector_driver","lutario","Generalizes the idea of vector operations to enable transparent parallelization.",null,null],[5,"assert_all_eq","lutario::vector_driver","",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"option"}}],[0,"basic","","The most trivial vector driver.",null,null],[3,"BasicVectorDriver","lutario::vector_driver::basic","",null,null],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"basicvectordriver"}}],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",169,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"create_vector_from","","Shortcut for creating a vector from a slice.",169,null],[11,"create_vector_with","","",169,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"len","","",169,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"operate","","",169,null],[0,"c","lutario::vector_driver","Vector driver interface with C.",null,null],[3,"CVectorDriver","lutario::vector_driver::c","This is a reified vector driver that is compatible with C vector driver interface.",null,null],[0,"ffi","","",null,null],[3,"VectorDriverVt","lutario::vector_driver::c::ffi","",null,null],[12,"len","","",170,null],[12,"try_new","","",170,null],[12,"del","","",170,null],[12,"operate","","",170,null],[3,"VectorDriver","","",null,null],[12,"data","","",171,null],[12,"vtable","","",171,null],[6,"Vector","","",null,null],[6,"VectorAccum","","",null,null],[6,"VectorAccumType","","",null,null],[6,"VectorOperation","","",null,null],[6,"VectorDriverBase","","",null,null],[11,"clone","","",170,{"inputs":[{"name":"self"}],"output":{"name":"vectordrivervt"}}],[11,"fmt","","",170,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",171,{"inputs":[{"name":"self"}],"output":{"name":"vectordriver"}}],[11,"fmt","","",171,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","lutario::vector_driver::c","",172,{"inputs":[{"name":"self"}],"output":{"name":"cvectordriver"}}],[11,"fmt","","",172,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",172,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"as_raw","","Warning: the returned driver is invalidated if `self` is moved!",172,{"inputs":[{"name":"self"}],"output":{"name":"vectordriver"}}],[8,"VectorDriver","lutario::vector_driver","",null,null],[16,"Item","","",173,null],[16,"Vector","","",173,null],[10,"len","","",173,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"create_vector_with","","",173,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[10,"operate","","Performs an applicative operation on multiple vectors.",173,null],[11,"create_vector","","",173,null],[11,"operate_on","","Note: The accumulator must serialize to a fixed length.",173,null],[11,"sum","","Sum all elements of the vector.",173,null],[14,"move_ref","lutario","Force a mutable reference to be moved instead of reborrowed.",null,null],[14,"toler_assert_eq","","Check whether two `f64` numbers are equal within the given `Toler`.",null,null],[14,"re","","Declare a regular expression (`Regex`) cached via `lazy_static!`. This macro is mainly for internal use.",null,null],[14,"vec_apply","","Apply an applicative, multi-vector operation. See `vector_driver`.",null,null],[11,"clone","lutario::linalg","",84,{"inputs":[{"name":"self"}],"output":{"name":"transpose"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"part"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"part"}],"output":{"name":"bool"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"transpose"}],"output":{"name":"bool"}}]],"paths":[[3,"Coupled2HalfSpinsBlock"],[3,"Uncoupled2HalfSpinsBlock"],[3,"Coupled2HalfSpins"],[3,"Uncoupled2HalfSpins"],[3,"Wigner3jmCtx"],[3,"Wigner6jCtx"],[3,"Hashed"],[3,"HashChartInsertResult"],[3,"HashChart"],[3,"BasisLayout"],[3,"BasisChart"],[3,"MatLayout"],[3,"MatChart"],[3,"Orb"],[3,"OrbIx"],[3,"ChanState"],[3,"PackedOptChanState"],[3,"PartState"],[3,"Fence"],[4,"Occ"],[4,"Occ20"],[8,"IntoUsize"],[8,"FromUsize"],[8,"Increment"],[3,"CACHE"],[3,"Block"],[3,"Bd"],[3,"RawBlockMatRef"],[3,"BlockMatRef"],[3,"BlockMatMut"],[3,"BlockTriMatShape"],[3,"BlockTriMatRef"],[3,"BlockTriMatMut"],[3,"BTreeCache"],[3,"CacheEntry"],[8,"CacheKey"],[3,"Cache"],[8,"Key"],[3,"Cached"],[3,"Cache"],[3,"Half"],[3,"Conf"],[3,"Run"],[3,"Conf"],[3,"Run"],[4,"DenomType"],[4,"Error"],[3,"IsoKinetic"],[3,"Kinetic"],[3,"Coulomb"],[4,"Compression"],[3,"Buffer"],[3,"Chain"],[3,"SharedChain"],[3,"Alloc"],[3,"State"],[3,"Parser"],[8,"ReadBinFrom"],[3,"MapleTableParser"],[3,"BinArrayParser"],[3,"JChan"],[3,"JPartedOrb"],[3,"JAtlas"],[3,"BasisSchemeJ10"],[3,"BasisSchemeJ20"],[3,"BasisSchemeJ21"],[3,"JjjjBlockInfo"],[3,"PandyaScheme"],[3,"StateMask10"],[3,"StateMask20"],[3,"StateMask21"],[3,"StatesJ10"],[3,"CostatesJ10"],[3,"StatesJ20"],[3,"CostatesJ20"],[3,"CostatesJ21"],[3,"StateJ10"],[3,"StateJ20"],[3,"StateJ21"],[3,"JScheme"],[3,"BasisJ10"],[3,"BasisJ20"],[3,"BasisJ21"],[4,"Part"],[4,"Transpose"],[4,"EigenvalueRange"],[8,"Conj"],[8,"NormSqr"],[8,"Gemm"],[8,"Heevr"],[3,"AdjSym"],[3,"MatShape"],[3,"ValidMatShape"],[3,"MatRef"],[3,"MatMut"],[3,"MatRows"],[3,"MatRowsMut"],[3,"Mat"],[3,"Gaussian"],[3,"Minnesota"],[3,"MinnesotaBox"],[3,"OrbAng"],[3,"Nj"],[3,"Nlj"],[3,"Npj"],[3,"Npjw"],[3,"Npjmw"],[3,"Pj"],[3,"Pjtw"],[3,"Pmw"],[3,"Pw"],[3,"JtwNpjKey"],[3,"JNpjwKey"],[3,"Ho3dIter"],[3,"Ho3dTrunc"],[3,"Ho3dModTrunc"],[3,"Nucleons"],[3,"SimpleNucleus"],[3,"Nucleus"],[3,"Me2j"],[3,"Me2jGuessLoader"],[3,"Me2jLoader"],[3,"VintLoader"],[3,"ORB_ANG_CHART"],[3,"ReifiedState"],[3,"Op"],[8,"ChartedBasis"],[8,"ReifyState"],[8,"Vector"],[8,"VectorMut"],[8,"IndexBlockMatRef"],[8,"IndexBlockMatMut"],[4,"Parity"],[3,"HarmTable"],[3,"HarmSpinIso"],[3,"HarmSpin"],[3,"Ls"],[3,"Nls"],[3,"Qdot"],[3,"Nl2Pair"],[3,"Conf"],[4,"Error"],[3,"Solver"],[3,"TrsMat"],[3,"He"],[3,"Ah"],[3,"Sy"],[3,"As"],[8,"Trs"],[3,"TriMatDim"],[3,"StrictTriMatDim"],[3,"TriMatRef"],[3,"TriMatMut"],[3,"TriMatRows"],[3,"TriMatRowsMut"],[3,"TriMat"],[3,"DebugWith"],[3,"RangeInclusive"],[3,"RangeSet"],[3,"Toler"],[3,"Zigzag"],[8,"Offset"],[8,"RefAdd"],[8,"Key"],[8,"Map"],[8,"MapMut"],[3,"UnsafeSync"],[3,"Vec3"],[3,"Vec3I8"],[3,"BasicVectorDriver"],[3,"VectorDriverVt"],[3,"VectorDriver"],[3,"CVectorDriver"],[8,"VectorDriver"]]};
searchIndex["lutario_nuclei"] = {"doc":"","items":[[3,"QdptCorr","lutario_nuclei","",null,null],[3,"Results","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"qdptcorr"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"results"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"QdptCorr"],[3,"Results"]]};
searchIndex["lzma_sys"] = {"doc":"","items":[[3,"lzma_allocator","lzma_sys","",null,null],[12,"alloc","","",0,null],[12,"free","","",0,null],[12,"opaque","","",0,null],[3,"lzma_stream","","",null,null],[12,"next_in","","",1,null],[12,"avail_in","","",1,null],[12,"total_in","","",1,null],[12,"next_out","","",1,null],[12,"avail_out","","",1,null],[12,"total_out","","",1,null],[12,"allocator","","",1,null],[3,"lzma_filter","","",null,null],[12,"id","","",2,null],[12,"options","","",2,null],[3,"lzma_mt","","",null,null],[12,"flags","","",3,null],[12,"threads","","",3,null],[12,"block_size","","",3,null],[12,"timeout","","",3,null],[12,"preset","","",3,null],[12,"filters","","",3,null],[12,"check","","",3,null],[3,"lzma_options_lzma","","",null,null],[12,"dict_size","","",4,null],[12,"preset_dict","","",4,null],[12,"preset_dict_size","","",4,null],[12,"lc","","",4,null],[12,"lp","","",4,null],[12,"pb","","",4,null],[12,"mode","","",4,null],[12,"nice_len","","",4,null],[12,"mf","","",4,null],[12,"depth","","",4,null],[3,"lzma_stream_flags","","",null,null],[12,"version","","",5,null],[12,"backward_size","","",5,null],[12,"check","","",5,null],[3,"lzma_options_bcj","","",null,null],[12,"start_offset","","",6,null],[4,"lzma_internal","","",null,null],[5,"lzma_code","","",null,null],[5,"lzma_end","","",null,null],[5,"lzma_get_progress","","",null,null],[5,"lzma_memusage","","",null,null],[5,"lzma_memlimit_get","","",null,null],[5,"lzma_memlimit_set","","",null,null],[5,"lzma_easy_encoder_memusage","","",null,null],[5,"lzma_easy_decoder_memusage","","",null,null],[5,"lzma_easy_encoder","","",null,null],[5,"lzma_easy_buffer_encode","","",null,null],[5,"lzma_stream_encoder","","",null,null],[5,"lzma_stream_encoder_mt_memusage","","",null,null],[5,"lzma_stream_encoder_mt","","",null,null],[5,"lzma_alone_encoder","","",null,null],[5,"lzma_stream_buffer_bound","","",null,null],[5,"lzma_stream_buffer_encode","","",null,null],[5,"lzma_stream_decoder","","",null,null],[5,"lzma_auto_decoder","","",null,null],[5,"lzma_alone_decoder","","",null,null],[5,"lzma_stream_buffer_decode","","",null,null],[5,"lzma_check_is_supported","","",null,null],[5,"lzma_check_size","","",null,null],[5,"lzma_crc32","","",null,null],[5,"lzma_crc64","","",null,null],[5,"lzma_get_check","","",null,null],[5,"lzma_filter_encoder_is_supported","","",null,null],[5,"lzma_filter_decoder_is_supported","","",null,null],[5,"lzma_filters_copy","","",null,null],[5,"lzma_raw_encoder_memusage","","",null,null],[5,"lzma_raw_decoder_memusage","","",null,null],[5,"lzma_raw_encoder","","",null,null],[5,"lzma_raw_decoder","","",null,null],[5,"lzma_filters_update","","",null,null],[5,"lzma_raw_buffer_encode","","",null,null],[5,"lzma_raw_buffer_decode","","",null,null],[5,"lzma_properties_size","","",null,null],[5,"lzma_properties_encode","","",null,null],[5,"lzma_properties_decode","","",null,null],[5,"lzma_physmem","","",null,null],[5,"lzma_cputhreads","","",null,null],[5,"lzma_stream_header_encode","","",null,null],[5,"lzma_stream_footer_encode","","",null,null],[5,"lzma_stream_header_decode","","",null,null],[5,"lzma_stream_footer_decode","","",null,null],[5,"lzma_stream_flags_compare","","",null,null],[5,"lzma_version_number","","",null,null],[5,"lzma_version_string","","",null,null],[5,"lzma_vli_encode","","",null,null],[5,"lzma_vli_decode","","",null,null],[5,"lzma_vli_size","","",null,null],[5,"lzma_lzma_preset","","",null,null],[5,"lzma_mf_is_supported","","",null,null],[6,"lzma_bool","","",null,null],[6,"lzma_ret","","",null,null],[6,"lzma_action","","",null,null],[6,"lzma_check","","",null,null],[6,"lzma_vli","","",null,null],[6,"lzma_mode","","",null,null],[6,"lzma_match_finder","","",null,null],[17,"LZMA_OK","","",null,null],[17,"LZMA_STREAM_END","","",null,null],[17,"LZMA_NO_CHECK","","",null,null],[17,"LZMA_UNSUPPORTED_CHECK","","",null,null],[17,"LZMA_GET_CHECK","","",null,null],[17,"LZMA_MEM_ERROR","","",null,null],[17,"LZMA_MEMLIMIT_ERROR","","",null,null],[17,"LZMA_FORMAT_ERROR","","",null,null],[17,"LZMA_OPTIONS_ERROR","","",null,null],[17,"LZMA_DATA_ERROR","","",null,null],[17,"LZMA_BUF_ERROR","","",null,null],[17,"LZMA_PROG_ERROR","","",null,null],[17,"LZMA_RUN","","",null,null],[17,"LZMA_SYNC_FLUSH","","",null,null],[17,"LZMA_FULL_FLUSH","","",null,null],[17,"LZMA_FULL_BARRIER","","",null,null],[17,"LZMA_FINISH","","",null,null],[17,"LZMA_CHECK_NONE","","",null,null],[17,"LZMA_CHECK_CRC32","","",null,null],[17,"LZMA_CHECK_CRC64","","",null,null],[17,"LZMA_CHECK_SHA256","","",null,null],[17,"LZMA_MODE_FAST","","",null,null],[17,"LZMA_MODE_NORMAL","","",null,null],[17,"LZMA_MF_HC3","","",null,null],[17,"LZMA_MF_HC4","","",null,null],[17,"LZMA_MF_BT2","","",null,null],[17,"LZMA_MF_BT3","","",null,null],[17,"LZMA_MF_BT4","","",null,null],[17,"LZMA_TELL_NO_CHECK","","",null,null],[17,"LZMA_TELL_UNSUPPORTED_CHECK","","",null,null],[17,"LZMA_TELL_ANY_CHECK","","",null,null],[17,"LZMA_IGNORE_CHECK","","",null,null],[17,"LZMA_CONCATENATED","","",null,null],[17,"LZMA_PRESET_DEFAULT","","",null,null],[17,"LZMA_PRESET_LEVEL_MASK","","",null,null],[17,"LZMA_PRESET_EXTREME","","",null,null],[17,"LZMA_DICT_SIZE_MIN","","",null,null],[17,"LZMA_DICT_SIZE_DEFAULT","","",null,null],[17,"LZMA_LCLP_MIN","","",null,null],[17,"LZMA_LCLP_MAX","","",null,null],[17,"LZMA_LC_DEFAULT","","",null,null],[17,"LZMA_LP_DEFAULT","","",null,null],[17,"LZMA_PB_MIN","","",null,null],[17,"LZMA_PB_MAX","","",null,null],[17,"LZMA_PB_DEFAULT","","",null,null],[17,"LZMA_BACKWARD_SIZE_MIN","","",null,null],[17,"LZMA_BACKWARD_SIZE_MAX","","",null,null],[17,"LZMA_VLI_MAX","","",null,null],[17,"LZMA_VLI_UNKNOWN","","",null,null],[17,"LZMA_VLI_BYTES_MAX","","",null,null],[17,"LZMA_FILTER_X86","","",null,null],[17,"LZMA_FILTER_POWERPC","","",null,null],[17,"LZMA_FILTER_IA64","","",null,null],[17,"LZMA_FILTER_ARM","","",null,null],[17,"LZMA_FILTER_ARMTHUMB","","",null,null],[17,"LZMA_FILTER_SPARC","","",null,null],[17,"LZMA_FILTER_LZMA1","","",null,null],[17,"LZMA_FILTER_LZMA2","","",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lzma_options_lzma"}}]],"paths":[[3,"lzma_allocator"],[3,"lzma_stream"],[3,"lzma_filter"],[3,"lzma_mt"],[3,"lzma_options_lzma"],[3,"lzma_stream_flags"],[3,"lzma_options_bcj"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",null,null],[3,"Memchr2","","An iterator for Memchr2",null,null],[3,"Memchr3","","An iterator for Memchr3",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,null],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,null],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"new","","Create a new Memchr2 that's initalized to zero with a haystack",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",2,null]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["miniz_sys"] = {"doc":"","items":[[3,"mz_stream","miniz_sys","",null,null],[12,"next_in","","",0,null],[12,"avail_in","","",0,null],[12,"total_in","","",0,null],[12,"next_out","","",0,null],[12,"avail_out","","",0,null],[12,"total_out","","",0,null],[12,"msg","","",0,null],[12,"state","","",0,null],[12,"zalloc","","",0,null],[12,"zfree","","",0,null],[12,"opaque","","",0,null],[12,"data_type","","",0,null],[12,"adler","","",0,null],[12,"reserved","","",0,null],[4,"mz_internal_state","","",null,null],[5,"mz_deflateInit2","","",null,null],[5,"mz_deflate","","",null,null],[5,"mz_deflateEnd","","",null,null],[5,"mz_deflateReset","","",null,null],[5,"mz_inflateInit2","","",null,null],[5,"mz_inflate","","",null,null],[5,"mz_inflateEnd","","",null,null],[5,"mz_crc32","","",null,null],[6,"mz_alloc_func","","",null,null],[6,"mz_free_func","","",null,null],[17,"MZ_NO_FLUSH","","",null,null],[17,"MZ_PARTIAL_FLUSH","","",null,null],[17,"MZ_SYNC_FLUSH","","",null,null],[17,"MZ_FULL_FLUSH","","",null,null],[17,"MZ_FINISH","","",null,null],[17,"MZ_BLOCK","","",null,null],[17,"MZ_OK","","",null,null],[17,"MZ_STREAM_END","","",null,null],[17,"MZ_NEED_DICT","","",null,null],[17,"MZ_ERRNO","","",null,null],[17,"MZ_STREAM_ERROR","","",null,null],[17,"MZ_DATA_ERROR","","",null,null],[17,"MZ_MEM_ERROR","","",null,null],[17,"MZ_BUF_ERROR","","",null,null],[17,"MZ_VERSION_ERROR","","",null,null],[17,"MZ_PARAM_ERROR","","",null,null],[17,"MZ_DEFLATED","","",null,null],[17,"MZ_DEFAULT_WINDOW_BITS","","",null,null],[17,"MZ_DEFAULT_STRATEGY","","",null,null]],"paths":[[3,"mz_stream"]]};
searchIndex["mopa"] = {"doc":"MOPA: My Own Personal Any. A macro to implement all the `Any` methods on your own trait.","items":[[8,"Any","mopa","A type to emulate dynamic typing.",null,null],[14,"mopafy","","The macro for implementing all the `Any` methods on your own trait.",null,null]],"paths":[]};
searchIndex["netlib_src"] = {"doc":"Source of [BLAS] and [LAPACK] via [Netlib].","items":[],"paths":[]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",13,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",13,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"bigint","","",null,null],[0,"complex","","",null,null],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null],[0,"rational","","",null,null],[11,"new","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"sign"},{"generics":["u32"],"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",17,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",17,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",17,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",17,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",17,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",17,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",17,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",17,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",17,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",17,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",17,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",17,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",17,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",17,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",17,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",17,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",17,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"mul_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"rem_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"div_assign","","",0,null],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["complex"],"name":"result"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"}],"output":{"generics":["complex"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"add_assign","","",0,null],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"generics":["complex"],"name":"result"}}],[11,"abs","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"checked_add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"bitor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"checked_mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"shr","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"checked_div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"mul_assign","","",18,null],[11,"mul_assign","","",18,null],[11,"mul_assign","","",18,null],[11,"mul_assign","","",18,null],[11,"mul_assign","","",18,null],[11,"mul_assign","","",18,null],[11,"mul_assign","","",18,null],[11,"sub_assign","","",18,null],[11,"sub_assign","","",18,null],[11,"sub_assign","","",18,null],[11,"sub_assign","","",18,null],[11,"sub_assign","","",18,null],[11,"sub_assign","","",18,null],[11,"sub_assign","","",18,null],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem_assign","","",18,null],[11,"rem_assign","","",18,null],[11,"rem_assign","","",18,null],[11,"rem_assign","","",18,null],[11,"rem_assign","","",18,null],[11,"rem_assign","","",18,null],[11,"rem_assign","","",18,null],[11,"div_assign","","",18,null],[11,"div_assign","","",18,null],[11,"div_assign","","",18,null],[11,"div_assign","","",18,null],[11,"div_assign","","",18,null],[11,"div_assign","","",18,null],[11,"div_assign","","",18,null],[11,"bitand_assign","","",18,null],[11,"bitand_assign","","",18,null],[11,"shr_assign","","",18,null],[11,"bitxor_assign","","",18,null],[11,"bitxor_assign","","",18,null],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"to_i64","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"to_i64","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"generics":["bigint"],"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"generics":["biguint"],"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"hash","","",17,null],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"zero","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from_i64","","",18,{"inputs":[{"name":"i64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_u64","","",18,{"inputs":[{"name":"u64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_f64","","",18,{"inputs":[{"name":"f64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_i64","","",17,{"inputs":[{"name":"i64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_u64","","",17,{"inputs":[{"name":"u64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_f64","","",17,{"inputs":[{"name":"f64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"to_bigint","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_bigint","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"shl_assign","","",18,null],[11,"bitxor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"checked_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"neg","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"neg","","",18,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"shl","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shl","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add_assign","","",18,null],[11,"add_assign","","",18,null],[11,"add_assign","","",18,null],[11,"add_assign","","",18,null],[11,"add_assign","","",18,null],[11,"add_assign","","",18,null],[11,"add_assign","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitor_assign","","",18,null],[11,"bitor_assign","","",18,null],[11,"one","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"one","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"div_rem","","",18,null],[11,"div_floor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",18,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"div_rem","","",17,null],[11,"div_floor","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",17,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_biguint","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"to_biguint","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"bitand","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"new","","Creates and initializes a `BigUint`.",18,{"inputs":[{"generics":["u32"],"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",18,null],[11,"assign_from_slice","","Assign a value to a `BigUint`.",18,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",18,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",18,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",18,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",18,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",18,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[3,"BigInt"],[3,"BigUint"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",0,null],[13,"Other","","",0,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"generics":["biguint"],"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["biguint","parsebiginterror"],"name":"result"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shl_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"zero","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"add_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"sub_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"mul_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"div_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":null}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"biguint"}}],[11,"rem_assign","","",2,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":null}],[11,"neg","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"checked_add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"div_rem","","",2,null],[11,"div_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",2,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_i64","","",2,{"inputs":[{"name":"i64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_u64","","",2,{"inputs":[{"name":"u64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from_f64","","",2,{"inputs":[{"name":"f64"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",2,{"inputs":[{"generics":["bigdigit"],"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",2,null],[11,"assign_from_slice","","Assign a value to a `BigUint`.",2,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,null],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must contain ascii/utf8 characters in [0-9a-zA-Z]. `radix` must be in the range `2...36`.",2,null],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",2,null],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",2,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"generics":["sign"],"name":"result"}}],[11,"neg","","Negate Sign value.",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"generics":["bigint"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["bigint","parsebiginterror"],"name":"result"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"doublebigdigit"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bigint"}}],[11,"neg","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"div_rem","","",3,null],[11,"div_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",3,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_u64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_i64","","",3,{"inputs":[{"name":"i64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"u64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from_f64","","",3,{"inputs":[{"name":"f64"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_bigint","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"to_biguint","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"sign"},{"generics":["bigdigit"],"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",3,null],[11,"assign_from_slice","","Reinitializes a `BigInt`.",3,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,null],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes in two's complement binary representation.",3,null],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes in two's complement.",3,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,null],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input slice is interpreted as one digit of the number and must therefore be less than `radix`.",3,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,null],[11,"to_signed_bytes_be","","Returns the two's complement byte representation of the `BigInt` in big-endian byte order.",3,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_signed_bytes_le","","Returns the two's complement byte representation of the `BigInt` in little-endian byte order.",3,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `2...36`.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"to_radix_be","","Returns the integer in the requested base in big-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"to_radix_le","","Returns the integer in the requested base in little-endian digit order. The output is not given in a human readable alphabet but as a zero based u8 number. `radix` must be in the range `2...256`.",3,null],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",3,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"generics":["bigint"],"name":"option"}}],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["biguint"],"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,{"inputs":[{"name":"self"}],"output":{"generics":["bigint"],"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",6,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[11,"add","num_bigint::big_digit","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",7,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",8,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[6,"BigDigit"],[6,"DoubleBigDigit"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[3,"ParseComplexError","","",null,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"generics":["complex"],"name":"result"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"self"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parsecomplexerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parsecomplexerror"}],"output":{"name":"bool"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"],[3,"ParseComplexError"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",1,{"inputs":[{"name":"t"}],"output":{"name":"iterbinomial"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"generics":["ratio"],"name":"result"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"generics":["bigrational"],"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"from","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["ratio","parseratioerror"],"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"generics":["ratio","parseratioerror"],"name":"result"}}],[11,"into","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"approximate_float","","",0,{"inputs":[{"name":"f"}],"output":{"generics":["ratio"],"name":"option"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",14,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["quick_error"] = {"doc":"A macro which makes errors easy to write","items":[[3,"Context","quick_error","Generic context type",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[8,"ResultExt","","Result extension trait adding a `context` method",null,null],[10,"context","","The method is use to add context information to current operation",1,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"generics":["context"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"quick_error","","Main macro that does all the work",null,null]],"paths":[[3,"Context"],[8,"ResultExt"]]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"IsaacRng","rand","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",18,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",18,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",18,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",18,null],[11,"reseed","","",18,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",18,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reseed","","",20,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",20,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"closed01"}}],[0,"jitter","","Non-physical true random number generator based on timing jitter.",null,null],[3,"JitterRng","rand::jitter","A true random number generator based on jitter in the CPU execution time, and jitter in memory access time.",null,null],[4,"TimerError","","An error that can occur when `test_timer` fails.",null,null],[13,"NoTimer","","No timer available.",21,null],[13,"CoarseTimer","","Timer too coarse to use as an entropy source.",21,null],[13,"NotMonotonic","","Timer is not monotonically increasing.",21,null],[13,"TinyVariantions","","Variations of deltas of time too small.",21,null],[13,"TooManyStuck","","Too many stuck results (indicating no added entropy).",21,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"timererror"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"timererror"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Create a new `JitterRng`. Makes use of `std::time` for a timer.",22,{"inputs":[],"output":{"generics":["jitterrng","timererror"],"name":"result"}}],[11,"new_with_timer","","Create a new `JitterRng`. A custom timer can be supplied, making it possible to use `JitterRng` in `no_std` environments.",22,null],[11,"set_rounds","","Configures how many rounds are used to generate each 64-bit value. This must be greater than zero, and has a big impact on performance and output quality.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"test_timer","","Basic quality tests on the timer, by measuring CPU timing jitter a few hundred times.",22,{"inputs":[{"name":"self"}],"output":{"generics":["u32","timererror"],"name":"result"}}],[11,"timer_stats","","Statistical test: return the timer delta of one normal run of the `JitterEntropy` entropy collector.",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"i64"}}],[11,"next_u32","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",22,null],[0,"os","rand","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",23,{"inputs":[],"output":{"generics":["osrng"],"name":"result"}}],[11,"next_u32","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",24,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[0,"seq","rand","Functions for randomly accessing and sampling sequences.",null,null],[5,"sample_iter","rand::seq","Randomly sample `amount` elements from a finite iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"generics":["vec","vec"],"name":"result"}}],[5,"sample_slice","","Randomly sample exactly `amount` values from `slice`.",null,null],[5,"sample_slice_ref","","Randomly sample exactly `amount` references from `slice`.",null,null],[5,"sample_indices","","Randomly sample exactly `amount` indices from `0..length`.",null,{"inputs":[{"name":"r"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["usize"],"name":"vec"}}],[11,"clone","rand","",25,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",25,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",25,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",25,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",25,null],[11,"rand","","",25,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",26,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",26,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",26,null],[11,"rand","","",26,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",27,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",27,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",27,null],[11,"rand","","",27,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",28,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",28,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",28,null],[11,"rand","","",28,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[0,"chacha","","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",29,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",30,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",30,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",30,null],[11,"gen","","Return a random value of a `Rand` type.",30,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",30,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",30,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",30,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",30,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",30,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",30,null],[11,"shuffle","","Shuffle a mutable slice in place.",30,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",31,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",31,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[],"output":{"generics":["stdrng"],"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[4,"TimerError"],[3,"JitterRng"],[3,"OsRng"],[3,"ReadRng"],[3,"ChaChaRng"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"XorShiftRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["regex"] = {"doc":"This crate provides a library for parsing, compiling, and executing regular expressions. Its syntax is similar to Perl-style regular expressions, but lacks a few features like look around and backreferences. In exchange, all searches execute in linear time with respect to the size of the regular expression and search text.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"NoExpand","","`NoExpand` indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSetBuilder","","A configurable builder for a set of regular expressions.",null,null],[3,"Match","","Match represents a single match of a regex in a haystack.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"Matches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"CaptureMatches","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"Split","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptureMatches","","An iterator that yields all capturing matches in the order in which they appear in the regex.",null,null],[3,"NoExpand","","`NoExpand` indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"clone","regex","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",4,{"inputs":[{"name":"self"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"build","","Consume the builder and compile the regular expression.",5,{"inputs":[{"name":"self"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",6,{"inputs":[{"name":"i"}],"output":{"name":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",6,{"inputs":[{"name":"self"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",7,{"inputs":[{"name":"i"}],"output":{"name":"regexsetbuilder"}}],[11,"build","","Consume the builder and compile the regular expressions into a set.",7,{"inputs":[{"name":"self"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexsetbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexsetbuilder"}}],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_bytes","","Returns the matched text.",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",9,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",9,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",9,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",9,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",9,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",9,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",9,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",9,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",9,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",9,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",9,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",9,null],[11,"shortest_match","","Returns the end location of a match in the text given.",9,null],[11,"as_str","","Returns the original string of this regex.",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",9,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["captures"],"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",14,null],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["match"],"name":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["match"],"name":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",15,{"inputs":[{"name":"self"}],"output":{"name":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",15,null],[11,"len","","Returns the number of captured groups.",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",15,null],[11,"index","","",15,null],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"replace_append","","",2,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"clone","regex","",17,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",17,{"inputs":[{"name":"i"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",18,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",18,null],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex::bytes","",21,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",21,{"inputs":[{"name":"i"}],"output":{"generics":["regexset","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",21,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",21,null],[11,"len","","Returns the total number of regular expressions in this set.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",22,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",22,null],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_back","","",24,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex","",25,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"start","","Returns the starting byte offset of the match in the haystack.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the ending byte offset of the match in the haystack.",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_str","","Returns the matched text.",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",26,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",26,{"inputs":[{"name":"str"}],"output":{"generics":["regex","error"],"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["match"],"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"matches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["captures"],"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about capturing group matches.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"capturematches"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"split"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"splitn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"generics":["str"],"name":"cow"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"generics":["str"],"name":"cow"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"generics":["str"],"name":"cow"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",26,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",26,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"size_hint","","",27,null],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"get","","Returns the match associated with the capture group at index `i`. If `i` does not correspond to a capture group, or if the capture group did not participate in the match, then `None` is returned.",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["match"],"name":"option"}}],[11,"name","","Returns the match for the capture group named `name`. If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["match"],"name":"option"}}],[11,"iter","","An iterator that yields all capturing matches in the order in which they appear in the regex. If a particular capture group didn't participate in the match, then `None` is yielded for that capture.",30,{"inputs":[{"name":"self"}],"output":{"name":"subcapturematches"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"string"}],"output":null}],[11,"len","","Returns the number of captured groups.",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",30,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",30,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["captures"],"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["match"],"name":"option"}}],[11,"replace_append","","",0,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",34,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"string"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement string.",34,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"no_expansion","","Return a fixed unchanging replacement string.",34,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"RegexSetBuilder"],[3,"RegexSetBuilder"],[3,"Match"],[3,"Regex"],[3,"Matches"],[3,"CaptureMatches"],[3,"Split"],[3,"SplitN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Match"],[3,"Regex"],[3,"CaptureNames"],[3,"Split"],[3,"SplitN"],[3,"Captures"],[3,"SubCaptureMatches"],[3,"CaptureMatches"],[3,"Matches"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for regular expressions. The abstract syntax is defined by the `Expr` type. The concrete syntax is enumerated in the `regex` crate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word character on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word characters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes or grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the least).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings. e.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once. e.g., `(?P<a>.)(?P<a>.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P<>a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence. e.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P<0a>b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the range is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not allowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal sequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be repeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P<a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes. This never returned if the parser is permitted to allow expressions that match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty. e.g., `[^\\d\\D]`.",4,null],[13,"UnsupportedClassChar","","Indicates that unsupported notation was used in a character class.",4,null],[5,"escape","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"ordering"}}],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"min_len","","Returns the length of the smallest literal.",5,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"all_complete","","Returns true if all members in this set are complete.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["literals"],"name":"option"}}],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"reverse","","Reverses all members in place.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Clears this set of all members.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",6,null],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"repeater"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"classrange"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"byterange"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"ordering"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"exprbuilder"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new builder for configuring expression parsing.",9,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"exprbuilder"}}],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["expr"],"name":"result"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"generics":["expr"],"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the end of the text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions that can match arbitrary bytes.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["classrange"],"name":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",7,{"inputs":[{"generics":["classrange"],"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given character from the class if it exists.",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"negate","","Negates the character class.",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"new","","Create a new class from an existing set of ranges.",8,{"inputs":[{"generics":["byterange"],"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given byte from the class if it exists.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"negate","","Negates the byte class.",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"case_fold","","Apply case folding to this byte class.",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["byterange"],"name":"intoiter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"position","","Returns an approximate character offset at which the error occurred.",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",10,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["rug"] = {"doc":"Arbitrary-precision numbers","items":[[3,"Integer","rug","An arbitrary-precision integer.",null,null],[3,"Rational","","An arbitrary-precision rational number.",null,null],[0,"ops","","Operations on numbers.",null,null],[8,"NegAssign","rug::ops","Compound negation and assignment.",null,null],[10,"neg_assign","","Peforms the negation.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"NotAssign","","Compound bitwise complement and assignement.",null,null],[10,"not_assign","","Peforms the complement.",1,{"inputs":[{"name":"self"}],"output":null}],[8,"AddFrom","","Compound addition and assignment to the rhs operand.",null,null],[10,"add_from","","Peforms the addition.",2,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[8,"SubFrom","","Compound subtraction and assignment to the rhs operand.",null,null],[10,"sub_from","","Peforms the subtraction.",3,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[8,"MulFrom","","Compound multiplication and assignment to the rhs operand.",null,null],[10,"mul_from","","Peforms the multiplication.",4,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[8,"DivFrom","","Compound division and assignment to the rhs operand.",null,null],[10,"div_from","","Peforms the division.",5,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[8,"RemFrom","","Compound remainder operation and assignment to the rhs operand.",null,null],[10,"rem_from","","Peforms the remainder operation.",6,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[8,"BitAndFrom","","Compound bitwise AND and assignment to the rhs operand.",null,null],[10,"bitand_from","","Peforms the AND operation.",7,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[8,"BitOrFrom","","Compound bitwise OR and assignment to the rhs operand.",null,null],[10,"bitor_from","","Peforms the OR operation.",8,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[8,"BitXorFrom","","Compound bitwise XOR and assignment to the rhs operand.",null,null],[10,"bitxor_from","","Peforms the XOR operation.",9,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[8,"ShlFrom","","Compound left shift and assignment to the rhs operand.",null,null],[10,"shl_from","","Peforms the left shift.",10,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[8,"ShrFrom","","Compound right shift and assignment to the rhs operand.",null,null],[10,"shr_from","","Peforms the right shift.",11,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[8,"Pow","","The power operation.",null,null],[16,"Output","","The resulting type after the power operation.",12,null],[10,"pow","","Performs the power operation.",12,null],[8,"PowAssign","","Compound power operation and assignment.",null,null],[10,"pow_assign","","Peforms the power operation.",13,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"PowFrom","","Compound power operation and assignment to the rhs operand.",null,null],[10,"pow_from","","Peforms the power operation.",14,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[8,"AssignRound","","Assignment with a specified rounding method.",null,null],[16,"Round","","The rounding method.",15,null],[16,"Ordering","","The direction from rounding.",15,null],[10,"assign_round","","Peforms the assignment.",15,null],[8,"AddAssignRound","","Compound addition and assignment with a specified rounding method.",null,null],[16,"Round","","The rounding method.",16,null],[16,"Ordering","","The direction from rounding.",16,null],[10,"add_assign_round","","Performs the addition.",16,null],[8,"AddFromRound","","Compound addition and assignment to the rhs operand with a specified rounding method.",null,null],[16,"Round","","The rounding method.",17,null],[16,"Ordering","","The direction from rounding.",17,null],[10,"add_from_round","","Performs the addition.",17,null],[8,"SubAssignRound","","Compound subtraction and assignment with a specified rounding method.",null,null],[16,"Round","","The rounding method.",18,null],[16,"Ordering","","The direction from rounding.",18,null],[10,"sub_assign_round","","Performs the subtraction.",18,null],[8,"SubFromRound","","Compound subtraction and assignment to the rhs operand with a specified rounding method.",null,null],[16,"Round","","The rounding method.",19,null],[16,"Ordering","","The direction from rounding.",19,null],[10,"sub_from_round","","Performs the subtraction.",19,null],[8,"MulAssignRound","","Compound multiplication and assignment with a specified rounding method.",null,null],[16,"Round","","The rounding method.",20,null],[16,"Ordering","","The direction from rounding.",20,null],[10,"mul_assign_round","","Performs the multiplication.",20,null],[8,"MulFromRound","","Compound multiplication and assignment to the rhs operand with a specified rounding method.",null,null],[16,"Round","","The rounding method.",21,null],[16,"Ordering","","The direction from rounding.",21,null],[10,"mul_from_round","","Performs the multiplication.",21,null],[8,"DivAssignRound","","Compound division and assignment with a specified rounding method.",null,null],[16,"Round","","The rounding method.",22,null],[16,"Ordering","","The direction from rounding.",22,null],[10,"div_assign_round","","Performs the division.",22,null],[8,"DivFromRound","","Compound division and assignment to the rhs operand with a specified rounding method.",null,null],[16,"Round","","The rounding method.",23,null],[16,"Ordering","","The direction from rounding.",23,null],[10,"div_from_round","","Performs the division.",23,null],[8,"PowAssignRound","","Compound power operation and assignment with a specified rounding method.",null,null],[16,"Round","","The rounding method.",24,null],[16,"Ordering","","The direction from rounding.",24,null],[10,"pow_assign_round","","Performs the power operation.",24,null],[8,"PowFromRound","","Compound power operation and assignment to the rhs operand with a specified rounding method.",null,null],[16,"Round","","The rounding method.",25,null],[16,"Ordering","","The direction from rounding.",25,null],[10,"pow_from_round","","Performs the power operation.",25,null],[8,"DivRounding","","Rounding variants of division.",null,null],[16,"Output","","The resulting type from the division operation.",26,null],[10,"div_trunc","","Performs division, rounding the quotient towards zero.",26,null],[10,"div_ceil","","Performs division, rounding the quotient up.",26,null],[10,"div_floor","","Performs division, rounding the quotient down.",26,null],[10,"div_euc","","Performs Euclidean division, rounding the quotient so that the remainder cannot be negative.",26,null],[8,"DivRoundingAssign","","Compound assignment and rounding variants of division.",null,null],[10,"div_trunc_assign","","Performs division, rounding the quotient towards zero.",27,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"div_ceil_assign","","Performs division, rounding the quotient up.",27,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"div_floor_assign","","Performs division, rounding the quotient down.",27,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"div_euc_assign","","Performs Euclidean division, rounding the quotient so that the remainder cannot be negative.",27,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"DivRoundingFrom","","Compound assignment to the rhs operand and rounding variants of division.",null,null],[10,"div_trunc_from","","Performs division, rounding the quotient towards zero.",28,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[10,"div_ceil_from","","Performs division, rounding the quotient up.",28,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[10,"div_floor_from","","Performs division, rounding the quotient down.",28,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[10,"div_euc_from","","Performs Euclidean division, rounding the quotient so that the remainder cannot be negative.",28,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[8,"RemRounding","","Rounding variants of the remainder operation.",null,null],[16,"Output","","The resulting type from the remainder operation.",29,null],[10,"rem_trunc","","Finds the remainder when the quotient is rounded towards zero.",29,null],[10,"rem_ceil","","Finds the remainder when the quotient is rounded up.",29,null],[10,"rem_floor","","Finds the remainder when the quotient is rounded down.",29,null],[10,"rem_euc","","Finds the positive remainder from Euclidean division.",29,null],[8,"RemRoundingAssign","","Compound assignment and rounding variants of the remainder operation.",null,null],[10,"rem_trunc_assign","","Finds the remainder when the quotient is rounded towards zero.",30,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"rem_ceil_assign","","Finds the remainder when the quotient is rounded up.",30,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"rem_floor_assign","","Finds the remainder when the quotient is rounded down.",30,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[10,"rem_euc_assign","","Finds the positive remainder from Euclidean division.",30,{"inputs":[{"name":"self"},{"name":"rhs"}],"output":null}],[8,"RemRoundingFrom","","Compound assignment to the rhs operand and rounding variants of the remainder operation.",null,null],[10,"rem_trunc_from","","Finds the remainder when the quotient is rounded towards zero.",31,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[10,"rem_ceil_from","","Finds the remainder when the quotient is rounded up.",31,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[10,"rem_floor_from","","Finds the remainder when the quotient is rounded down.",31,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[10,"rem_euc_from","","Finds the positive remainder from Euclidean division.",31,{"inputs":[{"name":"self"},{"name":"lhs"}],"output":null}],[11,"new","rug","Constructs a new arbitrary-precision integer with value 0.",32,{"inputs":[],"output":{"name":"integer"}}],[11,"with_capacity","","Constructs a new arbitrary-precision integer with at least the specified capacity.",32,{"inputs":[{"name":"usize"}],"output":{"name":"integer"}}],[11,"capacity","","Returns the capacity in bits that can be stored without reallocating.",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bits in the `Integer`.",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the `Integer` as much as possible.",32,{"inputs":[{"name":"self"}],"output":null}],[11,"from_f32","","Creates an `Integer` from an `f32` if it is finite, rounding towards zero.",32,{"inputs":[{"name":"f32"}],"output":{"generics":["integer"],"name":"option"}}],[11,"from_f64","","Creates an `Integer` from an `f64` if it is finite, rounding towards zero.",32,{"inputs":[{"name":"f64"}],"output":{"generics":["integer"],"name":"option"}}],[11,"from_str_radix","","Parses an `Integer` using the given radix.",32,{"inputs":[{"name":"str"},{"name":"i32"}],"output":{"generics":["integer","parseintegererror"],"name":"result"}}],[11,"valid_str_radix","","Checks if an `Integer` can be parsed.",32,{"inputs":[{"name":"str"},{"name":"i32"}],"output":{"generics":["validinteger","parseintegererror"],"name":"result"}}],[11,"to_i8","","Converts to an `i8` if the value fits.",32,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts to an `i16` if the value fits.",32,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts to an `i32` if the value fits.",32,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"to_i64","","Converts to an `i64` if the value fits.",32,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_isize","","Converts to an `isize` if the value fits.",32,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_u8","","Converts to a `u8` if the value fits.",32,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts to a `u16` if the value fits.",32,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts to a `u32` if the value fits.",32,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"to_u64","","Converts to a `u64` if the value fits.",32,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_usize","","Converts to a `usize` if the value fits.",32,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_i8_wrapping","","Converts to an `i8`, wrapping if the value does not fit.",32,{"inputs":[{"name":"self"}],"output":{"name":"i8"}}],[11,"to_i16_wrapping","","Converts to an `i16`, wrapping if the value does not fit.",32,{"inputs":[{"name":"self"}],"output":{"name":"i16"}}],[11,"to_i32_wrapping","","Converts to an `i32`, wrapping if the value does not fit.",32,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"to_i64_wrapping","","Converts to an `i64`, wrapping if the value does not fit.",32,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"to_isize_wrapping","","Converts to an `isize`, wrapping if the value does not fit.",32,{"inputs":[{"name":"self"}],"output":{"name":"isize"}}],[11,"to_u8_wrapping","","Converts to a `u8`, wrapping if the value does not fit.",32,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"to_u16_wrapping","","Converts to a `u16`, wrapping if the value does not fit.",32,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"to_u32_wrapping","","Converts to a `u32`, wrapping if the value does not fit.",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"to_u64_wrapping","","Converts to a `u64`, wrapping if the value does not fit.",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"to_usize_wrapping","","Converts to a `usize`, wrapping if the value does not fit.",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_f32","","Converts to an `f32`, rounding towards zero.",32,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_f64","","Converts to an `f64`, rounding towards zero.",32,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"to_f32_exp","","Converts to an `f32` and an exponent, rounding towards zero.",32,null],[11,"to_f64_exp","","Converts to an `f64` and an exponent, rounding towards zero.",32,null],[11,"to_string_radix","","Returns a string representation of the number for the specified `radix`.",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"string"}}],[11,"assign_f32","","Assigns from an `f32` if it is finite, rounding towards zero.",32,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"assign_f64","","Assigns from an `f64` if it is finite, rounding towards zero.",32,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"assign_str","","Parses an `Integer` from a string in decimal.",32,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["parseintegererror"],"name":"result"}}],[11,"assign_str_radix","","Parses an `Integer` from a string with the specified radix.",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"generics":["parseintegererror"],"name":"result"}}],[11,"from_raw","","Creates an `Integer` from an initialized GMP integer.",32,{"inputs":[{"name":"mpz_t"}],"output":{"name":"integer"}}],[11,"into_raw","","Converts an `Integer` into a GMP integer.",32,{"inputs":[{"name":"self"}],"output":{"name":"mpz_t"}}],[11,"as_raw","","Returns a pointer to the internal GMP integer.",32,null],[11,"as_raw_mut","","Returns an unsafe mutable pointer to the internal GMP integer.",32,null],[11,"as_neg","","Borrows a negated copy of the `Integer`.",32,{"inputs":[{"name":"self"}],"output":{"name":"borrowinteger"}}],[11,"as_abs","","Borrows an absolute copy of the `Integer`.",32,{"inputs":[{"name":"self"}],"output":{"name":"borrowinteger"}}],[11,"is_even","","Returns `true` if the number is even.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is odd.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_divisible","","Returns `true` if the number is divisible by `divisor`. Unlike other division functions, `divisor` can be zero.",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"bool"}}],[11,"is_divisible_u","","Returns `true` if the number is divisible by `divisor`. Unlike other division functions, `divisor` can be zero.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"is_divisible_2pow","","Returns `true` if the number is divisible by 2b.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"is_congruent","","Returns `true` if the number is congruent to c mod divisor, that is, if there exists a q such that `self` = c + q × divisor. Unlike other division functions, `divisor` can be zero.",32,{"inputs":[{"name":"self"},{"name":"integer"},{"name":"integer"}],"output":{"name":"bool"}}],[11,"is_congruent_u","","Returns `true` if the number is congruent to c mod divisor, that is, if there exists a q such that `self` = c + q × divisor. Unlike other division functions, `divisor` can be zero.",32,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"is_congruent_2pow","","Returns `true` if the number is congruent to c mod 2b, that is, if there exists a q such that `self` = c + q × 2b.",32,{"inputs":[{"name":"self"},{"name":"integer"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"is_perfect_power","","Returns `true` if the number is a perfect power.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_perfect_square","","Returns `true` if the number is a perfect square.",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp0","","Returns the same result as `self.cmp(&0)`, but is faster.",32,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"cmp_abs","","Compares the absolute values.",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"ordering"}}],[11,"significant_bits","","Returns the number of bits required to represent the absolute value.",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"count_ones","","Returns the number of one bits if the value ≥ 0.",32,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"count_zeros","","Returns the number of zero bits if the value < 0.",32,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"find_zero","","Returns the location of the first zero, starting at `start`. If the bit at location `start` is zero, returns `start`.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u32"],"name":"option"}}],[11,"find_one","","Returns the location of the first one, starting at `start`. If the bit at location `start` is one, returns `start`.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["u32"],"name":"option"}}],[11,"set_bit","","Sets the bit at location `index` to 1 if `val` is `true` or 0 if `val` is `false`.",32,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"bool"}],"output":{"name":"integer"}}],[11,"get_bit","","Returns `true` if the bit at location `index` is 1 or `false` if the bit is 0.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"toggle_bit","","Toggles the bit at location `index`.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"hamming_dist","","Retuns the Hamming distance if the two numbers have the same sign.",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"generics":["u32"],"name":"option"}}],[11,"abs","","Computes the absolute value.",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"abs_mut","","Computes the absolute value.",32,{"inputs":[{"name":"self"}],"output":null}],[11,"abs_ref","","Computes the absolute value.",32,{"inputs":[{"name":"self"}],"output":{"name":"absref"}}],[11,"signum","","Computes the signum.",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"signum_mut","","Computes the signum.",32,{"inputs":[{"name":"self"}],"output":null}],[11,"signum_ref","","Computes the signum.",32,{"inputs":[{"name":"self"}],"output":{"name":"signumref"}}],[11,"clamp","","Clamps the value within the specified bounds.",32,{"inputs":[{"name":"self"},{"name":"min"},{"name":"max"}],"output":{"name":"integer"}}],[11,"clamp_mut","","Clamps the value within the specified bounds.",32,{"inputs":[{"name":"self"},{"name":"min"},{"name":"max"}],"output":null}],[11,"clamp_ref","","Clamps the value within the specified bounds.",32,{"inputs":[{"name":"self"},{"name":"min"},{"name":"max"}],"output":{"name":"clampref"}}],[11,"keep_bits","","Keeps the n least significant bits only.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"keep_bits_mut","","Keeps the n least significant bits only.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"keep_bits_ref","","Keeps the n least significant bits only.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"keepbitsref"}}],[11,"next_power_of_two","","Finds the next power of two, or 1 if the number ≤ 0.",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next_power_of_two_mut","","Finds the next power of two, or 1 if the number ≤ 0.",32,{"inputs":[{"name":"self"}],"output":null}],[11,"next_power_of_two_ref","","Finds the next power of two, or 1 if the number ≤ 0.",32,{"inputs":[{"name":"self"}],"output":{"name":"nextpowertworef"}}],[11,"div_rem","","Performs a division producing both the quotient and remainder.",32,null],[11,"div_rem_mut","","Performs a division producing both the quotient and remainder.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"div_rem_ref","","Performs a division producing both the quotient and remainder.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"divremref"}}],[11,"div_rem_ceil","","Performs a division producing both the quotient and remainder, with the quotient rounded up.",32,null],[11,"div_rem_ceil_mut","","Performs a division producing both the quotient and remainder, with the quotient rounded up.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"div_rem_ceil_ref","","Performs a division producing both the quotient and remainder, with the quotient rounded up.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"divremceilref"}}],[11,"div_rem_floor","","Performs a division producing both the quotient and remainder, with the quotient rounded down.",32,null],[11,"div_rem_floor_mut","","Performs a division producing both the quotient and remainder, with the quotient rounded down.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"div_rem_floor_ref","","Performs a division producing both the quotient and remainder, with the quotient rounded down.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"divremfloorref"}}],[11,"div_rem_euc","","Performs Euclidean division producing both the quotient and remainder, with a positive remainder.",32,null],[11,"div_rem_euc_mut","","Performs Euclidean division producing both the quotient and remainder, with a positive remainder.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"div_rem_euc_ref","","Performs Euclidan division producing both the quotient and remainder, with a positive remainder.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"divremeucref"}}],[11,"mod_u","","Returns the modulo, or the remainder of Euclidean division by a `u32`.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"div_exact","","Performs an exact division.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"div_exact_mut","","Performs an exact division.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"div_exact_ref","","Performs an exact division.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"divexactref"}}],[11,"div_exact_u","","Performs an exact division.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"div_exact_u_mut","","Performs an exact division.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_exact_u_ref","","Performs an exact division.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"divexacturef"}}],[11,"invert","","Finds the inverse modulo `modulo` and returns `Ok(inverse)` if it exists, or `Err(unchanged)` if the inverse does not exist.",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"generics":["integer","integer"],"name":"result"}}],[11,"invert_mut","","Finds the inverse modulo `modulo` and returns `true` if an inverse exists.",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"bool"}}],[11,"invert_ref","","Finds the inverse modulo `modulo` if an inverse exists.",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"invertref"}}],[11,"pow_mod","","Raises a number to the power of `exponent` modulo `modulo` and returns `Ok(power)` if an answer exists, or `Err(unchanged)` if it does not.",32,{"inputs":[{"name":"self"},{"name":"integer"},{"name":"integer"}],"output":{"generics":["integer","integer"],"name":"result"}}],[11,"pow_mod_mut","","Raises a number to the power of `exponent` modulo `modulo` and returns `true` if an answer exists.",32,{"inputs":[{"name":"self"},{"name":"integer"},{"name":"integer"}],"output":{"name":"bool"}}],[11,"pow_mod_ref","","Raises a number to the power of `exponent` modulo `modulo` if an answer exists.",32,{"inputs":[{"name":"self"},{"name":"integer"},{"name":"integer"}],"output":{"name":"powmodref"}}],[11,"u_pow_u","","Raises `base` to the power of `exponent`.",32,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"upowu"}}],[11,"assign_u_pow_u","","Raises `base` to the power of `exponent`.",32,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"i_pow_u","","Raises `base` to the power of `exponent`.",32,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"ipowu"}}],[11,"assign_i_pow_u","","Raises `base` to the power of `exponent`.",32,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":null}],[11,"root","","Computes the nth root and truncates the result.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"root_mut","","Computes the nth root and truncates the result.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"root_ref","","Computes the nth root and truncates the result.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"rootref"}}],[11,"root_rem","","Computes the nth root and returns the truncated root and the remainder.",32,null],[11,"root_rem_mut","","Computes the nth root and returns the truncated root and the remainder.",32,{"inputs":[{"name":"self"},{"name":"self"},{"name":"u32"}],"output":null}],[11,"root_rem_ref","","Computes the nth root and returns the truncated root and the remainder.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"rootremref"}}],[11,"sqrt","","Computes the square root and truncates the result.",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sqrt_mut","","Computes the square root and truncates the result.",32,{"inputs":[{"name":"self"}],"output":null}],[11,"sqrt_ref","","Computes the square root and truncates the result.",32,{"inputs":[{"name":"self"}],"output":{"name":"sqrtref"}}],[11,"sqrt_rem","","Computes the square root and the remainder.",32,null],[11,"sqrt_rem_mut","","Computes the square root and the remainder.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sqrt_rem_ref","","Computes the square root and the remainder.",32,{"inputs":[{"name":"self"}],"output":{"name":"sqrtremref"}}],[11,"is_probably_prime","","Determines wheter a number is prime using some trial divisions, then `reps` Miller-Rabin probabilistic primality tests.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"isprime"}}],[11,"next_prime","","Identifies primes using a probabilistic algorithm; the chance of a composite passing will be extremely small.",32,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next_prime_mut","","Identifies primes using a probabilistic algorithm; the chance of a composite passing will be extremely small.",32,{"inputs":[{"name":"self"}],"output":null}],[11,"next_prime_ref","","Identifies primes using a probabilistic algorithm; the chance of a composite passing will be extremely small.",32,{"inputs":[{"name":"self"}],"output":{"name":"nextprimeref"}}],[11,"gcd","","Finds the greatest common divisor.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"gcd_mut","","Finds the greatest common divisor.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"gcd_ref","","Finds the greatest common divisor.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"gcdref"}}],[11,"gcd_coeffs","","Finds the greatest common divisor (GCD) of the two inputs (`self` and `other`), and two multiplication coefficients to obtain the GCD from the two inputs.",32,null],[11,"gcd_coeffs_mut","","Finds the greatest common divisor (GCD) of the two inputs (`self` and `other`), and two multiplication coefficients to obtain the GCD from the two inputs.",32,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":null}],[11,"gcd_coeffs_ref","","Finds the greatest common divisor (GCD) of the two inputs (`self` and `other`), and two multiplication coefficients to obtain the GCD from the two inputs.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"gcdcoeffsref"}}],[11,"lcm","","Finds the least common multiple.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"lcm_mut","","Finds the least common multiple.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"lcm_ref","","Finds the least common multiple.",32,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"lcmref"}}],[11,"jacobi","","Calculates the Jacobi symbol (`self`/n).",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"i32"}}],[11,"legendre","","Calculates the Legendre symbol (`self`/p).",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"i32"}}],[11,"kronecker","","Calculates the Jacobi symbol (`self`/n) with the Kronecker extension.",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"i32"}}],[11,"remove_factor","","Removes all occurrences of `factor`, and returns the number of occurrences removed.",32,null],[11,"remove_factor_mut","","Removes all occurrences of `factor`, and returns the number of occurrences removed.",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"u32"}}],[11,"remove_factor_ref","","Removes all occurrences of `factor`, and counts the number of occurrences removed.",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"removefactorref"}}],[11,"factorial","","Computes the factorial of n.",32,{"inputs":[{"name":"u32"}],"output":{"name":"factorial"}}],[11,"assign_factorial","","Computes the factorial of n.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"factorial_2","","Computes the double factorial of n.",32,{"inputs":[{"name":"u32"}],"output":{"name":"factorial2"}}],[11,"assign_factorial_2","","Computes the double factorial of n.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"factorial_m","","Computes the m-multi factorial of n.",32,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"factorialm"}}],[11,"assign_factorial_m","","Computes the m-multi factorial of n.",32,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"primorial","","Computes the primorial of n.",32,{"inputs":[{"name":"u32"}],"output":{"name":"primorial"}}],[11,"assign_primorial","","Computes the primorial of n.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"binomial","","Computes the binomial coefficient over k.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"binomial_mut","","Computes the binomial coefficient over k.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"binomial_ref","","Computes the binomial coefficient over k.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"binomialref"}}],[11,"binomial_u","","Computes the binomial coefficient n over k.",32,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"binomialu"}}],[11,"assign_binomial_u","","Computes the binomial coefficient n over k.",32,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"fibonacci","","Computes the Fibonacci number.",32,{"inputs":[{"name":"u32"}],"output":{"name":"fibonacci"}}],[11,"assign_fibonacci","","Computes the Fibonacci number.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"fibonacci_2","","Computes a Fibonacci number, and the previous Fibonacci number.",32,{"inputs":[{"name":"u32"}],"output":{"name":"fibonacci2"}}],[11,"assign_fibonacci_2","","Computes a Fibonacci number, and the previous Fibonacci number.",32,{"inputs":[{"name":"self"},{"name":"integer"},{"name":"u32"}],"output":null}],[11,"lucas","","Computes the Lucas number.",32,{"inputs":[{"name":"u32"}],"output":{"name":"lucas"}}],[11,"assign_lucas","","Computes the Lucas number.",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"lucas_2","","Computes a Lucas number, and the previous Lucas number.",32,{"inputs":[{"name":"u32"}],"output":{"name":"lucas2"}}],[11,"assign_lucas_2","","Computes a Lucas number, and the previous Lucas number.",32,{"inputs":[{"name":"self"},{"name":"integer"},{"name":"u32"}],"output":null}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"validinteger"}],"output":null}],[11,"from","","",32,{"inputs":[{"name":"validinteger"}],"output":{"name":"self"}}],[0,"integer","","Aribtrary-precision integers.",null,null],[3,"ParseIntegerError","rug::integer","An error which can be returned when parsing an `Integer`.",null,null],[3,"ValidInteger","","A validated string that can always be converted to an `Integer`.",null,null],[3,"SmallInteger","","A small integer that does not require any memory allocation.",null,null],[4,"IsPrime","","Whether a number is prime.",null,null],[13,"No","","The number is definitely not prime.",33,null],[13,"Probably","","The number is probably prime.",33,null],[13,"Yes","","The number is definitely prime.",33,null],[11,"neg","rug","",32,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"neg_assign","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"add","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"add","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"add_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"add_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"add_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"add_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"sub","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"sub","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"sub_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"sub_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"sub_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"sub_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"mul","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"mul","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"mul_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"mul_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"mul_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"mul_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"div","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"div_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"rem","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"rem_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"not","","",32,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"not_assign","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"bitand","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"bitand","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"bitand_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"bitand_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"bitand_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"bitand_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"bitor","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"bitor","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"bitor_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"bitor_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"bitor_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"bitor_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"bitxor","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"bitxor","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"bitxor_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"bitxor_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"bitxor_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"bitxor_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"add","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"add","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"add_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"add_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"add_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"add_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"sub","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"sub","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"sub_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"sub_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"sub_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"sub_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"mul","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"mul","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"mul_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"mul_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"mul_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"mul_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"div","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"div_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"rem","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"rem_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"shl","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"shl","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"shl_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"shl_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"shr","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"shr","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"shr_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"shr_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"bitand","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"bitand","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"bitand_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"bitand_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"bitand_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"bitand_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"bitor","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"bitor","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"bitor_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"bitor_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"bitor_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"bitor_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"bitxor","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"bitxor","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"bitxor_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"bitxor_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"bitxor_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"bitxor_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"add","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"add","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"add_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"add_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"add_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"add_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"sub","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"sub","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"sub_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"sub_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"sub_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"sub_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"mul","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"mul","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"mul_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"mul_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"mul_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"mul_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"div","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"div_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"rem","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"rem_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"shl","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"shl","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"shl_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"shl_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"shr","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"shr","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"shr_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"shr_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"pow","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"pow","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"pow_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"pow_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"bitand","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"bitand","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"bitand_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"bitand_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"bitand_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"bitand_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"bitor","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"bitor","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"bitor_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"bitor_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"bitor_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"bitor_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"bitxor","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"bitxor","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"bitxor_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"bitxor_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"bitxor_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"bitxor_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"sum","","",32,{"inputs":[{"name":"i"}],"output":{"name":"integer"}}],[11,"sum","","",32,{"inputs":[{"name":"i"}],"output":{"name":"integer"}}],[11,"product","","",32,{"inputs":[{"name":"i"}],"output":{"name":"integer"}}],[11,"product","","",32,{"inputs":[{"name":"i"}],"output":{"name":"integer"}}],[11,"cmp","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"ordering"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"div_trunc","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"div_ceil","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"div_floor","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"div_euc","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"div_trunc","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"div_ceil","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"div_floor","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"div_euc","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"div_trunc_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_ceil_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_floor_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_euc_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_trunc_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_ceil_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_floor_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_euc_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_trunc_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_ceil_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_floor_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_euc_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_trunc_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_ceil_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_floor_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_euc_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_trunc","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"rem_ceil","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"rem_floor","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"rem_euc","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"rem_trunc","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"rem_ceil","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"rem_floor","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"rem_euc","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"integer"}}],[11,"rem_trunc_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_ceil_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_floor_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_euc_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_trunc_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_ceil_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_floor_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_euc_assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_trunc_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_ceil_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_floor_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_euc_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_trunc_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_ceil_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_floor_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"rem_euc_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"div_trunc","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"div_ceil","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"div_floor","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"div_euc","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"div_trunc","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"div_ceil","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"div_floor","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"div_euc","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"div_trunc_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_ceil_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_floor_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_euc_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_trunc_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_ceil_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_floor_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_euc_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_trunc_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_ceil_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_floor_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_euc_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_trunc_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_ceil_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_floor_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_euc_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_trunc","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"rem_ceil","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"rem_floor","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"rem_euc","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"rem_trunc","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"rem_ceil","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"rem_floor","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"rem_euc","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"integer"}}],[11,"rem_trunc_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_ceil_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_floor_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_euc_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_trunc_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_ceil_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_floor_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_euc_assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_trunc_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_ceil_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_floor_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_euc_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_trunc_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_ceil_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_floor_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"rem_euc_from","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_trunc","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"div_ceil","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"div_floor","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"div_euc","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"div_trunc","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"div_ceil","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"div_floor","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"div_euc","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"div_trunc_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_ceil_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_floor_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_euc_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_trunc_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_ceil_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_floor_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_euc_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_trunc_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_ceil_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_floor_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_euc_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_trunc_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_ceil_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_floor_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"div_euc_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_trunc","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"rem_ceil","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"rem_floor","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"rem_euc","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"rem_trunc","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"rem_ceil","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"rem_floor","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"rem_euc","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"integer"}}],[11,"rem_trunc_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_ceil_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_floor_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_euc_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_trunc_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_ceil_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_floor_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_euc_assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_trunc_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_ceil_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_floor_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_euc_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_trunc_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_ceil_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_floor_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"rem_euc_from","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"clone","rug::integer","",34,{"inputs":[{"name":"self"}],"output":{"name":"smallinteger"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"smallinteger"}}],[11,"new","","Creates a `SmallInteger` with value 0.",34,{"inputs":[],"output":{"name":"smallinteger"}}],[11,"as_nonreallocating_integer","","Returns a mutable reference to an `Integer` for simple operations that do not need to allocate more space for the number.",34,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"deref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"assign","","",34,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"from","","",34,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"assign","","",34,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"from","","",34,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"assign","","",34,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"from","","",34,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"assign","","",34,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"from","","",34,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"assign","","",34,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"from","","",34,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"assign","","",34,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"from","","",34,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"assign","","",34,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"from","","",34,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"assign","","",34,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"from","","",34,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"assign","","",34,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"from","","",34,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"assign","","",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"from","","",34,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"assign","","",34,{"inputs":[{"name":"self"},{"name":"smallinteger"}],"output":null}],[11,"assign","","",34,{"inputs":[{"name":"self"},{"name":"smallinteger"}],"output":null}],[11,"default","rug","",32,{"inputs":[],"output":{"name":"integer"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"clone_from","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"drop","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"hash","","",32,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"from","","",32,{"inputs":[{"name":"integer"}],"output":{"name":"self"}}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"from","","",32,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"i8"}],"output":null}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"from","","",32,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"i16"}],"output":null}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"from","","",32,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"from","","",32,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"from","","",32,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"isize"}],"output":null}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"from","","",32,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"from","","",32,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"from","","",32,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"from","","",32,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"from","","",32,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"assign","","",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"from_str","","",32,{"inputs":[{"name":"str"}],"output":{"generics":["integer","parseintegererror"],"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rug::integer","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","rug","Constructs a new arbitrary-precision rational number with value 0.",36,{"inputs":[],"output":{"name":"rational"}}],[11,"from_f32","","Creates a `Rational` from an `f32` if it is finite, losing no precision.",36,{"inputs":[{"name":"f32"}],"output":{"generics":["rational"],"name":"option"}}],[11,"from_f64","","Creates a `Rational` from an `f64` if it is finite, losing no precision.",36,{"inputs":[{"name":"f64"}],"output":{"generics":["rational"],"name":"option"}}],[11,"from_str_radix","","Parses a `Rational` number.",36,{"inputs":[{"name":"str"},{"name":"i32"}],"output":{"generics":["rational","parserationalerror"],"name":"result"}}],[11,"valid_str_radix","","Checks if a `Rational` number can be parsed.",36,{"inputs":[{"name":"str"},{"name":"i32"}],"output":{"generics":["validrational","parserationalerror"],"name":"result"}}],[11,"to_integer","","Converts to an `Integer`, rounding towards zero.",36,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"copy_to_integer","","Converts to an `Integer` inside `i`, rounding towards zero.",36,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"to_f32","","Converts to an `f32`, rounding towards zero.",36,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_f64","","Converts to an `f64`, rounding towards zero.",36,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"to_string_radix","","Returns a string representation for the specified `radix`.",36,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"string"}}],[11,"assign_f32","","Assigns from an `f32` if it is finite, losing no precision.",36,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"assign_f64","","Assigns from an `f64` if it is finite, losing no precision.",36,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"assign_str","","Parses a `Rational` number from a string.",36,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["parserationalerror"],"name":"result"}}],[11,"assign_str_radix","","Parses a `Rational` number from a string with the specified radix.",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i32"}],"output":{"generics":["parserationalerror"],"name":"result"}}],[11,"from_canonical","","Creates a new `Rational` from a numerator and denominator without canonicalizing aftwerwards.",36,{"inputs":[{"name":"num"},{"name":"den"}],"output":{"name":"rational"}}],[11,"assign_canonical","","Assigns to the numerator and denominator without canonicalizing aftwerwards.",36,{"inputs":[{"name":"self"},{"name":"num"},{"name":"den"}],"output":null}],[11,"from_raw","","Creates a `Rational` from an initialized GMP rational number.",36,{"inputs":[{"name":"mpq_t"}],"output":{"name":"rational"}}],[11,"into_raw","","Converts a `Rational` into a GMP rational number.",36,{"inputs":[{"name":"self"}],"output":{"name":"mpq_t"}}],[11,"as_raw","","Returns a pointer to the internal GMP rational number.",36,null],[11,"as_raw_mut","","Returns an unsafe mutable pointer to the internal GMP rational number.",36,null],[11,"numer","","Borrows the numerator as an `Integer`.",36,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"denom","","Borrows the denominator as an `Integer`.",36,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"as_numer_denom","","Borrows the numerator and denominator as `Integer` values.",36,null],[11,"as_mut_numer_denom","","Borrows the numerator and denominator mutably. The number is canonicalized when the borrow ends. The denominator must not be zero when the borrow ends.",36,{"inputs":[{"name":"self"}],"output":{"name":"mutnumerdenom"}}],[11,"as_mut_numer_denom_no_canonicalization","","Borrows the numerator and denominator mutably without canonicalizing aftwerwards.",36,null],[11,"into_numer_denom","","Converts into numerator and denominator integers.",36,null],[11,"as_neg","","Borrows a negated copy of the `Rational` number.",36,{"inputs":[{"name":"self"}],"output":{"name":"borrowrational"}}],[11,"as_abs","","Borrows an absolute copy of the `Rational` number.",36,{"inputs":[{"name":"self"}],"output":{"name":"borrowrational"}}],[11,"as_recip","","Borrows a reciprocal copy of the `Rational` number.",36,{"inputs":[{"name":"self"}],"output":{"name":"borrowrational"}}],[11,"cmp0","","Returns the same result as `self.cmp(&0)`, but is faster.",36,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"abs","","Computes the absolute value.",36,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"abs_mut","","Computes the absolute value.",36,{"inputs":[{"name":"self"}],"output":null}],[11,"abs_ref","","Computes the absolute value.",36,{"inputs":[{"name":"self"}],"output":{"name":"absref"}}],[11,"signum","","Computes the signum.",36,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"signum_mut","","Computes the signum.",36,{"inputs":[{"name":"self"}],"output":null}],[11,"signum_ref","","Computes the signum.",36,{"inputs":[{"name":"self"}],"output":{"name":"signumref"}}],[11,"clamp","","Clamps the value within the specified bounds.",36,{"inputs":[{"name":"self"},{"name":"min"},{"name":"max"}],"output":{"name":"rational"}}],[11,"clamp_mut","","Clamps the value within the specified bounds.",36,{"inputs":[{"name":"self"},{"name":"min"},{"name":"max"}],"output":null}],[11,"clamp_ref","","Clamps the value within the specified bounds.",36,{"inputs":[{"name":"self"},{"name":"min"},{"name":"max"}],"output":{"name":"clampref"}}],[11,"recip","","Computes the reciprocal.",36,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"recip_mut","","Computes the reciprocal.",36,{"inputs":[{"name":"self"}],"output":null}],[11,"recip_ref","","Computes the reciprocal.",36,{"inputs":[{"name":"self"}],"output":{"name":"recipref"}}],[11,"trunc","","Rounds the number towards zero and returns it as an `Integer`.",36,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"trunc_mut","","Rounds the number towards zero.",36,{"inputs":[{"name":"self"}],"output":null}],[11,"trunc_ref","","Rounds the number towards zero.",36,{"inputs":[{"name":"self"}],"output":{"name":"truncref"}}],[11,"fract","","Computes the fractional part of the number.",36,{"inputs":[{"name":"self"}],"output":{"name":"rational"}}],[11,"fract_mut","","Computes the fractional part of the number.",36,{"inputs":[{"name":"self"}],"output":null}],[11,"fract_ref","","Computes the fractional part of the number.",36,{"inputs":[{"name":"self"}],"output":{"name":"remtruncref"}}],[11,"rem_trunc","","Computes the fractional part of the number.",36,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"rem_trunc_mut","","Computes the fractional part of the number.",36,{"inputs":[{"name":"self"}],"output":null}],[11,"rem_trunc_ref","","Computes the fractional part of the number.",36,{"inputs":[{"name":"self"}],"output":{"name":"remtruncref"}}],[11,"fract_trunc","","Computes the fractional and truncated parts of the number.",36,null],[11,"fract_trunc_mut","","Computes the fractional and truncated parts of the number.",36,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"fract_trunc_ref","","Computes the fractional and truncated parts of the number.",36,{"inputs":[{"name":"self"}],"output":{"name":"fracttruncref"}}],[11,"ceil","","Rounds the number upwards (towards plus infinity) and returns it as an `Integer`.",36,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"ceil_mut","","Rounds the number upwards (towards plus infinity).",36,{"inputs":[{"name":"self"}],"output":null}],[11,"ceil_ref","","Rounds the number upwards (towards plus infinity).",36,{"inputs":[{"name":"self"}],"output":{"name":"ceilref"}}],[11,"rem_ceil","","Computes the non-positive remainder after rounding up.",36,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"rem_ceil_mut","","Computes the non-positive remainder after rounding up.",36,{"inputs":[{"name":"self"}],"output":null}],[11,"rem_ceil_ref","","Computes the non-positive remainder after rounding up.",36,{"inputs":[{"name":"self"}],"output":{"name":"remceilref"}}],[11,"fract_ceil","","Computes the fractional and ceil parts of the number.",36,null],[11,"fract_ceil_mut","","Computes the fractional and ceil parts of the number.",36,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"fract_ceil_ref","","Computes the fractional and ceil parts of the number.",36,{"inputs":[{"name":"self"}],"output":{"name":"fractceilref"}}],[11,"floor","","Rounds the number downwards (towards minus infinity) and returns it as an `Integer`.",36,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"floor_mut","","Rounds the number downwards (towards minus infinity).",36,{"inputs":[{"name":"self"}],"output":null}],[11,"floor_ref","","Rounds the number downwards (towards minus infinity).",36,{"inputs":[{"name":"self"}],"output":{"name":"floorref"}}],[11,"rem_floor","","Computes the non-negative remainder after rounding down.",36,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"rem_floor_mut","","Computes the non-negative remainder after rounding down.",36,{"inputs":[{"name":"self"}],"output":null}],[11,"rem_floor_ref","","Computes the non-negative remainder after rounding down.",36,{"inputs":[{"name":"self"}],"output":{"name":"remfloorref"}}],[11,"fract_floor","","Computes the fractional and floor parts of the number.",36,null],[11,"fract_floor_mut","","Computes the fractional and floor parts of the number.",36,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"fract_floor_ref","","Computes the fractional and floor parts of the number.",36,{"inputs":[{"name":"self"}],"output":{"name":"fractfloorref"}}],[11,"round","","Rounds the number to the nearest integer and returns it as an `Integer`.",36,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"round_mut","","Rounds the number to the nearest integer.",36,{"inputs":[{"name":"self"}],"output":null}],[11,"round_ref","","Rounds the number to the nearest integer.",36,{"inputs":[{"name":"self"}],"output":{"name":"roundref"}}],[11,"rem_round","","Computes the remainder after rounding to the nearest integer.",36,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"rem_round_mut","","Computes the remainder after rounding to the nearest integer.",36,{"inputs":[{"name":"self"}],"output":null}],[11,"rem_round_ref","","Computes the remainder after rounding to the nearest integer.",36,{"inputs":[{"name":"self"}],"output":{"name":"remroundref"}}],[11,"fract_round","","Computes the fractional and rounded parts of the number.",36,null],[11,"fract_round_mut","","Computes the fractional and round parts of the number.",36,{"inputs":[{"name":"self"},{"name":"integer"}],"output":null}],[11,"fract_round_ref","","Computes the fractional and round parts of the number.",36,{"inputs":[{"name":"self"}],"output":{"name":"fractroundref"}}],[11,"assign","","",36,{"inputs":[{"name":"self"},{"name":"validrational"}],"output":null}],[11,"from","","",36,{"inputs":[{"name":"validrational"}],"output":{"name":"self"}}],[0,"rational","","Arbitrary-precision rational numbers.",null,null],[3,"MutNumerDenom","rug::rational","Used to borrow the numerator and denominator of a `Rational` number mutably.",null,null],[3,"ParseRationalError","","An error which can be returned when parsing a `Rational` number.",null,null],[3,"ValidRational","","A validated string that can always be converted to a `Rational`.",null,null],[3,"SmallRational","","A small rational number that does not require any memory allocation.",null,null],[11,"neg","rug","",36,{"inputs":[{"name":"self"}],"output":{"name":"rational"}}],[11,"neg_assign","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"add","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":{"name":"rational"}}],[11,"add","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":{"name":"rational"}}],[11,"add_assign","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"add_assign","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"add_from","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"add_from","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"sub","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":{"name":"rational"}}],[11,"sub","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":{"name":"rational"}}],[11,"sub_assign","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"sub_assign","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"sub_from","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"sub_from","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"mul","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":{"name":"rational"}}],[11,"mul","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":{"name":"rational"}}],[11,"mul_assign","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"mul_assign","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"mul_from","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"mul_from","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"div","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":{"name":"rational"}}],[11,"div","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":{"name":"rational"}}],[11,"div_assign","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"div_assign","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"div_from","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"div_from","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"shl","","",36,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"rational"}}],[11,"shl","","",36,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"rational"}}],[11,"shl_assign","","",36,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"shl_assign","","",36,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"shr","","",36,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"rational"}}],[11,"shr","","",36,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"rational"}}],[11,"shr_assign","","",36,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"shr_assign","","",36,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"pow","","",36,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"rational"}}],[11,"pow","","",36,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"rational"}}],[11,"pow_assign","","",36,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"pow_assign","","",36,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"shl","","",36,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"rational"}}],[11,"shl","","",36,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"rational"}}],[11,"shl_assign","","",36,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"shl_assign","","",36,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"shr","","",36,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"rational"}}],[11,"shr","","",36,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"rational"}}],[11,"shr_assign","","",36,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"shr_assign","","",36,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"pow","","",36,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"rational"}}],[11,"pow","","",36,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"rational"}}],[11,"pow_assign","","",36,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"pow_assign","","",36,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"sum","","",36,{"inputs":[{"name":"i"}],"output":{"name":"rational"}}],[11,"sum","","",36,{"inputs":[{"name":"i"}],"output":{"name":"rational"}}],[11,"product","","",36,{"inputs":[{"name":"i"}],"output":{"name":"rational"}}],[11,"product","","",36,{"inputs":[{"name":"i"}],"output":{"name":"rational"}}],[11,"cmp","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":{"name":"ordering"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"name":"bool"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"rational"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"integer"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"self"},{"name":"rational"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"eq","","",36,null],[11,"partial_cmp","","",36,null],[11,"clone","rug::rational","",37,{"inputs":[{"name":"self"}],"output":{"name":"smallrational"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"smallrational"}}],[11,"new","","Creates a `SmallRational` with value 0.",37,{"inputs":[],"output":{"name":"smallrational"}}],[11,"as_nonreallocating_rational","","Returns a mutable reference to a `Rational` number for simple operations that do not need to allocate more space for the numerator or denominator.",37,{"inputs":[{"name":"self"}],"output":{"name":"rational"}}],[11,"from_canonical","","Creates a `SmallRational` from a numerator and denominator, assuming they are in canonical form.",37,{"inputs":[{"name":"num"},{"name":"den"}],"output":{"name":"smallrational"}}],[11,"from_canonicalized_32","","Creates a `SmallRational` from a 32-bit numerator and denominator, assuming they are in canonical form.",37,{"inputs":[{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":{"name":"smallrational"}}],[11,"from_canonicalized_64","","Creates a `SmallRational` from a 64-bit numerator and denominator, assuming they are in canonical form.",37,{"inputs":[{"name":"bool"},{"name":"u64"},{"name":"u64"}],"output":{"name":"smallrational"}}],[11,"assign_canonicalized_32","","Sets a `SmallRational` to a 32-bit numerator and denominator, assuming they are in canonical form.",37,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"assign_canonicalized_64","","Sets a `SmallRational` to a 64-bit numerator and denominator, assuming they are in canonical form.",37,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"deref","","",37,{"inputs":[{"name":"self"}],"output":{"name":"rational"}}],[11,"assign","","",37,{"inputs":[{"name":"self"},{"name":"num"}],"output":null}],[11,"from","","",37,{"inputs":[{"name":"num"}],"output":{"name":"self"}}],[11,"assign","","",37,null],[11,"from","","",37,null],[11,"assign","","",37,{"inputs":[{"name":"self"},{"name":"smallrational"}],"output":null}],[11,"assign","","",37,{"inputs":[{"name":"self"},{"name":"smallrational"}],"output":null}],[11,"default","rug","",36,{"inputs":[],"output":{"name":"rational"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"rational"}}],[11,"clone_from","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"drop","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"hash","","",36,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"from_str","","",36,{"inputs":[{"name":"str"}],"output":{"generics":["rational","parserationalerror"],"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"assign","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"assign","","",36,{"inputs":[{"name":"self"},{"name":"rational"}],"output":null}],[11,"from","","",36,{"inputs":[{"name":"rational"}],"output":{"name":"self"}}],[11,"assign","","",36,{"inputs":[{"name":"self"},{"name":"num"}],"output":null}],[11,"from","","",36,{"inputs":[{"name":"num"}],"output":{"name":"self"}}],[11,"assign","","",36,null],[11,"from","","",36,null],[11,"assign","","",36,null],[11,"from","","",36,null],[11,"fmt","rug::rational","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Assign","rug","Assigns to a number from another value.",null,null],[10,"assign","","Peforms the assignement.",39,{"inputs":[{"name":"self"},{"name":"src"}],"output":null}],[11,"clone","rug::integer","",40,{"inputs":[{"name":"self"}],"output":{"name":"validinteger"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"parseintegererror"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",35,null],[11,"cmp","","",35,{"inputs":[{"name":"self"},{"name":"parseintegererror"}],"output":{"name":"ordering"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"parseintegererror"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"parseintegererror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",35,{"inputs":[{"name":"self"},{"name":"parseintegererror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",35,{"inputs":[{"name":"self"},{"name":"parseintegererror"}],"output":{"name":"bool"}}],[11,"le","","",35,{"inputs":[{"name":"self"},{"name":"parseintegererror"}],"output":{"name":"bool"}}],[11,"gt","","",35,{"inputs":[{"name":"self"},{"name":"parseintegererror"}],"output":{"name":"bool"}}],[11,"ge","","",35,{"inputs":[{"name":"self"},{"name":"parseintegererror"}],"output":{"name":"bool"}}],[11,"description","","",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"isprime"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",33,null],[11,"cmp","","",33,{"inputs":[{"name":"self"},{"name":"isprime"}],"output":{"name":"ordering"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"isprime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",33,{"inputs":[{"name":"self"},{"name":"isprime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","rug::rational","",41,{"inputs":[{"name":"self"}],"output":{"name":"validrational"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"parserationalerror"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",38,null],[11,"cmp","","",38,{"inputs":[{"name":"self"},{"name":"parserationalerror"}],"output":{"name":"ordering"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"parserationalerror"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"parserationalerror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",38,{"inputs":[{"name":"self"},{"name":"parserationalerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",38,{"inputs":[{"name":"self"},{"name":"parserationalerror"}],"output":{"name":"bool"}}],[11,"le","","",38,{"inputs":[{"name":"self"},{"name":"parserationalerror"}],"output":{"name":"bool"}}],[11,"gt","","",38,{"inputs":[{"name":"self"},{"name":"parserationalerror"}],"output":{"name":"bool"}}],[11,"ge","","",38,{"inputs":[{"name":"self"},{"name":"parserationalerror"}],"output":{"name":"bool"}}],[11,"description","","",38,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"num","","Gets the mutable numerator.",42,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"den","","Gets the mutable denominator.",42,{"inputs":[{"name":"self"}],"output":{"name":"integer"}}],[11,"num_den","","Gets the mutable numerator and denominator.",42,null],[11,"drop","","",42,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[8,"NegAssign"],[8,"NotAssign"],[8,"AddFrom"],[8,"SubFrom"],[8,"MulFrom"],[8,"DivFrom"],[8,"RemFrom"],[8,"BitAndFrom"],[8,"BitOrFrom"],[8,"BitXorFrom"],[8,"ShlFrom"],[8,"ShrFrom"],[8,"Pow"],[8,"PowAssign"],[8,"PowFrom"],[8,"AssignRound"],[8,"AddAssignRound"],[8,"AddFromRound"],[8,"SubAssignRound"],[8,"SubFromRound"],[8,"MulAssignRound"],[8,"MulFromRound"],[8,"DivAssignRound"],[8,"DivFromRound"],[8,"PowAssignRound"],[8,"PowFromRound"],[8,"DivRounding"],[8,"DivRoundingAssign"],[8,"DivRoundingFrom"],[8,"RemRounding"],[8,"RemRoundingAssign"],[8,"RemRoundingFrom"],[3,"Integer"],[4,"IsPrime"],[3,"SmallInteger"],[3,"ParseIntegerError"],[3,"Rational"],[3,"SmallRational"],[3,"ParseRationalError"],[8,"Assign"],[3,"ValidInteger"],[3,"ValidRational"],[3,"MutNumerDenom"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"generics":["vec","frombase64error"],"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"generics":["vec","fromhexerror"],"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"generics":["buildererror"],"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"generics":["buildererror"],"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["json"],"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["object"],"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"generics":["stackelement"],"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["jsonevent"],"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["json","buildererror"],"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"generics":["json","parsererror"],"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["vec"],"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",3,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",4,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",4,null],[10,"serialize_element","","Serialize a sequence element.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a sequence.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",5,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",5,null],[10,"serialize_element","","Serialize a tuple element.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",6,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",6,null],[10,"serialize_field","","Serialize a tuple struct field.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple struct.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",7,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",7,null],[10,"serialize_field","","Serialize a tuple variant field.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple variant.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",8,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",8,null],[10,"serialize_key","","Serialize a map key.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_value","","Serialize a map value.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",8,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a map.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",9,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",9,null],[10,"serialize_field","","Serialize a struct field.",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct field has been skipped.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",10,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",10,null],[10,"serialize_field","","Serialize a struct variant field.",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct variant field has been skipped.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct variant.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",11,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",11,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",11,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",11,null],[13,"Char","","The input contained a `char` that was not expected.",11,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",11,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",11,null],[13,"Unit","","The input contained a unit `()` that was not expected.",11,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",11,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",11,null],[13,"Seq","","The input contained a sequence that was not expected.",11,null],[13,"Map","","The input contained a map that was not expected.",11,null],[13,"Enum","","The input contained an enum that was not expected.",11,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",11,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",11,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",11,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",11,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",11,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"unitdeserializer"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_identifier","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"booldeserializer"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_identifier","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"i8deserializer"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_identifier","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"i16deserializer"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_identifier","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"i32deserializer"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_identifier","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"i64deserializer"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_enum","","",18,null],[11,"deserialize_identifier","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isizedeserializer"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_identifier","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u8deserializer"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_enum","","",20,null],[11,"deserialize_identifier","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u16deserializer"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_enum","","",21,null],[11,"deserialize_identifier","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u64deserializer"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_enum","","",22,null],[11,"deserialize_identifier","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usizedeserializer"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_enum","","",23,null],[11,"deserialize_identifier","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"f32deserializer"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_identifier","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"f64deserializer"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_identifier","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"chardeserializer"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_identifier","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32deserializer"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_identifier","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",27,null],[11,"variant_seed","","",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"strdeserializer"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",28,null],[11,"deserialize_bool","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",28,null],[11,"deserialize_identifier","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given string.",29,{"inputs":[{"name":"str"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",29,null],[11,"deserialize_bool","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",29,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",29,null],[11,"deserialize_identifier","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"stringdeserializer"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",30,null],[11,"deserialize_bool","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",30,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",30,null],[11,"deserialize_identifier","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"cowstrdeserializer"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",31,null],[11,"deserialize_bool","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",31,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",31,null],[11,"deserialize_identifier","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",31,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"borrowedbytesdeserializer"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given byte slice.",32,null],[11,"deserialize_any","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",32,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",32,null],[11,"deserialize_identifier","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"seqdeserializer"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",33,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",33,null],[11,"deserialize_enum","","",33,null],[11,"deserialize_identifier","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"seqaccessdeserializer"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",34,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",34,null],[11,"deserialize_enum","","",34,null],[11,"deserialize_identifier","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",35,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",35,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",35,null],[11,"deserialize_enum","","",35,null],[11,"deserialize_identifier","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_key_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_entry_seed","","",35,{"inputs":[{"name":"self"},{"name":"tk"},{"name":"tv"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_element_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"mapaccessdeserializer"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",36,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",36,null],[11,"deserialize_enum","","",36,null],[11,"deserialize_identifier","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","serde::de","",37,{"inputs":[{"name":"self"}],"output":{"name":"ignoredany"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"ignoredany"}}],[11,"expecting","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",37,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i64","","",37,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u64","","",37,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f64","","",37,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_str","","",37,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","",37,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",37,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",37,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","",37,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_bytes","","",37,null],[11,"deserialize","","",37,{"inputs":[{"name":"d"}],"output":{"generics":["ignoredany"],"name":"result"}}],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",38,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",38,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",38,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",38,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",38,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",38,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",38,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",38,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",41,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",41,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",42,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",42,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",42,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",43,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","The input contains a boolean.",43,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","The input contains an `i8`.",43,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","The input contains an `i16`.",43,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","The input contains an `i32`.",43,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","The input contains an `i64`.",43,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","The input contains a `u8`.",43,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","The input contains a `u16`.",43,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","The input contains a `u32`.",43,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","The input contains a `u64`.",43,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","The input contains an `f32`.",43,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","The input contains an `f64`.",43,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","The input contains a `char`.",43,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",43,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",43,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",43,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",43,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","The input contains an optional that is present.",43,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",43,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","The input contains a key-value map.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_enum","","The input contains an enum.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",44,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",44,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",44,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",45,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",45,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"generics":["option"],"name":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",45,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",45,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",45,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",45,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",46,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",46,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",47,null],[10,"unit_variant","","Called when deserializing a variant with no values.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",47,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",47,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",48,null],[10,"into_deserializer","","Convert this value into a deserializer.",48,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Serialize","serde","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",3,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",42,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",42,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",42,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null]],"paths":[[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["serde_derive_internals"] = {"doc":"","items":[[3,"Ctxt","serde_derive_internals","",null,null],[0,"ast","","",null,null],[3,"Container","serde_derive_internals::ast","",null,null],[12,"ident","","",0,null],[12,"attrs","","",0,null],[12,"body","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[4,"Body","","",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"Style","","",null,null],[13,"Struct","","",4,null],[13,"Tuple","","",4,null],[13,"Newtype","","",4,null],[13,"Unit","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"from_ast","","",0,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"container"}}],[11,"all_fields","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"has_getter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"attr","serde_derive_internals","",null,null],[3,"Name","serde_derive_internals::attr","",null,null],[3,"Container","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"RenameRule","","",null,null],[13,"None","","Don't apply a default rename rule.",5,null],[13,"LowerCase","","Rename direct children to \"lowercase\" style.",5,null],[13,"PascalCase","","Rename direct children to \"PascalCase\" style, as typically used for enum variants.",5,null],[13,"CamelCase","","Rename direct children to \"camelCase\" style.",5,null],[13,"SnakeCase","","Rename direct children to \"snake_case\" style, as commonly used for fields.",5,null],[13,"ScreamingSnakeCase","","Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as commonly used for constants.",5,null],[13,"KebabCase","","Rename direct children to \"kebab-case\" style.",5,null],[13,"ScreamingKebabCase","","Rename direct children to \"SCREAMING-KEBAB-CASE\" style.",5,null],[4,"EnumTag","","Styles of representing an enum.",null,null],[13,"External","","The default.",6,null],[13,"Internal","","`#[serde(tag = \"type\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[13,"Adjacent","serde_derive_internals::attr","`#[serde(tag = \"t\", content = \"c\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[12,"content","","",6,null],[13,"None","serde_derive_internals::attr","`#[serde(untagged)]`",6,null],[4,"Identifier","","Whether this enum represents the fields of a struct or the variants of an enum.",null,null],[13,"No","","It does not.",7,null],[13,"Field","","This enum represents the fields of a struct. All of the variants must be unit variants, except possibly one which is annotated with `#[serde(other)]` and is a newtype variant.",7,null],[13,"Variant","","This enum represents the variants of an enum. All of the variants must be unit variants.",7,null],[4,"Default","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",8,null],[13,"Default","","The default is given by `std::default::Default::default()`.",8,null],[13,"Path","","The default is given by this function.",8,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"generics":["vec"],"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize_name","","Return the container name for the container when serializing.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deserialize_name","","Return the container name for the container when deserializing.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_some","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",10,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_all","","",10,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"deny_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"ser_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tag","","",10,{"inputs":[{"name":"self"}],"output":{"name":"enumtag"}}],[11,"from_type","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["ty"],"name":"option"}}],[11,"into_type","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["ty"],"name":"option"}}],[11,"remote","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"identifier","","",10,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","",11,{"inputs":[{"name":"ctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",11,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"rename_all","","",11,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"skip_deserializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"other","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"deserialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",12,{"inputs":[{"name":"ctxt"},{"name":"usize"},{"name":"field"},{"generics":["variant"],"name":"option"},{"name":"default"}],"output":{"name":"self"}}],[11,"name","","",12,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",12,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"skip_serializing","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_deserializing","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing_if","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"default","","",12,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"serialize_with","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"deserialize_with","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"ser_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrowed_lifetimes","","",12,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"getter","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"default","serde_derive_internals","",13,{"inputs":[],"output":{"name":"ctxt"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"error","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"check","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","serde_derive_internals::attr","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":{"name":"bool"}}],[11,"apply_to_variant","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"apply_to_field","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Container"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[4,"RenameRule"],[4,"EnumTag"],[4,"Identifier"],[4,"Default"],[3,"Name"],[3,"Container"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["serde_yaml"] = {"doc":"This crate is a Rust library for using the [Serde] serialization framework with data in [YAML] file format.","items":[[3,"Number","serde_yaml","Represents a YAML number, whether integer or floating point.",null,null],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing YAML data.",null,null],[3,"Location","","This type represents the location that an error occured.",null,null],[3,"Mapping","","A YAML mapping in which the keys and values are both `serde_yaml::Value`.",null,null],[4,"Value","","Represents any valid YAML value.",null,null],[13,"Null","","Represents a YAML null value.",0,null],[13,"Bool","","Represents a YAML boolean.",0,null],[13,"Number","","Represents a YAML numerical value, whether integer or floating point.",0,null],[13,"String","","Represents a YAML string.",0,null],[13,"Sequence","","Represents a YAML sequence in which the elements are `serde_yaml::Value`.",0,null],[13,"Mapping","","Represents a YAML mapping in which the keys and values are both `serde_yaml::Value`.",0,null],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of YAML.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of YAML text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of YAML text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of YAML.",null,{"inputs":[{"name":"t"}],"output":{"generics":["string"],"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a YAML byte vector.",null,{"inputs":[{"name":"t"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_writer","","Serialize the given data structure as YAML into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_yaml::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"generics":["error"],"name":"result"}}],[5,"to_value","","Convert a `T` into `serde_yaml::Value` which is an enum that can represent any valid YAML data.",null,{"inputs":[{"name":"t"}],"output":{"generics":["value","error"],"name":"result"}}],[11,"index","","Index into a `serde_yaml::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"index_mut","","Write into a `serde_yaml::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","Compare `str` with YAML value",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","Compare `&str` with YAML value",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","Compare YAML value with String",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from","","Convert boolean to `Value`",0,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","Convert `String` to `Value`",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","Convert string slice to `Value`",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","Convert copy-on-write string to `Value`",0,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","Convert map (with string keys) to `Value`",0,{"inputs":[{"name":"mapping"}],"output":{"name":"self"}}],[11,"from","","Convert a `Vec` to `Value`",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","Convert a slice to `Value`",0,null],[11,"from_iter","","Convert an iteratable type to a YAML sequence",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_identifier","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Index into a YAML sequence or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an sequence.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["value"],"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_bool","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"is_u64","","Returns true if the `Value` is an integer between `u64::MIN` and `u64::MAX`.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_u64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"is_sequence","","Returns true if the `Value` is a sequence. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_sequence","","If the `Value` is a sequence, return a reference to it if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["sequence"],"name":"option"}}],[11,"as_sequence_mut","","If the `Value` is a sequence, return a mutable reference to it if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["sequence"],"name":"option"}}],[11,"is_mapping","","Returns true if the `Value` is a mapping. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_mapping","","If the `Value` is a mapping, return a reference to it if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["mapping"],"name":"option"}}],[11,"as_mapping_mut","","If the `Value` is a mapping, return a reference to it if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"generics":["mapping"],"name":"option"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","The byte index of the error",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"line","","The line of the error",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"column","","The column of the error",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"location","","Returns the Location from the error if one exists.",2,{"inputs":[{"name":"self"}],"output":{"generics":["location"],"name":"option"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"mapping"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"mapping"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"mapping"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"mapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"mapping"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"mapping"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"mapping"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"mapping"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"mapping"}],"output":{"name":"bool"}}],[11,"new","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"reserve","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"insert","","",3,{"inputs":[{"name":"self"},{"name":"value"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"contains_key","","",3,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"get","","",3,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"get_mut","","",3,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"remove","","",3,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"generics":["value"],"name":"option"}}],[11,"capacity","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"extend","","",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",3,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","",3,null],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",4,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",4,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"is_nan","","Returns true if this value is NaN and false otherwise.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Returns true if this value is positive infinity or negative infinity and false otherwise.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Returns true if this number is neither infinite nor NaN.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"generics":["number"],"name":"result"}}],[11,"deserialize_any","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["error"],"name":"result"}}],[11,"deserialize_bool","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",4,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",4,null],[11,"deserialize_enum","","",4,null],[11,"deserialize_identifier","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",4,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[6,"Sequence","","A YAML sequence in which the elements are `serde_yaml::Value`.",null,null],[6,"Result","","Alias for a `Result` with the error type `serde_yaml::Error`.",null,null]],"paths":[[4,"Value"],[3,"Location"],[3,"Error"],[3,"Mapping"],[3,"Number"]]};
searchIndex["siphasher"] = {"doc":"","items":[[0,"sip","siphasher","An implementation of SipHash.",null,null],[3,"SipHasher13","siphasher::sip","An implementation of SipHash 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",2,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",2,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",2,null],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",0,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",0,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",0,null],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",1,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",1,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",1,null],[11,"write","","",2,null],[11,"finish","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",1,null],[11,"finish","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[0,"sip128","siphasher","An implementation of SipHash with a 128-bit output.",null,null],[3,"Hash128","siphasher::sip128","A 128-bit (2x64) hash output",null,null],[12,"h1","","",3,null],[12,"h2","","",3,null],[3,"SipHasher13","","An implementation of SipHash128 1-3.",null,null],[3,"SipHasher24","","An implementation of SipHash128 2-4.",null,null],[3,"SipHasher","","An implementation of SipHash128 2-4.",null,null],[8,"Hasher128","","",null,null],[10,"finish128","","Return a 128-bit hash",4,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"hash128"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"siphasher13"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"siphasher24"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"siphasher"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",7,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",7,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"keys","","Get the keys used by this hasher",7,null],[11,"finish128","","Return a 128-bit hash",7,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher13` with the two initial keys set to 0.",5,{"inputs":[],"output":{"name":"siphasher13"}}],[11,"new_with_keys","","Creates a `SipHasher13` that is keyed off the provided keys.",5,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher13"}}],[11,"keys","","Get the keys used by this hasher",5,null],[11,"finish128","","Return a 128-bit hash",5,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"new","","Creates a new `SipHasher24` with the two initial keys set to 0.",6,{"inputs":[],"output":{"name":"siphasher24"}}],[11,"new_with_keys","","Creates a `SipHasher24` that is keyed off the provided keys.",6,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher24"}}],[11,"keys","","Get the keys used by this hasher",6,null],[11,"finish128","","Return a 128-bit hash",6,{"inputs":[{"name":"self"}],"output":{"name":"hash128"}}],[11,"write","","",7,null],[11,"finish","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",5,null],[11,"finish","","",5,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",6,null],[11,"finish","","",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"as_bytes","","Convert into a 16-bytes vector",3,null]],"paths":[[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"],[3,"Hash128"],[8,"Hasher128"],[3,"SipHasher13"],[3,"SipHasher24"],[3,"SipHasher"]]};
searchIndex["stable_deref_trait"] = {"doc":"This module defines an unsafe marker trait, StableDeref, for container types that deref to a fixed address which is valid even when the containing type is moved. For example, Box, Vec, Rc, Arc and String implement this trait. Additionally, it defines CloneStableDeref for types like Rc where clones deref to the same address.","items":[[8,"StableDeref","stable_deref_trait","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",null,null],[8,"CloneStableDeref","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",null,null]],"paths":[]};
searchIndex["strsim"] = {"doc":"This library implements string similarity metrics.","items":[[4,"StrSimError","strsim","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters differ. Returns an error if the strings have different lengths.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value is between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_against_vec","","Calculates the Jaro distance between a string and each string in a vector. Returns a vector of corresponding values between 0.0 and 1.0 (higher value means more similar).",null,null],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_winkler_against_vec","","Calculates the Jaro-Winkler distances between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions required to change one string into the other.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"levenshtein_against_vec","","Calculates the Levenshtein distance between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[5,"osa_distance","","Like Levenshtein but allows for adjacent transpositions. Each substring can only be edited once.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"osa_distance_against_vec","","Calculates the optimal string alignment distance between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[5,"damerau_levenshtein","","Like optimal string alignment, but substrings can be edited an unlimited number of times, and the triangle inequality holds.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"damerau_levenshtein_against_vec","","Calculates the Damerau-Levenshtein distance between a string and each string in a vector. Returns a vector of corresponding values.",null,null],[6,"HammingResult","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"strsimerror"}],"output":{"name":"bool"}}]],"paths":[[4,"StrSimError"]]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"ident","","Name of the field, if any.",1,null],[12,"vis","","Visibility of the field.",1,null],[12,"attrs","","Attributes tagged on the field.",1,null],[12,"ty","","Type of the field.",1,null],[3,"Variant","","An enum variant.",null,null],[12,"ident","","Name of the variant.",2,null],[12,"attrs","","Attributes tagged on the variant.",2,null],[12,"data","","Type of variant.",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",3,null],[12,"ty_params","","",3,null],[12,"where_clause","","",3,null],[3,"Lifetime","","",null,null],[12,"ident","","",4,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",5,null],[12,"lifetime","","",5,null],[12,"bounds","","",5,null],[3,"TyParam","","A generic type parameter, e.g. `T: Into<String>`.",null,null],[12,"attrs","","",6,null],[12,"ident","","",6,null],[12,"bounds","","",6,null],[12,"default","","",6,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,null],[12,"bounded_ty","","The type being bounded",7,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",7,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",8,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",9,null],[12,"rhs_ty","","",9,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",10,null],[12,"bounds","","",10,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"ByteStrLit","","",null,null],[12,"value","","",11,null],[12,"style","","",11,null],[3,"FloatLit","","",null,null],[12,"value","","",12,null],[12,"suffix","","",12,null],[3,"IntLit","","",null,null],[12,"value","","",13,null],[12,"suffix","","",13,null],[3,"StrLit","","",null,null],[12,"value","","",14,null],[12,"style","","",14,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",15,null],[12,"tts","","The delimited sequence of token trees",15,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",16,null],[12,"tts","","",16,null],[3,"DeriveInput","","Struct or enum sent to a `proc_macro_derive` macro.",null,null],[12,"ident","","Name of the struct or enum.",17,null],[12,"vis","","Visibility of the struct or enum.",17,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",17,null],[12,"generics","","Generics required to complete the definition.",17,null],[12,"body","","Data within the struct or enum.",17,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",18,null],[12,"types","","The type parameters for this path segment, if present.",18,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",18,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",19,null],[12,"ty","","",19,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",20,null],[12,"abi","","",20,null],[12,"lifetimes","","",20,null],[12,"inputs","","",20,null],[12,"output","","",20,null],[12,"variadic","","",20,null],[3,"MutTy","","",null,null],[12,"ty","","",21,null],[12,"mutability","","",21,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",22,null],[12,"output","","`C`",22,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",23,null],[12,"segments","","The segments in the path: the things separated by `::`.",23,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",24,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",24,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",25,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",25,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",26,null],[12,"position","","",26,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",27,null],[12,"ty","","",27,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","Attribute of the form `#![...]`.",28,null],[13,"Inner","","Attribute of the form `#[...]`.",28,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",29,null],[13,"List","","List meta item.",29,null],[13,"NameValue","","Name-value meta item.",29,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full `MetaItem`.",30,null],[13,"Literal","","A Rust literal.",30,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",31,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",31,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",31,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",31,null],[13,"Cast","","A cast (`foo as f64`)",31,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",31,null],[13,"Index","","An indexing operation (`foo[2]`)",31,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",31,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",31,null],[4,"VariantData","","Data stored within an enum variant or struct.",null,null],[13,"Struct","","Struct variant, e.g. `Point { x: f64, y: f64 }`.",32,null],[13,"Tuple","","Tuple variant, e.g. `Some(T)`.",32,null],[13,"Unit","","Unit variant, e.g. `None`.",32,null],[4,"Visibility","","Visibility level of an item.",null,null],[13,"Public","","Public, i.e. `pub`.",33,null],[13,"Crate","","Crate-visible, i.e. `pub(crate)`.",33,null],[13,"Restricted","","Restricted, e.g. `pub(some::module)`.",33,null],[13,"Inherited","","Inherited, i.e. private.",33,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",34,null],[13,"Maybe","","",34,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",35,null],[13,"Region","","",35,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",36,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",36,null],[13,"EqPredicate","","An equality predicate (unsupported)",36,null],[4,"FloatTy","","",null,null],[13,"F32","","",37,null],[13,"F64","","",37,null],[13,"Unsuffixed","","",37,null],[4,"IntTy","","",null,null],[13,"Isize","","",38,null],[13,"I8","","",38,null],[13,"I16","","",38,null],[13,"I32","","",38,null],[13,"I64","","",38,null],[13,"Usize","","",38,null],[13,"U8","","",38,null],[13,"U16","","",38,null],[13,"U32","","",38,null],[13,"U64","","",38,null],[13,"Unsuffixed","","",38,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",39,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",39,null],[13,"Byte","","A byte char (`b'f'`)",39,null],[13,"Char","","A character literal (`'a'`)",39,null],[13,"Int","","An integer literal (`1`)",39,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",39,null],[13,"Bool","","A boolean literal",39,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",40,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",40,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",41,null],[13,"Minus","","",41,null],[13,"Star","","",41,null],[13,"Slash","","",41,null],[13,"Percent","","",41,null],[13,"Caret","","",41,null],[13,"And","","",41,null],[13,"Or","","",41,null],[13,"Shl","","",41,null],[13,"Shr","","",41,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",42,null],[13,"Bracket","","A square bracket: `[` or `]`",42,null],[13,"Brace","","A curly brace: `{` or `}`",42,null],[4,"Token","","",null,null],[13,"Eq","","",43,null],[13,"Lt","","",43,null],[13,"Le","","",43,null],[13,"EqEq","","",43,null],[13,"Ne","","",43,null],[13,"Ge","","",43,null],[13,"Gt","","",43,null],[13,"AndAnd","","",43,null],[13,"OrOr","","",43,null],[13,"Not","","",43,null],[13,"Tilde","","",43,null],[13,"BinOp","","",43,null],[13,"BinOpEq","","",43,null],[13,"At","","",43,null],[13,"Dot","","",43,null],[13,"DotDot","","",43,null],[13,"DotDotDot","","",43,null],[13,"Comma","","",43,null],[13,"Semi","","",43,null],[13,"Colon","","",43,null],[13,"ModSep","","",43,null],[13,"RArrow","","",43,null],[13,"LArrow","","",43,null],[13,"FatArrow","","",43,null],[13,"Pound","","",43,null],[13,"Dollar","","",43,null],[13,"Question","","",43,null],[13,"Literal","","",43,null],[13,"Ident","","",43,null],[13,"Underscore","","",43,null],[13,"Lifetime","","",43,null],[13,"DocComment","","",43,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",44,null],[13,"Delimited","","A delimited sequence of token trees",44,null],[4,"Body","","Body of a derived struct or enum.",null,null],[13,"Enum","","It's an enum.",45,null],[13,"Struct","","It's a struct.",45,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",46,null],[13,"Sub","","The `-` operator (subtraction)",46,null],[13,"Mul","","The `*` operator (multiplication)",46,null],[13,"Div","","The `/` operator (division)",46,null],[13,"Rem","","The `%` operator (modulus)",46,null],[13,"And","","The `&&` operator (logical and)",46,null],[13,"Or","","The `||` operator (logical or)",46,null],[13,"BitXor","","The `^` operator (bitwise xor)",46,null],[13,"BitAnd","","The `&` operator (bitwise and)",46,null],[13,"BitOr","","The `|` operator (bitwise or)",46,null],[13,"Shl","","The `<<` operator (shift left)",46,null],[13,"Shr","","The `>>` operator (shift right)",46,null],[13,"Eq","","The `==` operator (equality)",46,null],[13,"Lt","","The `<` operator (less than)",46,null],[13,"Le","","The `<=` operator (less than or equal to)",46,null],[13,"Ne","","The `!=` operator (not equal to)",46,null],[13,"Ge","","The `>=` operator (greater than or equal to)",46,null],[13,"Gt","","The `>` operator (greater than)",46,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",47,null],[13,"Not","","The `!` operator for logical inversion",47,null],[13,"Neg","","The `-` operator for negation",47,null],[4,"Abi","","",null,null],[13,"Named","","",48,null],[13,"Rust","","",48,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",49,null],[13,"Ty","","Everything else",49,null],[4,"Mutability","","",null,null],[13,"Mutable","","",50,null],[13,"Immutable","","",50,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",51,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",51,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",52,null],[13,"Array","","A fixed length array (`[T; n]`)",52,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",52,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",52,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",52,null],[13,"Never","","The never type (`!`)",52,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",52,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",52,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",52,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",52,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",52,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",52,null],[13,"Mac","","A macro in the type position.",52,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",53,null],[13,"Normal","","",53,null],[5,"parse_derive_input","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["deriveinput","string"],"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["ty","string"],"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["path","string"],"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["whereclause","string"],"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec","string"],"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["ident","string"],"name":"result"}}],[5,"parse_ty_param_bound","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["typarambound","string"],"name":"result"}}],[5,"parse_outer_attr","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["attribute","string"],"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"name","","Name of the item.",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fields","","Slice containing the fields stored in the variant.",32,null],[11,"fields_mut","","Mutable slice containing the fields stored in the variant.",32,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",3,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",3,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",55,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"from","","",6,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",8,null],[11,"none","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",57,null],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"new","","",57,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"from","","",39,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",39,null],[11,"from","","",39,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"from","","",39,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"strlit"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bytestrlit"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"intlit"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"floatlit"}}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"mac"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"op","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",47,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"from","","",23,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"from","","",24,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"none","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",18,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",58,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_derive_input","","",58,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_ty","","",58,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",58,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty_param_bound","","",58,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",58,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",58,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"}],"output":null}],[11,"visit_field","","",58,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_variant","","",58,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"visit_lifetime","","",58,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",58,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",58,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_segment","","",58,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",58,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",58,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",58,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_fn_ret_ty","","",58,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"visit_const_expr","","",58,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":null}],[11,"visit_lit","","",58,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_mac","","",58,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[0,"parse","syn","This module contains a set of exported nom parsers which can be used to parse custom grammars when used alongside the `synom` crate.",null,null],[4,"IResult","syn::parse","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",59,null],[13,"Error","","Parsing failed.",59,null],[5,"lit","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","lit"],"name":"iresult"}}],[5,"string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","strlit"],"name":"iresult"}}],[5,"byte_string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","bytestrlit"],"name":"iresult"}}],[5,"byte","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","u8"],"name":"iresult"}}],[5,"character","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","char"],"name":"iresult"}}],[5,"float","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","floatlit"],"name":"iresult"}}],[5,"int","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","intlit"],"name":"iresult"}}],[5,"boolean","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","bool"],"name":"iresult"}}],[5,"ty","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","ty"],"name":"iresult"}}],[5,"path","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","path"],"name":"iresult"}}],[5,"tt","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","tokentree"],"name":"iresult"}}],[5,"ident","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","ident"],"name":"iresult"}}],[5,"lifetime","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","lifetime"],"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",59,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"ByteStrLit"],[3,"FloatLit"],[3,"IntLit"],[3,"StrLit"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[3,"Ident"],[8,"Visitor"],[4,"IResult"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["take_mut"] = {"doc":"This crate provides several functions for handling `&mut T` including `take()`.","items":[[5,"take","take_mut","Allows use of a value pointed to by `&mut T` as though it was owned, as long as a `T` is made available afterwards.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":null}],[5,"take_or_recover","","Allows use of a value pointed to by `&mut T` as though it was owned, as long as a `T` is made available afterwards.",null,{"inputs":[{"name":"t"},{"name":"r"},{"name":"f"}],"output":null}],[0,"scoped","","This module provides a scoped API, allowing for taking an arbitrary number of `&mut T` into `T` within one closure. The references are all required to outlive the closure.",null,null],[3,"Scope","take_mut::scoped","Represents a scope within which, it is possible to take a `T` from a `&mut T` as long as the `&mut T` outlives the scope.",null,null],[3,"Hole","","A `Hole<'c, 'm, T, F>` represents an unfilled `&'m mut T` which must be filled before the end of the `Scope` with lifetime `'c` and recovery closure `F`.",null,null],[5,"scope","","Main function to create a `Scope`.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[11,"take_or_recover","","Takes a `(T, Hole<'c, 'm, T, F>)` from an `&'m mut T`.",0,null],[11,"take","","Takes a `(T, Hole<'c, 'm, T, F>)` from an `&'m mut T`.",0,null],[11,"fill","","Fills the Hole.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Scope"],[3,"Hole"]]};
searchIndex["textwrap"] = {"doc":"`textwrap` provides functions for word wrapping and filling text.","items":[[3,"NoHyphenation","textwrap","Use this as a [`Wrapper.splitter`] to avoid any kind of hyphenation:",null,null],[3,"HyphenSplitter","","Simple and default way to split words: splitting on existing hyphens only.",null,null],[3,"Wrapper","","A Wrapper holds settings for wrapping and filling text. Use it when the convenience [`wrap_iter`], [`wrap`] and [`fill`] functions are not flexible enough.",null,null],[12,"width","","The width in columns at which the text will be wrapped.",0,null],[12,"initial_indent","","Indentation used for the first line of output.",0,null],[12,"subsequent_indent","","Indentation used for subsequent lines of output.",0,null],[12,"break_words","","Allow long words to be broken if they cannot fit on a line. When set to `false`, some lines may be longer than `self.width`.",0,null],[12,"splitter","","The method for splitting words. If the `hyphenation` feature is enabled, you can use a `hyphenation::language::Corpus` here to get language-aware hyphenation.",0,null],[3,"IntoWrapIter","","An iterator over the lines of the input string which owns a `Wrapper`. An instance of `IntoWrapIter` is typically obtained through either [`wrap_iter`] or [`Wrapper::into_wrap_iter`].",null,null],[3,"WrapIter","","An iterator over the lines of the input string which borrows a `Wrapper`. An instance of `WrapIter` is typically obtained through the [`Wrapper::wrap_iter`] method.",null,null],[5,"fill","","Fill a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"string"}}],[5,"wrap","","Wrap a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["cow"],"name":"vec"}}],[5,"wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"generics":["hyphensplitter"],"name":"intowrapiter"}}],[5,"indent","","Add prefix to each non-empty line.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"string"}}],[5,"dedent","","Removes common leading whitespace from each line.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[8,"WordSplitter","","An interface for splitting words.",null,null],[10,"split","","Return all possible splits of word. Each split is a triple with a head, a hyphen, and a tail where `head + &hyphen + &tail == word`. The hyphen can be empty if there is already a hyphen in the head.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"nohyphenation"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split","","",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hyphensplitter"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"vec"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrapper"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken. A [`HyphenSplitter`] will be used by default for splitting words. See the [`WordSplitter`] trait for other options.",0,{"inputs":[{"name":"usize"}],"output":{"generics":["hyphensplitter"],"name":"wrapper"}}],[11,"with_splitter","","Use the given [`WordSplitter`] to create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken.",0,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"wrapper"}}],[11,"initial_indent","","Change [`self.initial_indent`]. The initial indentation is used on the very first line of output.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"wrapper"}}],[11,"subsequent_indent","","Change [`self.subsequent_indent`]. The subsequent indentation is used on lines following the first line of output.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"wrapper"}}],[11,"break_words","","Change [`self.break_words`]. This controls if words longer than `self.width` can be broken, or if they will be left sticking out into the right margin.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"wrapper"}}],[11,"fill","","Fill a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"wrap","","Wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["cow"],"name":"vec"}}],[11,"wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"wrapiter"}}],[11,"into_wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"intowrapiter"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["cow"],"name":"option"}}]],"paths":[[3,"Wrapper"],[8,"WordSplitter"],[3,"NoHyphenation"],[3,"HyphenSplitter"],[3,"IntoWrapIter"],[3,"WrapIter"]]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,{"inputs":[{"name":"self"}],"output":{"name":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["unicode_width"] = {"doc":"Determine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width is based on.",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",null,null],[10,"width","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"width_cjk","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utf8sequence"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8range"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["vec_map"] = {"doc":"A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[3,"Drain","","A draining iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"split_off","","Splits the collection into two at the given key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of the keys, emptying (but not consuming) the original `VecMap`. The iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",1,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["wigner_symbols"] = {"doc":"","items":[[3,"SignedSqrt","wigner_symbols","Signed square root of a rational number",null,null],[12,"0","","",0,null],[3,"ClebschGordan","","Clebsch-Gordan coefficient",null,null],[12,"tj1","","",1,null],[12,"tm1","","",1,null],[12,"tj2","","",1,null],[12,"tm2","","",1,null],[12,"tj12","","",1,null],[12,"tm12","","",1,null],[3,"Wigner3jm","","Wigner 3-jm symbol",null,null],[12,"tj1","","",2,null],[12,"tm1","","",2,null],[12,"tj2","","",2,null],[12,"tm2","","",2,null],[12,"tj3","","",2,null],[12,"tm3","","",2,null],[3,"Wigner6j","","Wigner 6-j symbol",null,null],[12,"tj1","","",3,null],[12,"tj2","","",3,null],[12,"tj3","","",3,null],[12,"tj4","","",3,null],[12,"tj5","","",3,null],[12,"tj6","","",3,null],[3,"Wigner9j","","Wigner 9-j symbol",null,null],[12,"tj1","","",4,null],[12,"tj2","","",4,null],[12,"tj3","","",4,null],[12,"tj4","","",4,null],[12,"tj5","","",4,null],[12,"tj6","","",4,null],[12,"tj7","","",4,null],[12,"tj8","","",4,null],[12,"tj9","","",4,null],[0,"internal","","Contents of this module are subject to change.",null,null],[3,"Step","wigner_symbols::internal","",null,null],[12,"iter","","",5,null],[12,"step","","",5,null],[5,"sort2","","",null,null],[5,"sort3","","",null,null],[5,"sort4","","",null,null],[5,"ordering_to_i32","","Reinterpret ordering as a sign:",null,{"inputs":[{"name":"ordering"}],"output":{"name":"i32"}}],[5,"binomial","","Calculate the binomial coefficient `C(n, k)`.",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"integer"}}],[5,"falling_factorial","","Calculate the falling factorial, i.e. the product of the integers `[n, n - k)`.",null,{"inputs":[{"name":"i32"},{"name":"i32"}],"output":{"name":"integer"}}],[5,"factorial","","Calculate the factorial `n!`.",null,{"inputs":[{"name":"i32"}],"output":{"name":"integer"}}],[5,"phase","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"triangle_condition","","Check `|j1 − j2| ≤ j3 ≤ j1 + j2` and `j1 + j2 + j3 ∈ ℤ`.",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"bool"}}],[5,"wigner_3jm_raw_c","","Calculate the Wigner 3-jm symbol times `(−1) ^ (j1 − j2 − m3)`.",null,{"inputs":[{"name":"wigner3jm"}],"output":{"name":"signedsqrt"}}],[5,"wigner_3jm_raw","","Calculate the Wigner 3-jm symbol times `(−1) ^ (j1 − j2 − m3)`. The selection rules are not checked.",null,{"inputs":[{"name":"wigner3jm"}],"output":{"name":"signedsqrt"}}],[5,"wigner_6j_raw","","Calculate the Wigner 6-j symbol.  The selection rules are not checked.",null,{"inputs":[{"name":"wigner6j"}],"output":{"name":"signedsqrt"}}],[5,"wigner_9j_raw","","Calculate the Wigner 9-j symbol.  The selection rules are not checked.",null,{"inputs":[{"name":"wigner9j"}],"output":{"name":"signedsqrt"}}],[5,"triangular_factor","","Calculate the triangular factor:",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"rational"}}],[5,"triangular_factor_raw","","Calculate `ja! jb! jc! / jd!`.",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"rational"}}],[5,"tetrahedral_sum","","Calculate the symbol in the paper by L. Wei that is enclosed in square brackets:",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"integer"}}],[5,"intersect_ranges","","",null,{"inputs":[{"generics":["i32"],"name":"range"},{"generics":["i32"],"name":"range"}],"output":{"generics":["i32"],"name":"range"}}],[5,"get_triangular_tjs","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["range"],"name":"step"}}],[5,"get_bitriangular_tjs","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["range"],"name":"step"}}],[5,"get_tms","","Get all projection quantum numbers that lie within the multiplet of `j`.",null,{"inputs":[{"name":"i32"}],"output":{"generics":["range"],"name":"step"}}],[5,"get_3tjms","","Get all possible arguments of the Wigner 3-j symbol that satisfy the selection rules up to a maximum of `j_max`.",null,{"inputs":[{"name":"i32"},{"name":"fnmut"}],"output":null}],[5,"get_6tjs","","Get all possible arguments of the Wigner 6-j symbol that satisfy the selection rules up to a maximum of `j_max`.",null,{"inputs":[{"name":"i32"},{"name":"fnmut"}],"output":null}],[5,"get_9tjs","","Get all possible arguments of the Wigner 9-j symbol that satisfy the selection rules up to a maximum of `j_max`.",null,{"inputs":[{"name":"i32"},{"name":"fnmut"}],"output":null}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"regge","wigner_symbols","",null,null],[3,"Regge3jm","wigner_symbols::regge","Regge square for Wigner 3-jm symbols, arranged in row-major order.",null,null],[12,"0","","",6,null],[3,"CanonicalRegge3jm","","",null,null],[12,"l","","",7,null],[12,"x","","",7,null],[12,"t","","",7,null],[12,"b","","",7,null],[12,"s","","",7,null],[3,"CanonicalRegge6j","","",null,null],[12,"e","","",8,null],[12,"l","","",8,null],[12,"x","","",8,null],[12,"t","","",8,null],[12,"b","","",8,null],[12,"s","","",8,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"regge3jm"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"regge3jm"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"regge3jm"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"regge3jm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"regge3jm"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"regge3jm"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"regge3jm"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"regge3jm"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"regge3jm"}],"output":{"name":"ordering"}}],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"from","","",6,{"inputs":[{"name":"wigner3jm"}],"output":{"name":"self"}}],[11,"magic_sum","","",6,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"swap","","",6,null],[11,"swap_rows","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"swap_cols","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"bool"}],"output":null}],[11,"transpose","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"canonicalize","","Canonicalize the Regge square using the ordering specified in Tuzun et al (1998).",6,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"canonicalregge3jm"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"canonicalregge3jm"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"canonicalregge3jm"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"canonicalregge3jm"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"canonicalregge3jm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"canonicalregge3jm"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"canonicalregge3jm"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"canonicalregge3jm"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"canonicalregge3jm"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"canonicalregge3jm"}],"output":{"name":"ordering"}}],[11,"index","","Index into a table ordered according to Rasch and Yu (2003).",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",7,{"inputs":[{"name":"i32"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"canonicalregge6j"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"canonicalregge6j"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"canonicalregge6j"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"canonicalregge6j"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"canonicalregge6j"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"canonicalregge6j"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"canonicalregge6j"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"canonicalregge6j"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"canonicalregge6j"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"canonicalregge6j"}],"output":{"name":"ordering"}}],[11,"from","","",8,{"inputs":[{"name":"wigner6j"}],"output":{"name":"self"}}],[11,"index","","Index into a table ordered according to Rasch and Yu (2003).",8,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",8,{"inputs":[{"name":"i32"}],"output":{"name":"usize"}}],[11,"clone","wigner_symbols","",0,{"inputs":[{"name":"self"}],"output":{"name":"signedsqrt"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"signedsqrt"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"signedsqrt"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"signedsqrt"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"signedsqrt"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"signedsqrt"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"signedsqrt"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"signedsqrt"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"signedsqrt"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"signedsqrt"}],"output":{"name":"ordering"}}],[11,"new","","Construct a `SignedSqrt` equal to `c √r`.",0,{"inputs":[{"name":"integer"},{"name":"rational"}],"output":{"name":"self"}}],[11,"sign","","Equivalent to `self.cmp(&Self::from(0))`.",0,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[11,"sq","","Returns the square of the expression.",0,{"inputs":[{"name":"self"}],"output":{"name":"rational"}}],[11,"signed_sq","","Returns the square of the expression, but with the sign adjusted to match the sign of the original expression.",0,{"inputs":[{"name":"self"}],"output":{"name":"rational"}}],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"clebschgordan"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"clebschgordan"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"clebschgordan"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"clebschgordan"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"clebschgordan"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"clebschgordan"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"clebschgordan"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"clebschgordan"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"clebschgordan"}],"output":{"name":"ordering"}}],[11,"from","","",1,{"inputs":[{"name":"wigner3jm"}],"output":{"name":"self"}}],[11,"value","","",1,{"inputs":[{"name":"self"}],"output":{"name":"signedsqrt"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"wigner3jm"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"wigner3jm"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"wigner3jm"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"wigner3jm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"wigner3jm"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"wigner3jm"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"wigner3jm"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"wigner3jm"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"wigner3jm"}],"output":{"name":"ordering"}}],[11,"from","","",2,{"inputs":[{"name":"clebschgordan"}],"output":{"name":"self"}}],[11,"value","","",2,{"inputs":[{"name":"self"}],"output":{"name":"signedsqrt"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"wigner6j"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"wigner6j"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"wigner6j"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"wigner6j"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"wigner6j"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"wigner6j"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"wigner6j"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"wigner6j"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"wigner6j"}],"output":{"name":"ordering"}}],[11,"value","","",3,{"inputs":[{"name":"self"}],"output":{"name":"signedsqrt"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"wigner9j"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"wigner9j"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"wigner9j"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"wigner9j"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"wigner9j"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"wigner9j"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"wigner9j"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"wigner9j"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"wigner9j"}],"output":{"name":"ordering"}}],[11,"value","","",4,{"inputs":[{"name":"self"}],"output":{"name":"signedsqrt"}}]],"paths":[[3,"SignedSqrt"],[3,"ClebschGordan"],[3,"Wigner3jm"],[3,"Wigner6j"],[3,"Wigner9j"],[3,"Step"],[3,"Regge3jm"],[3,"CanonicalRegge3jm"],[3,"CanonicalRegge6j"]]};
searchIndex["xz2"] = {"doc":"LZMA/XZ encoding and decoding streams","items":[[0,"stream","xz2","Raw in-memory LZMA streams.",null,null],[3,"Stream","xz2::stream","Representation of an in-memory LZMA encoding or decoding stream.",null,null],[3,"LzmaOptions","","Options that can be used to configure how LZMA encoding happens.",null,null],[3,"MtStreamBuilder","","Builder to create a multi-threaded stream encoder.",null,null],[3,"Filters","","A custom chain of filters to configure an encoding stream.",null,null],[4,"Action","","The `action` argument for `process`,",null,null],[13,"Run","","Continue processing",0,null],[13,"SyncFlush","","Make all the input available at output",0,null],[13,"FullFlush","","Finish encoding of the current block.",0,null],[13,"FullBarrier","","Finish encoding of the current block.",0,null],[13,"Finish","","Finish the current operation",0,null],[4,"Status","","Return value of a `process` operation.",null,null],[13,"Ok","","Operation completed successfully.",1,null],[13,"StreamEnd","","End of stream was reached.",1,null],[13,"GetCheck","","If the TELL_ANY_CHECK flags is specified when constructing a decoder, this informs that the `check` method will now return the underlying integrity check algorithm.",1,null],[13,"MemNeeded","","An error has not been encountered, but no progress is possible.",1,null],[4,"Error","","Possible error codes that can be returned from a processing operation.",null,null],[13,"Data","","The underlying data was corrupt.",2,null],[13,"Options","","Invalid or unsupported options were specified.",2,null],[13,"Format","","File format wasn't recognized.",2,null],[13,"MemLimit","","Memory usage limit was reached.",2,null],[13,"Mem","","Memory couldn't be allocated.",2,null],[13,"Program","","A programming error was encountered.",2,null],[13,"NoCheck","","The `TELL_NO_CHECK` flag was specified and no integrity check was available for this stream.",2,null],[13,"UnsupportedCheck","","The `TELL_UNSUPPORTED_CHECK` flag was specified and no integrity check isn't implemented in this build of liblzma for this stream.",2,null],[4,"Check","","Possible integrity checks that can be part of a .xz stream.",null,null],[13,"None","","",3,null],[13,"Crc32","","",3,null],[13,"Crc64","","",3,null],[13,"Sha256","","",3,null],[4,"Mode","","Compression modes",null,null],[13,"Fast","","Fast compression.",4,null],[13,"Normal","","Normal compression.",4,null],[4,"MatchFinder","","Match finders",null,null],[13,"HashChain3","","Hash Chain with 2- and 3-byte hashing",5,null],[13,"HashChain4","","Hash Chain with 2-, 3-, and 4-byte hashing",5,null],[13,"BinaryTree2","","Binary Tree with 2-byte hashing",5,null],[13,"BinaryTree3","","Binary Tree with 2- and 3-byte hashing",5,null],[13,"BinaryTree4","","Binary Tree with 2-, 3-, and 4-byte hashing",5,null],[17,"TELL_ANY_CHECK","","A flag passed when initializing a decoder, causes `process` to return `Status::GetCheck` as soon as the integrity check is known.",null,null],[17,"TELL_NO_CHECK","","A flag passed when initializing a decoder, causes `process` to return `Error::NoCheck` if the stream being decoded has no integrity check.",null,null],[17,"TELL_UNSUPPORTED_CHECK","","A flag passed when initializing a decoder, causes `process` to return `Error::UnsupportedCheck` if the stream being decoded has an integrity check that cannot be verified by this build of liblzma.",null,null],[17,"IGNORE_CHECK","","A flag passed when initializing a decoder, causes the decoder to ignore any integrity checks listed.",null,null],[17,"CONCATENATED","","A flag passed when initializing a decoder, indicates that the stream may be multiple concatenated xz files.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"action"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"check"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"matchfinder"}}],[11,"new_easy_encoder","","Initialize .xz stream encoder using a preset number",6,{"inputs":[{"name":"u32"},{"name":"check"}],"output":{"generics":["stream","error"],"name":"result"}}],[11,"new_lzma_encoder","","Initialize .lzma encoder (legacy file format)",6,{"inputs":[{"name":"lzmaoptions"}],"output":{"generics":["stream","error"],"name":"result"}}],[11,"new_stream_encoder","","Initialize .xz Stream encoder using a custom filter chain",6,{"inputs":[{"name":"filters"},{"name":"check"}],"output":{"generics":["stream","error"],"name":"result"}}],[11,"new_stream_decoder","","Initialize a .xz stream decoder.",6,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"generics":["stream","error"],"name":"result"}}],[11,"new_lzma_decoder","","Initialize a .lzma stream decoder.",6,{"inputs":[{"name":"u64"}],"output":{"generics":["stream","error"],"name":"result"}}],[11,"new_auto_decoder","","Initialize a decoder which will choose a stream/lzma formats depending on the input stream.",6,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"generics":["stream","error"],"name":"result"}}],[11,"process","","Processes some data from input into an output buffer.",6,null],[11,"process_vec","","Performs the same data as `process`, but places output data in a `Vec`.",6,null],[11,"total_in","","Returns the total amount of input bytes consumed by this stream.",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total amount of bytes produced by this stream.",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"memlimit","","Get the current memory usage limit.",6,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"set_memlimit","","Set the current memory usage limit.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["error"],"name":"result"}}],[11,"new_preset","","Creates a new blank set of options for encoding.",7,{"inputs":[{"name":"u32"}],"output":{"generics":["lzmaoptions","error"],"name":"result"}}],[11,"dict_size","","Configures the dictionary size, in bytes",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"lzmaoptions"}}],[11,"literal_context_bits","","Configures the number of literal context bits.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"lzmaoptions"}}],[11,"literal_position_bits","","Configures the number of literal position bits.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"lzmaoptions"}}],[11,"position_bits","","Configures the number of position bits.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"lzmaoptions"}}],[11,"mode","","Configures the compression mode.",7,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"lzmaoptions"}}],[11,"nice_len","","Configures the nice length of a match.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"lzmaoptions"}}],[11,"match_finder","","Configures the match finder ID.",7,{"inputs":[{"name":"self"},{"name":"matchfinder"}],"output":{"name":"lzmaoptions"}}],[11,"depth","","Maximum search depth in the match finder.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"lzmaoptions"}}],[11,"is_supported","","Test if this check is supported in this build of liblzma.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_supported","","Test if this match finder is supported in this build of liblzma.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new filter chain with no filters.",8,{"inputs":[],"output":{"name":"filters"}}],[11,"lzma1","","Add an LZMA1 filter.",8,{"inputs":[{"name":"self"},{"name":"lzmaoptions"}],"output":{"name":"filters"}}],[11,"lzma2","","Add an LZMA2 filter.",8,{"inputs":[{"name":"self"},{"name":"lzmaoptions"}],"output":{"name":"filters"}}],[11,"x86","","Add a filter for x86 binaries.",8,{"inputs":[{"name":"self"}],"output":{"name":"filters"}}],[11,"powerpc","","Add a filter for PowerPC binaries.",8,{"inputs":[{"name":"self"}],"output":{"name":"filters"}}],[11,"ia64","","Add a filter for IA-64 (itanium) binaries.",8,{"inputs":[{"name":"self"}],"output":{"name":"filters"}}],[11,"arm","","Add a filter for ARM binaries.",8,{"inputs":[{"name":"self"}],"output":{"name":"filters"}}],[11,"arm_thumb","","Add a filter for ARM-Thumb binaries.",8,{"inputs":[{"name":"self"}],"output":{"name":"filters"}}],[11,"sparc","","Add a filter for SPARC binaries.",8,{"inputs":[{"name":"self"}],"output":{"name":"filters"}}],[11,"new","","Creates a new blank builder to create a multithreaded encoding `Stream`.",9,{"inputs":[],"output":{"name":"mtstreambuilder"}}],[11,"threads","","Configures the number of worker threads to use",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"block_size","","Configures the maximum uncompressed size of a block",9,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"timeout_ms","","Timeout to allow `process` to return early",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"preset","","Compression preset (level and possible flags)",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[11,"filters","","Configure a custom filter chain",9,{"inputs":[{"name":"self"},{"name":"filters"}],"output":{"name":"self"}}],[11,"check","","Configures the integrity check type",9,{"inputs":[{"name":"self"},{"name":"check"}],"output":{"name":"self"}}],[11,"memusage","","Calculate approximate memory usage of multithreaded .xz encoder",9,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"encoder","","Initialize multithreaded .xz stream encoder.",9,{"inputs":[{"name":"self"}],"output":{"generics":["stream","error"],"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[0,"bufread","xz2","I/O streams for wrapping `BufRead` types as encoders/decoders",null,null],[3,"XzEncoder","xz2::bufread","An xz encoder, or compressor.",null,null],[3,"XzDecoder","","A xz decoder, or decompressor.",null,null],[11,"new","","Creates a new encoder which will read uncompressed data from the given stream and emit the compressed stream.",10,{"inputs":[{"name":"r"},{"name":"u32"}],"output":{"name":"xzencoder"}}],[11,"new_stream","","Creates a new encoder with a custom `Stream`.",10,{"inputs":[{"name":"r"},{"name":"stream"}],"output":{"name":"xzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying stream",10,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",10,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this encoder, returning the underlying reader.",10,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_out","","Returns the number of bytes produced by the compressor (e.g. the number of bytes read from this stream)",10,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_in","","Returns the number of bytes consumed by the compressor (e.g. the number of bytes read from the underlying stream)",10,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",10,null],[11,"write","","",10,null],[11,"flush","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder which will decompress data read from the given stream.",11,{"inputs":[{"name":"r"}],"output":{"name":"xzdecoder"}}],[11,"new_stream","","Creates a new decoder with a custom `Stream`.",11,{"inputs":[{"name":"r"},{"name":"stream"}],"output":{"name":"xzdecoder"}}],[11,"get_ref","","Acquires a reference to the underlying stream",11,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",11,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Consumes this decoder, returning the underlying reader.",11,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the number of bytes that the decompressor has consumed.",11,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the number of bytes that the decompressor has produced.",11,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",11,null],[11,"write","","",11,null],[11,"flush","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"read","xz2","Reader-based compression/decompression streams",null,null],[3,"XzEncoder","xz2::read","A compression stream which wraps an uncompressed stream of data. Compressed data will be read from the stream.",null,null],[3,"XzDecoder","","A decompression stream which wraps a compressed stream of data. Decompressed data will be read from the stream.",null,null],[11,"new","","Create a new compression stream which will compress at the given level to read compress output to the give output stream.",12,{"inputs":[{"name":"r"},{"name":"u32"}],"output":{"name":"xzencoder"}}],[11,"new_stream","","Creates a new encoder with a custom `Stream`.",12,{"inputs":[{"name":"r"},{"name":"stream"}],"output":{"name":"xzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying stream",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Unwrap the underlying writer, finishing the compression stream.",12,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_out","","Returns the number of bytes produced by the compressor (e.g. the number of bytes read from this stream)",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_in","","Returns the number of bytes consumed by the compressor (e.g. the number of bytes read from the underlying stream)",12,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",12,null],[11,"write","","",12,null],[11,"flush","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a new decompression stream, which will read compressed data from the given input stream and decompress it.",13,{"inputs":[{"name":"r"}],"output":{"name":"xzdecoder"}}],[11,"new_stream","","Creates a new decoder with a custom `Stream`.",13,{"inputs":[{"name":"r"},{"name":"stream"}],"output":{"name":"xzdecoder"}}],[11,"get_ref","","Acquires a reference to the underlying stream",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Unwrap the underlying writer, finishing the compression stream.",13,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_out","","Returns the number of bytes produced by the decompressor (e.g. the number of bytes read from this stream)",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_in","","Returns the number of bytes consumed by the decompressor (e.g. the number of bytes read from the underlying stream)",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",13,null],[11,"write","","",13,null],[11,"flush","","",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"write","xz2","Writer-based compression/decompression streams",null,null],[3,"XzEncoder","xz2::write","A compression stream which will have uncompressed data written to it and will write compressed data to an output stream.",null,null],[3,"XzDecoder","","A compression stream which will have compressed data written to it and will write uncompressed data to an output stream.",null,null],[11,"new","","Create a new compression stream which will compress at the given level to write compress output to the give output stream.",14,{"inputs":[{"name":"w"},{"name":"u32"}],"output":{"name":"xzencoder"}}],[11,"new_stream","","Create a new encoder which will use the specified `Stream` to encode (compress) data into the provided `obj`.",14,{"inputs":[{"name":"w"},{"name":"stream"}],"output":{"name":"xzencoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",14,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",14,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"try_finish","","Attempt to finish this output stream, writing out final chunks of data.",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes this encoder, flushing the output stream.",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_out","","Returns the number of bytes produced by the compressor",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_in","","Returns the number of bytes consumed by the compressor (e.g. the number of bytes written to this stream.)",14,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",14,null],[11,"flush","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",14,null],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new decoding stream which will decode all input written to it into `obj`.",15,{"inputs":[{"name":"w"}],"output":{"name":"xzdecoder"}}],[11,"new_stream","","Creates a new decoding stream which will decode all input written to it into `obj`.",15,{"inputs":[{"name":"w"},{"name":"stream"}],"output":{"name":"xzdecoder"}}],[11,"get_ref","","Acquires a reference to the underlying writer.",15,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"get_mut","","Acquires a mutable reference to the underlying writer.",15,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"finish","","Unwrap the underlying writer, finishing the compression stream.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"total_out","","Returns the number of bytes produced by the decompressor",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_in","","Returns the number of bytes consumed by the decompressor (e.g. the number of bytes written to this stream.)",15,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",15,null],[11,"flush","","",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",15,null],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[4,"Action"],[4,"Status"],[4,"Error"],[4,"Check"],[4,"Mode"],[4,"MatchFinder"],[3,"Stream"],[3,"LzmaOptions"],[3,"Filters"],[3,"MtStreamBuilder"],[3,"XzEncoder"],[3,"XzDecoder"],[3,"XzEncoder"],[3,"XzDecoder"],[3,"XzEncoder"],[3,"XzDecoder"]]};
searchIndex["yaml_rust"] = {"doc":"YAML 1.2 implementation in pure Rust.","items":[[0,"yaml","yaml_rust","",null,null],[3,"YamlLoader","yaml_rust::yaml","",null,null],[3,"YamlIter","","",null,null],[4,"Yaml","","A YAML node is stored as this `Yaml` enumeration, which provides an easy way to access your YAML document.",null,null],[13,"Real","","Float types are stored as String and parsed on demand. Note that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap.",0,null],[13,"Integer","","YAML int is stored as i64.",0,null],[13,"String","","YAML scalar.",0,null],[13,"Boolean","","YAML bool, e.g. `true` or `false`.",0,null],[13,"Array","","YAML array, can be accessed as a `Vec`.",0,null],[13,"Hash","","YAML hash, can be accessed as a `LinkedHashMap`.",0,null],[13,"Alias","","Alias, not fully supported yet.",0,null],[13,"Null","","YAML null, e.g. `null` or `~`.",0,null],[13,"BadValue","","Accessing a nonexistent node via the Index trait returns `BadValue`. This simplifies error handling in the calling code. Invalid type conversion also returns `BadValue`.",0,null],[6,"Array","","",null,null],[6,"Hash","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"yaml"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"on_event","","",1,{"inputs":[{"name":"self"},{"name":"event"},{"name":"marker"}],"output":null}],[11,"load_from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["vec","scanerror"],"name":"result"}}],[11,"as_bool","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"as_i64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_str","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_hash","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["hash"],"name":"option"}}],[11,"as_vec","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"into_bool","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"into_i64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"into_string","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"into_hash","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["hash"],"name":"option"}}],[11,"into_vec","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["array"],"name":"option"}}],[11,"is_null","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_badvalue","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_array","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_f64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"into_f64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"yaml"}}],[11,"into_iter","","",0,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["yaml"],"name":"option"}}],[0,"scanner","yaml_rust","",null,null],[3,"Marker","yaml_rust::scanner","",null,null],[3,"ScanError","","",null,null],[3,"Token","","",null,null],[12,"0","","",3,null],[12,"1","","",3,null],[3,"Scanner","","",null,null],[4,"TEncoding","","",null,null],[13,"Utf8","","",4,null],[4,"TScalarStyle","","",null,null],[13,"Any","","",5,null],[13,"Plain","","",5,null],[13,"SingleQuoted","","",5,null],[13,"DoubleQuoted","","",5,null],[13,"Literal","","",5,null],[13,"Foled","","",5,null],[4,"TokenType","","",null,null],[13,"NoToken","","",6,null],[13,"StreamStart","","",6,null],[13,"StreamEnd","","",6,null],[13,"VersionDirective","","major, minor",6,null],[13,"TagDirective","","handle, prefix",6,null],[13,"DocumentStart","","",6,null],[13,"DocumentEnd","","",6,null],[13,"BlockSequenceStart","","",6,null],[13,"BlockMappingStart","","",6,null],[13,"BlockEnd","","",6,null],[13,"FlowSequenceStart","","",6,null],[13,"FlowSequenceEnd","","",6,null],[13,"FlowMappingStart","","",6,null],[13,"FlowMappingEnd","","",6,null],[13,"BlockEntry","","",6,null],[13,"FlowEntry","","",6,null],[13,"Key","","",6,null],[13,"Value","","",6,null],[13,"Alias","","",6,null],[13,"Anchor","","",6,null],[13,"Tag","","handle, suffix",6,null],[13,"Scalar","","",6,null],[6,"ScanResult","","",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"tencoding"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"tencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"tscalarstyle"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"tscalarstyle"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"line","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"col","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"scanerror"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[{"name":"marker"},{"name":"str"}],"output":{"name":"scanerror"}}],[11,"marker","","",8,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tokentype"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["token"],"name":"option"}}],[11,"new","","Creates the YAML tokenizer.",9,{"inputs":[{"name":"t"}],"output":{"name":"scanner"}}],[11,"get_error","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["scanerror"],"name":"option"}}],[11,"stream_started","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"stream_ended","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mark","","",9,{"inputs":[{"name":"self"}],"output":{"name":"marker"}}],[11,"fetch_next_token","","",9,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[11,"next_token","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["option","scanerror"],"name":"result"}}],[11,"fetch_more_tokens","","",9,{"inputs":[{"name":"self"}],"output":{"name":"scanresult"}}],[0,"parser","yaml_rust","",null,null],[3,"Parser","yaml_rust::parser","",null,null],[4,"Event","","`Event` is used with the low-level event base parsing API, see `EventReceiver` trait.",null,null],[13,"Nothing","","Reserved for internal use",10,null],[13,"StreamStart","","",10,null],[13,"StreamEnd","","",10,null],[13,"DocumentStart","","",10,null],[13,"DocumentEnd","","",10,null],[13,"Alias","","Refer to an anchor ID",10,null],[13,"Scalar","","Value, style, anchor_id, tag",10,null],[13,"SequenceStart","","Anchor ID",10,null],[13,"SequenceEnd","","",10,null],[13,"MappingStart","","Anchor ID",10,null],[13,"MappingEnd","","",10,null],[6,"ParseResult","","",null,null],[8,"EventReceiver","","",null,null],[10,"on_event","","",11,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[8,"MarkedEventReceiver","","",null,null],[10,"on_event","","",12,{"inputs":[{"name":"self"},{"name":"event"},{"name":"marker"}],"output":null}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"peek","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["scanerror"],"name":"result"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"load","","",13,{"inputs":[{"name":"self"},{"name":"r"},{"name":"bool"}],"output":{"generics":["scanerror"],"name":"result"}}],[0,"emitter","yaml_rust","",null,null],[3,"YamlEmitter","yaml_rust::emitter","",null,null],[4,"EmitError","","",null,null],[13,"FmtError","","",14,null],[13,"BadHashmapKey","","",14,null],[6,"EmitResult","","",null,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"emiterror"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",14,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"new","","",15,{"inputs":[{"name":"write"}],"output":{"name":"yamlemitter"}}],[11,"compact","","Set 'compact inline notation' on or off, as described for block sequences and mappings.",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"is_compact","","Determine if this emitter is using 'compact inline notation'.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"dump","","",15,{"inputs":[{"name":"self"},{"name":"yaml"}],"output":{"name":"emitresult"}}]],"paths":[[4,"Yaml"],[3,"YamlLoader"],[3,"YamlIter"],[3,"Token"],[4,"TEncoding"],[4,"TScalarStyle"],[4,"TokenType"],[3,"Marker"],[3,"ScanError"],[3,"Scanner"],[4,"Event"],[8,"EventReceiver"],[8,"MarkedEventReceiver"],[3,"Parser"],[4,"EmitError"],[3,"YamlEmitter"]]};
initSearch(searchIndex);
