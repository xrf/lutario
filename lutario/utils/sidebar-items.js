initSidebarItems({"fn":[["abort_on_unwind","Prevent unwinding in foreign code (which is undefined behavior)."],["cast","Shorthand for casting numbers.  Panics if out of range."],["cast_range",""],["chop_slice",""],["chop_slice_mut",""],["decode_number",""],["default_hash_map","Works just like `HashMap::default()` but avoids unnecessary bounds on `K`."],["encode_number",""],["euclid_div",""],["euclid_mod",""],["gcd",""],["intersect_range_inclusive",""],["max_range","Maximum possible `Range`, which necessarily excludes the maximum value."],["pretty_bytes",""],["swap",""],["swap_if",""],["take_and_get",""],["try_cast",""],["with_tuple2_ref",""]],"mod":[["slice",""]],"struct":[["DebugWith","Helper struct for writing `Debug` implementations."],["RangeInclusive","Temporary definition until `std::ops::RangeInclusive` is stabilized."],["RangeSet","An ordered sequence of numbers `[ start + k × step | 0 ≤ k < len ]`"],["Toler",""],["UnsafeSync",""],["Zigzag","Zigzag integer encoding, which maps signed integers to unsigned integers."]],"trait":[["Erased","No-op trait: no constraints; satisfied by all types."],["Key",""],["Map",""],["MapMut",""],["Offset",""],["RefAdd","A more sanely defined addition trait to avoid throwing the compiler into an infinite loop."]]});