initSidebarItems({"macro":[["move_ref","Force a mutable reference to be moved instead of reborrowed."],["re","Declare a regular expression (`Regex`) cached via `lazy_static!`. This macro is mainly for internal use."],["toler_assert_eq","Check whether two `f64` numbers are equal within the given `Toler`."],["vec_apply","Apply an applicative, multi-vector operation. See `vector_driver`."]],"mod":[["ang_mom","Angular momentum coupling."],["basis","Basis manipulation."],["block","Block-diagonal matrices and similar things."],["block_mat","Packed block-diagonal matrices."],["block_tri_mat","Packed block-diagonal lower-triangular matrices."],["btree_cache","Insert-only B-tree map"],["cache","Insert-only caching of arbitrary data"],["cache2","Reference-counted caching of arbitrary data"],["half","Half-integers for angular momentum quantities."],["hf","Hartree–Fock method and normal ordering"],["imsrg","Implementation of IM-SRG(2)"],["inf_matter","Infinite matter, both electronic and nuclear"],["io","Input and output utility."],["isqrt","Integer square root"],["j_scheme","Implementation of the J-scheme abstraction."],["linalg","Linear algebra things"],["mat","BLAS-compatible matrix data types."],["minnesota","Minnesota interaction of nucleons"],["nuclei","Nuclei systems."],["op","Quantum operators"],["parity","Parity data type."],["phys_consts","Physical constants."],["plane_wave_basis","3D plane-wave basis."],["qdots","Quantum dots."],["qdpt","Quasidegenerate perturbation theory."],["sg_ode","Shampine-Gordon ODE solver."],["tri_mat","Row-major, lower-triangular matrices (`i ≥ j`)."],["utils","Everything else and the kitchen sink"],["vecn","A tiny module for tiny fixed-length vectors."],["vector_driver","Generalizes the idea of vector operations to enable transparent parallelization."]]});